=== Directory Content Listing ===
Excluded: node_modules, out, .next directories and .db files
===============================

FILE: ./README.md
----------------------------------------
# Bäckerei Heusser Website

> https://bäckerei-heusser.de/

## Development

This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
yarn dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.tsx`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.ts`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.
----------------------------------------

FILE: ./frontend_summary.sh
----------------------------------------
#!/bin/bash

# Script to list all files and print their content from the current directory
# Excludes node_modules, out, .next directories and .db files

# Define output file
OUTPUT_FILE="project_files.txt"

# Create or clear the output file
echo "=== Directory Content Listing ===" > "$OUTPUT_FILE"
echo "Excluded: node_modules, out, .next directories and .db files" >> "$OUTPUT_FILE"
echo "===============================" >> "$OUTPUT_FILE"
echo >> "$OUTPUT_FILE"

# Find all files excluding specified directories, .db files, and the output file itself
find . -type f \
    -not -path "*/node_modules/*" \
    -not -path "*/out/*" \
    -not -path "*/.next/*" \
    -not -path "*/\.*" \
    -not -name "*.db" \
    -not -name "$OUTPUT_FILE" \
    | sort \
    | while read -r file; do
        echo "FILE: $file" >> "$OUTPUT_FILE"
        echo "----------------------------------------" >> "$OUTPUT_FILE"

        # Check if file is binary
        if file "$file" | grep -q "text"; then
            # It's a text file, display content
            cat "$file" 2>/dev/null >> "$OUTPUT_FILE" ||
            echo "[Error: Could not display file content]" >> "$OUTPUT_FILE"
        else
            # It's a binary file
            echo "[Binary file - content not displayed]" >> "$OUTPUT_FILE"
        fi

        echo "----------------------------------------" >> "$OUTPUT_FILE"
        echo >> "$OUTPUT_FILE"
    done

echo "Files and content have been saved to $OUTPUT_FILE"
#!/bin/bash

# Script to generate AI-friendly documentation for a Next.js frontend
OUTPUT_FILE="frontend_summary.md"

echo "# Frontend Application Summary" > "$OUTPUT_FILE"
echo "This file contains essential information about the Next.js frontend application." >> "$OUTPUT_FILE"
echo "Generated on $(date)" >> "$OUTPUT_FILE"
echo "" >> "$OUTPUT_FILE"

# Configuration files
echo "## Core Configuration" >> "$OUTPUT_FILE"
echo "### Package.json" >> "$OUTPUT_FILE"
echo '```json' >> "$OUTPUT_FILE"
cat package.json | grep -v "\"description\":" | grep -v "\"license\":" >> "$OUTPUT_FILE" || echo "package.json not found"
echo '```' >> "$OUTPUT_FILE"
echo "" >> "$OUTPUT_FILE"

echo "### Next.js Configuration" >> "$OUTPUT_FILE"
echo '```javascript' >> "$OUTPUT_FILE"
cat next.config.js >> "$OUTPUT_FILE" 2>/dev/null || echo "next.config.js not found"
echo '```' >> "$OUTPUT_FILE"
echo "" >> "$OUTPUT_FILE"

# Directory structure (simplified)
echo "## Project Structure" >> "$OUTPUT_FILE"
echo '```' >> "$OUTPUT_FILE"
find . -type d -not -path "*/node_modules/*" -not -path "*/.next/*" -not -path "*/out/*" -not -path "*/\.*" | sort >> "$OUTPUT_FILE"
echo '```' >> "$OUTPUT_FILE"
echo "" >> "$OUTPUT_FILE"

# Pages structure
echo "## Pages" >> "$OUTPUT_FILE"
if [ -d "./pages" ]; then
  echo "### Main Pages" >> "$OUTPUT_FILE"
  find ./pages -type f -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" | sort >> "$OUTPUT_FILE"

  # Include _app.js and index.js as examples
  if [ -f "./pages/_app.js" ] || [ -f "./pages/_app.tsx" ]; then
    echo "" >> "$OUTPUT_FILE"
    echo "### App Component" >> "$OUTPUT_FILE"
    echo '```jsx' >> "$OUTPUT_FILE"
    cat ./pages/_app.js 2>/dev/null || cat ./pages/_app.tsx 2>/dev/null >> "$OUTPUT_FILE"
    echo '```' >> "$OUTPUT_FILE"
  fi

  if [ -f "./pages/index.js" ] || [ -f "./pages/index.tsx" ]; then
    echo "" >> "$OUTPUT_FILE"
    echo "### Home Page" >> "$OUTPUT_FILE"
    echo '```jsx' >> "$OUTPUT_FILE"
    cat ./pages/index.js 2>/dev/null || cat ./pages/index.tsx 2>/dev/null >> "$OUTPUT_FILE"
    echo '```' >> "$OUTPUT_FILE"
  fi
elif [ -d "./app" ]; then
  # For Next.js 13+ app directory
  echo "### App Directory (Next.js 13+)" >> "$OUTPUT_FILE"
  find ./app -type f -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" | sort >> "$OUTPUT_FILE"

  if [ -f "./app/layout.js" ] || [ -f "./app/layout.tsx" ]; then
    echo "" >> "$OUTPUT_FILE"
    echo "### Root Layout" >> "$OUTPUT_FILE"
    echo '```jsx' >> "$OUTPUT_FILE"
    cat ./app/layout.js 2>/dev/null || cat ./app/layout.tsx 2>/dev/null >> "$OUTPUT_FILE"
    echo '```' >> "$OUTPUT_FILE"
  fi

  if [ -f "./app/page.js" ] || [ -f "./app/page.tsx" ]; then
    echo "" >> "$OUTPUT_FILE"
    echo "### Home Page" >> "$OUTPUT_FILE"
    echo '```jsx' >> "$OUTPUT_FILE"
    cat ./app/page.js 2>/dev/null || cat ./app/page.tsx 2>/dev/null >> "$OUTPUT_FILE"
    echo '```' >> "$OUTPUT_FILE"
  fi
fi

# Components
echo "" >> "$OUTPUT_FILE"
echo "## Components" >> "$OUTPUT_FILE"
if [ -d "./components" ]; then
  echo "### Component Files" >> "$OUTPUT_FILE"
  find ./components -type f -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" | sort >> "$OUTPUT_FILE"

  # Sample a few key components (up to 3)
  echo "" >> "$OUTPUT_FILE"
  echo "### Sample Components" >> "$OUTPUT_FILE"

  # Find up to 3 representative components that aren't too large
  find ./components -type f \( -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" \) -size -10k | head -3 | while read comp; do
    echo "" >> "$OUTPUT_FILE"
    echo "#### $(basename "$comp")" >> "$OUTPUT_FILE"
    echo '```jsx' >> "$OUTPUT_FILE"
    cat "$comp" >> "$OUTPUT_FILE"
    echo '```' >> "$OUTPUT_FILE"
  done
fi

# Styles
echo "" >> "$OUTPUT_FILE"
echo "## Styling" >> "$OUTPUT_FILE"
if [ -d "./styles" ]; then
  find ./styles -type f -name "*.css" -o -name "*.scss" | sort >> "$OUTPUT_FILE"

  # Include global styles
  if [ -f "./styles/globals.css" ] || [ -f "./styles/global.css" ]; then
    echo "" >> "$OUTPUT_FILE"
    echo "### Global Styles" >> "$OUTPUT_FILE"
    echo '```css' >> "$OUTPUT_FILE"
    cat ./styles/globals.css 2>/dev/null || cat ./styles/global.css 2>/dev/null >> "$OUTPUT_FILE"
    echo '```' >> "$OUTPUT_FILE"
  fi
fi

# API routes
echo "" >> "$OUTPUT_FILE"
echo "## API Routes" >> "$OUTPUT_FILE"
if [ -d "./pages/api" ]; then
  find ./pages/api -type f -name "*.js" -o -name "*.ts" | sort >> "$OUTPUT_FILE"

  # Sample one API route
  API_ROUTE=$(find ./pages/api -type f \( -name "*.js" -o -name "*.ts" \) | head -1)
  if [ ! -z "$API_ROUTE" ]; then
    echo "" >> "$OUTPUT_FILE"
    echo "### Sample API Route" >> "$OUTPUT_FILE"
    echo '```javascript' >> "$OUTPUT_FILE"
    cat "$API_ROUTE" >> "$OUTPUT_FILE"
    echo '```' >> "$OUTPUT_FILE"
  fi
elif [ -d "./app/api" ]; then
  # For Next.js 13+ app directory
  find ./app/api -type f -name "*.js" -o -name "*.ts" | sort >> "$OUTPUT_FILE"

  # Sample one API route
  API_ROUTE=$(find ./app/api -type f \( -name "*.js" -o -name "*.ts" \) | head -1)
  if [ ! -z "$API_ROUTE" ]; then
    echo "" >> "$OUTPUT_FILE"
    echo "### Sample API Route (Route Handlers)" >> "$OUTPUT_FILE"
    echo '```javascript' >> "$OUTPUT_FILE"
    cat "$API_ROUTE" >> "$OUTPUT_FILE"
    echo '```' >> "$OUTPUT_FILE"
  fi
fi

# Services or utils
echo "" >> "$OUTPUT_FILE"
echo "## Utilities and Services" >> "$OUTPUT_FILE"
for dir in utils services lib helpers; do
  if [ -d "./$dir" ]; then
    echo "### $dir Files" >> "$OUTPUT_FILE"
    find "./$dir" -type f -name "*.js" -o -name "*.ts" | sort >> "$OUTPUT_FILE"

    # Sample one file
    UTIL_FILE=$(find "./$dir" -type f \( -name "*.js" -o -name "*.ts" \) | head -1)
    if [ ! -z "$UTIL_FILE" ]; then
      echo "" >> "$OUTPUT_FILE"
      echo "#### Sample $(basename "$UTIL_FILE")" >> "$OUTPUT_FILE"
      echo '```javascript' >> "$OUTPUT_FILE"
      cat "$UTIL_FILE" >> "$OUTPUT_FILE"
      echo '```' >> "$OUTPUT_FILE"
    fi
  fi
done

echo "" >> "$OUTPUT_FILE"
echo "## Summary" >> "$OUTPUT_FILE"
echo "This file provides a high-level overview of the frontend application structure." >> "$OUTPUT_FILE"
echo "For detailed implementation, please refer to the actual code files." >> "$OUTPUT_FILE"

echo "Frontend summary has been generated in $OUTPUT_FILE"
----------------------------------------

FILE: ./next-env.d.ts
----------------------------------------
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.
----------------------------------------

FILE: ./next.config.js
----------------------------------------
// let basePath = process.env.production == undefined ? '' : '/website'
const basePath = process.env.BASE_PATH ?? '' // get `basePath` for your use-case

/** @type {import('next').NextConfig} */
const nextConfig = {
  basePath,
  reactStrictMode: false,
  output: 'export',
  env: {
    basePath,
  },
  transpilePackages: [
    '@fullcalendar/core',
    '@fullcalendar/react',
    '@fullcalendar/daygrid',
    '@fullcalendar/timegrid',
    '@fullcalendar/interaction',
    '@fullcalendar/resource-timegrid',
  ],
}

module.exports = nextConfig
----------------------------------------

FILE: ./package-lock.json
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./package.json
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/android-chrome-192x192.png
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/android-chrome-512x512.png
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/apple-touch-icon.png
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/bakery/1933.png
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/bakery/about-img-1.jpeg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/bakery/about-img-2.jpeg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/bakery/bakers-delight-1.jpg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/bakery/bakers-delight-2.jpg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/bakery/brot.jpeg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/bakery/brot2.jpeg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/bakery/haus_banner.jpeg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/bakery/hero-bg.jpg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/bakery/neu_brot.jpeg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/bakery/neu_haus_banner.jpeg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/bakery/neu_theke.jpeg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/bakery/neu_theke2.jpeg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/bakery/neu_theke3.jpeg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/bakery/neu_torte.jpeg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/bakery/square-1.jpg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/bakery/square-2.jpg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/bakery/square-3.jpg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/bakery/square-4.jpg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/bakery/stollen.jpeg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/bakery/story-img.jpg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/bakery/tasteful-recipes.jpg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/bakery/tasty.jpg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/bakery/theke.jpg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/bakery/theke2.jpeg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/bakery/theke3.jpeg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/bakery/torte.jpeg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/feature.svg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/feature2.svg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/feature3.svg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/nextjs-landing-page-banner.png
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/nextjs-landing-page-screenshot.png
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/products/Type=Baguette.svg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/products/Type=Brezel.svg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/products/Type=Brot Rund.svg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/products/Type=Brötchen.svg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/products/Type=Croissant.svg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/products/Type=Doppelweck.svg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/products/Type=Hefezopf.svg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/products/Type=Kasten-Weißbrot.svg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/products/Type=Kornbrot.svg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/products/Type=Kranzkuchen.svg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/products/Type=Kuchen.svg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/products/Type=Kuchenstück.svg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/products/Type=Mischbrot.svg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/products/Type=Rolle.svg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/products/Type=Schnecke.svg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/products/Type=Schokobrötchen.svg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/products/Type=Tasche.svg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/products/Type=Vollkorn Kastenbrot.svg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/stock/about-img-1.jpeg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/stock/about-img-2.jpeg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/stock/baker-1.jpg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/stock/baker-2.jpg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/stock/baker-3.jpg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/stock/baker-4.jpg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/stock/bakers-delight-1.jpg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/stock/bakers-delight-2.jpg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/stock/bg_video.mp4
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/stock/bg_video.webm
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/stock/handmade.jpeg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/stock/hero-bg.jpg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/stock/screenshot.jpg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/stock/square-1.jpg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/stock/square-2.jpg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/stock/square-3.jpg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/stock/square-4.jpg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/stock/story-img.jpg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/stock/tasteful-recipes.jpg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/images/stock/tasty.jpg
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/assets/qr-home.png
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/docs/planning/kpi.md
----------------------------------------
# KPI Evaluation: Manual vs. Automated Tracking

Below is an evaluation of each KPI, determining whether it should be tracked manually by staff or automated through systems. For each metric, I've provided an appropriate database field name following naming conventions.

## 1. Backstubenmeister (Production & Quality Control)

### Production Data
| KPI | Track Method | DB Field Name | Justification |
|-----|-------------|--------------|---------------|
| Gebackene Mengen pro Produkt | **Automation** | `daily_production_quantity` | Can be automated through POS integration or production management software |
| Abweichungen von der Produktion | **Manual** | `production_deviation_notes` | Requires human judgment to explain variances |

### Raw Materials Usage
| KPI | Track Method | DB Field Name | Justification |
|-----|-------------|--------------|---------------|
| Mehlverbrauch, Hefe, etc. | **Semi-Automated** | `ingredient_usage_quantity` | Can use recipe-based calculation with manual verification |
| Lagerbestand der Hauptzutaten | **Automation** | `inventory_level` | Inventory management system with barcode/RFID scanning |

### Production Times & Efficiency
| KPI | Track Method | DB Field Name | Justification |
|-----|-------------|--------------|---------------|
| Beginn/Ende der Produktion | **Automation** | `production_start_time`, `production_end_time` | Clock-in systems or time tracking software |
| Zeit pro Produktionsschritt | **Semi-Automated** | `production_step_duration` | Production tracking software with checkpoints |
| Engpässe oder Verzögerungen | **Manual** | `production_bottleneck_notes` | Requires human observation and explanation |

### Quality Control
| KPI | Track Method | DB Field Name | Justification |
|-----|-------------|--------------|---------------|
| Rückmeldungen zur Teigqualität | **Manual** | `dough_quality_rating` | Requires expert assessment |
| Reklamationen/Kundenwünsche | **Manual** | `quality_feedback_notes` | Requires human interpretation of customer feedback |

### Energy Usage
| KPI | Track Method | DB Field Name | Justification |
|-----|-------------|--------------|---------------|
| Strom- & Wasserverbrauch | **Automation** | `energy_consumption`, `water_consumption` | Smart meters or IoT devices for utility monitoring |

## 2. Geschäftsführer (Strategy, Finance & Controlling)

### Financial Metrics
| KPI | Track Method | DB Field Name | Justification |
|-----|-------------|--------------|---------------|
| Tagesumsatz | **Automation** | `daily_revenue_total`, `daily_revenue_by_category` | POS system integration |
| Durchschnittlicher Bonbetrag | **Automation** | `avg_transaction_value` | Calculated from POS data |
| Anzahl der Transaktionen | **Automation** | `transaction_count` | POS system count |

### Costs & Materials Usage
| KPI | Track Method | DB Field Name | Justification |
|-----|-------------|--------------|---------------|
| Rohstoffkosten des Tages | **Semi-Automated** | `daily_ingredient_cost` | Calculated from usage data and price data |
| Personalstunden | **Automation** | `staff_hours_total` | Time tracking/staff management system |
| Fixkostenübersicht | **Semi-Automated** | `fixed_cost_allocation` | Accounting system with manual review |

### Inventory & Purchasing
| KPI | Track Method | DB Field Name | Justification |
|-----|-------------|--------------|---------------|
| Bestand an wichtigen Zutaten | **Automation** | `critical_inventory_levels` | Inventory management system |
| Bestellbedarf | **Semi-Automated** | `purchase_requirements` | Auto-generated from inventory thresholds with manual review |

### Customer Satisfaction
| KPI | Track Method | DB Field Name | Justification |
|-----|-------------|--------------|---------------|
| Kundenrückmeldungen/Trends | **Manual** | `customer_feedback_trends` | Requires human analysis of patterns |
| Beschwerden & Lösungen | **Manual** | `complaint_resolution_notes` | Requires human handling and documentation |

### Market & Competition
| KPI | Track Method | DB Field Name | Justification |
|-----|-------------|--------------|---------------|
| Kundenverhalten | **Manual** | `customer_behavior_notes` | Requires observation and interpretation |
| Trends | **Manual** | `market_trend_notes` | Requires human analysis and market knowledge |

## 3. Verkäuferin (Sales & Customer Contact)

### Sales & Demand
| KPI | Track Method | DB Field Name | Justification |
|-----|-------------|--------------|---------------|
| Meistverkaufte Produkte | **Automation** | `top_selling_products` | POS system reporting |
| Produkte mit geringem Absatz | **Automation** | `low_performing_products` | POS system reporting |
| Ausverkaufte Produkte | **Semi-Automated** | `sold_out_products` | POS flag with time stamp, manual verification |

### Customer Behavior & Trends
| KPI | Track Method | DB Field Name | Justification |
|-----|-------------|--------------|---------------|
| Kundenfragen & Wünsche | **Manual** | `customer_request_notes` | Requires staff interaction and documentation |
| Rabatt/Gutschein-Nutzung | **Automation** | `promotion_usage_count` | POS system tracking |

### Missing Products & Issues
| KPI | Track Method | DB Field Name | Justification |
|-----|-------------|--------------|---------------|
| Frühzeitig ausverkaufte Produkte | **Manual** | `early_stockout_notes` | Requires staff observation on timing |
| Verzögerungen/Fehler | **Manual** | `operational_issue_notes` | Requires human documentation of incidents |

### Staff Feedback
| KPI | Track Method | DB Field Name | Justification |
|-----|-------------|--------------|---------------|
| Feedback zu Stressmomenten | **Manual** | `peak_traffic_feedback` | Requires staff perception and reporting |
| Verbesserungsvorschläge | **Manual** | `improvement_suggestion_notes` | Requires staff input and ideas |

## Implementation Recommendations:

1. **Automation Priority**: Focus first on automating financial and production quantity metrics through POS and inventory systems

2. **Semi-Automated Processes**: Develop systems that generate baseline data but allow for human verification and adjustment

3. **Manual Input Interface**: Create simple mobile/tablet interfaces for quick data entry during or after shifts

4. **Dashboard Integration**: Combine automated and manual data into unified dashboards for each role

5. **Phased Implementation**: Start with the most critical KPIs and add more sophisticated tracking over time
----------------------------------------

FILE: ./public/docs/planning/vision.md
----------------------------------------
# Handbuch zur Zukunftssicherung der Bäckerei Heusser: KI und Cloud-basierte Digitalisierung

Die digitale Transformation bietet auch für kleine handwerkliche Bäckereien enorme Chancen. Dieses Handbuch zeigt konkrete Schritte, wie die Bäckerei Heusser in Kirrberg durch intelligente Digitalisierung, KI-Integration und Cloud-Lösungen zukunftsfähig aufgestellt werden kann. Der Fokus liegt auf schrittweiser Implementierung digitaler Werkzeuge, die sowohl Kundenzufriedenheit als auch Mitarbeiterglück steigern und gleichzeitig Produktion und Verkauf optimieren – ohne dabei den Charakter einer traditionellen Dorfbäckerei zu verlieren.

## Bestandsaufnahme und Ausgangssituation

### Die Bäckerei Heusser heute

Die Bäckerei Heusser ist ein klassischer Handwerksbetrieb in Kirrberg mit einer Backstube und einem Verkaufsladen. Mit insgesamt sechs Mitarbeitern (zwei im Verkauf, ein Bäckermeister und zwei bis drei Aushilfen) versorgt sie die 2.562 Einwohner des Ortes mit handwerklich hergestellten Backwaren. Zusätzlich beliefert die Bäckerei örtliche Vereine für Veranstaltungen.

### Herausforderungen kleiner Bäckereien

Traditionelle handwerkliche Bäckereien stehen vor zahlreichen Herausforderungen. Steigende Rohstoffkosten erhöhen den Druck auf die Gewinnmargen und erschweren es, wettbewerbsfähige Preise anzubieten[2]. Gleichzeitig müssen Bäckereien mit begrenzten personellen Ressourcen eine hohe Produktqualität und pünktliche Herstellung sicherstellen[2]. Ein weiteres zentrales Problem sind Umsatzverluste durch Ausverkäufe oder Überproduktion mit resultierender Lebensmittelverschwendung[2]. Die richtige Balance zwischen Angebot und Nachfrage zu finden, stellt eine tägliche Herausforderung dar.

## Stufe 1: Grundlegende Digitalisierung der Bäckerei

### Digitales Kassensystem implementieren

Als erster Schritt sollte ein modernes Kassensystem wie CashAssist eingeführt werden. Dies ermöglicht nicht nur eine einfachere Abwicklung der Verkäufe, sondern sammelt automatisch wertvolle Daten zu Verkaufsmustern und Kundenpräferenzen[3]. Das System sollte folgende Funktionen bieten:

- Erfassung aller Verkaufsdaten für spätere Auswertungen
- Einfache Handhabung für Verkaufspersonal
- Anbindung an Warenwirtschaft und Bestellsystem
- Unterstützung von Kundenbindungsprogrammen

### Warenwirtschaftssystem etablieren

Ein Warenwirtschaftssystem wie WaWiAssist ermöglicht es, stets den Überblick über vorhandene Materialien und Zutaten zu behalten[3]. Durch die digitale Erfassung von Lagerbeständen können unerwartete Engpässe vermieden werden. Das System sollte:

- Automatische Bestandserfassung und -verwaltung
- Warnmeldungen bei niedrigem Lagerbestand
- Verknüpfung mit Lieferanten für automatisierte Bestellprozesse
- Rezeptverwaltung und Kalkulation

### Erste Cloud-Integration

Die Einführung von Cloud-Technologie bildet das Rückgrat für alle weiteren Digitalisierungsschritte. Sie ermöglicht:

- Zentralisierte Datenspeicherung und -zugriff von überall
- Sichere Datensicherung ohne komplexe lokale IT-Infrastruktur
- Fernwartung der Systeme ohne Vor-Ort-Einsätze[3]
- Skalierbare Lösungen, die mit dem Unternehmen mitwachsen

## Stufe 2: KI-Integration für effizientes Backhandwerk

### Bedarfsvorhersage mit KI optimieren

Eine der revolutionärsten Anwendungen von KI in Bäckereien ist die präzise Vorhersage der benötigten Produktionsmengen. Mit Lösungen wie BackPlan oder foodforecast kann die Bäckerei Heusser:

- Tägliche Produktionsmengen basierend auf historischen Daten, Wetter, lokalen Ereignissen und Saisonalität vorhersagen[2][6]
- Lebensmittelverschwendung um bis zu 30% reduzieren[6]
- Ausverkaufssituationen vermeiden und damit die Kundenzufriedenheit steigern
- Umsatzpotenzial von bis zu 12% realisieren[2]

Das Kölner Startup foodforecast beispielsweise hat eine KI entwickelt, die genau diese Entscheidungen für Bäckereien trifft und so erfahrene Mitarbeiter unterstützt[6].

### Rezepturmanagement und Qualitätssicherung

KI kann auch bei der Optimierung von Rezepturen helfen:

- Automatisierte Anpassung von Rezepturen basierend auf Kundenfeedback
- Konsistente Qualität durch präzise Messungen und Standardisierung
- Dokumentation von Produktionsabläufen für Qualitätssicherung
- Optimierung des Ressourcenverbrauchs (Energie, Wasser, Rohstoffe)

### Automatisierte Energiesteuerung

Fortschrittliche Bäckereien nutzen bereits die überschüssige Wärme ihrer Kühlanlagen zur Beheizung anderer Räume wie Büros[1]. Eine KI-gesteuerte Energieverwaltung kann:

- Den Energieverbrauch in Echtzeit überwachen und optimieren
- Backprozesse energieeffizient planen
- Wärmerückgewinnung automatisiert steuern
- Signifikante Kosteneinsparungen bei gleichzeitiger Förderung der Nachhaltigkeit erreichen

## Stufe 3: Kundenorientierte Digitalisierung

### Digitales Kundenbindungsprogramm

Ein digitales Kundenbindungsprogramm kann die persönliche Beziehung, die für eine Dorfbäckerei typisch ist, mit modernen Funktionen verbinden:

- Digitale Kundenkarte mit Bonuspunktesystem
- Personalisierte Angebote basierend auf Kaufhistorie
- Geburtstagsgutscheine und spezielle Aktionen
- App-basierte Kommunikation und Feedback-Möglichkeiten

### Online-Präsenz und Bestellplattform

Eine moderne Webseite mit Bestellfunktion erweitert die Reichweite der Bäckerei Heusser:

- Einfache Online-Bestellung für Stammkunden
- Vorbestellungen für Feste und Veranstaltungen
- Informationen über Spezialitäten, Allergene und Inhaltsstoffe
- Integration von lokalen Lieferdiensten für ältere oder mobilitätseingeschränkte Kunden

### Digitale Informationsdisplays im Laden

Moderne Displays im Verkaufsraum können:

- Kunden während der Wartezeit über Angebote und Produkte informieren
- Jobangebote präsentieren
- Lokale Veranstaltungen bewerben und so die Gemeinschaft stärken
- Unterhaltsame und informative Inhalte über Produkte, Herstellung und Zutaten zeigen[3]

## Stufe 4: Mitarbeiterorientierte Digitalisierung

### Digitale Schulungs- und Weiterbildungsplattform

Die Investition in Mitarbeiterkompetenzen ist entscheidend für den Erfolg:

- Digitale Schulungsmodule für neue und bestehende Mitarbeiter
- Weiterbildungen zu neuen Produkten, Verkaufstechniken und Kundenbedienung
- Aufbau einer digitalen Wissensdatenbank für Rezepte und Verfahren
- Förderung von Innovation und kontinuierlicher Verbesserung

### Automatisierte Arbeitszeitplanung

Software zur optimierten Personalplanung kann:

- Mitarbeiter-Schichtpläne basierend auf Verkaufsvorhersagen erstellen
- Arbeitszeitpräferenzen berücksichtigen und Work-Life-Balance fördern
- Den administrativen Aufwand bei der Personalplanung erheblich reduzieren
- Flexible Reaktion auf Krankheitsausfälle oder besondere Bedarfssituationen ermöglichen

### Interne Kommunikationsplattform

Eine digitale Kommunikationsplattform verbessert den Informationsfluss:

- Einfacher Austausch zwischen Verkauf und Produktion
- Schnelle Weitergabe von wichtigen Informationen
- Sammlung von Ideen und Verbesserungsvorschlägen
- Stärkung des Teamgeists und der Identifikation mit dem Betrieb

## Der konkrete "Überleben und Wachsen"-Plan

### Phase 1: Grundlagen schaffen (0-6 Monate)

1. **Monat 1-2: Digitale Bestandsaufnahme**
   - Erfassung aller bestehenden Prozesse und Identifikation von Digitalisierungspotentialen
   - Auswahl eines geeigneten Kassensystems und Warenwirtschaftssystems
   - Schulung der Mitarbeiter für die grundlegende Digitalkompetenz

2. **Monat 3-4: Basisinfrastruktur implementieren**
   - Installation von stabilem WLAN und notwendiger Hardware
   - Einführung des digitalen Kassensystems und erste Datensammlung
   - Aufbau einer einfachen Webseite mit Basisinformationen

3. **Monat 5-6: Datenbasierte Entscheidungsfindung beginnen**
   - Erste Auswertungen der Verkaufsdaten
   - Entwicklung einer Strategie für soziale Medien
   - Identifikation der meistverkauften Produkte und Optimierung des Angebots

### Phase 2: Intelligente Systeme integrieren (7-18 Monate)

1. **Monat 7-9: KI-basierte Bedarfsvorhersage**
   - Implementierung einer KI-Lösung wie foodforecast zur Produktionsplanung
   - Schulung der Mitarbeiter im Umgang mit dem System
   - Erste Messungen zur Reduzierung von Lebensmittelabfällen

2. **Monat 10-12: Kundenorientierte Digitalisierung**
   - Einführung eines digitalen Kundenbindungsprogramms
   - Erwiterung der Webseite um Bestellfunktionen
   - Installation digitaler Informationsbildschirme im Laden

3. **Monat 13-18: Prozessoptimierung und Energieeffizienz**
   - Vollständige Integration aller digitalen Systeme (Kasse, Warenwirtschaft, Bestellungen)
   - Einführung von Energiemonitoring und -optimierung
   - Entwicklung eigener Backrezepturen basierend auf Kundenpräferenzen und Feedback

### Phase 3: Wachstum und Community-Aufbau (ab Monat 19)

1. **Monat 19-24: Erweiterung des Geschäftsmodells**
   - Ausbau des Catering-Angebots für lokale Veranstaltungen
   - Entwicklung von Workshop-Angeboten für interessierte Kunden
   - Kooperationen mit lokalen Produzenten für besondere Zutaten

2. **Monat 25-30: Die offene Bäckerei**
   - Etablierung als Open-Source-Zentrum für andere lokale Unternehmen
   - Austausch von digitalem Know-how mit anderen Handwerksbetrieben
   - Schaffung eines lokalen Netzwerks für digitale Handwerksbetriebe

3. **Ab Monat 31: Innovation und Expansion**
   - Kontinuierliche Weiterentwicklung der digitalen Systeme
   - Mögliche Eröffnung eines zweiten Standorts oder eines mobilen Verkaufsstands
   - Integration in regionale Lebensmittel-Ökosysteme und -Plattformen

## Die Bäckerei als Open-Source-Zentrum für lokale Unternehmen

### Wissenstransfer und Community-Building

Die Bäckerei Heusser kann ihre Erfahrungen mit der Digitalisierung nutzen, um andere lokale Unternehmen zu unterstützen:

- Organisation von Workshops zur Digitalisierung für andere Handwerksbetriebe
- Bereitstellung von dokumentierten Best Practices und Implementierungsleitfäden
- Aufbau einer lokalen Gemeinschaft für digitales Handwerk

### Gemeinsame Ressourcennutzung

Kleine Unternehmen können durch Ressourcenbündelung profitieren:

- Gemeinsame Nutzung von Cloud-Diensten und digitalen Werkzeugen
- Geteilte Logistik- und Lieferstrukturen
- Gegenseitige Unterstützung bei der Implementierung neuer Technologien

### Lokales Wirtschaftsökosystem stärken

Eine digital vernetzte Bäckerei kann zum Knotenpunkt werden:

- Integration in lokale Lebensmittelkreisläufe
- Kooperationen mit lokalen Landwirten, Mühlen und anderen Produzenten
- Vernetzung mit Schulen, Vereinen und anderen Gemeinschaftseinrichtungen

## Finanzierungsstrategien für die digitale Transformation

### Fördergelder und Zuschüsse nutzen

Für die Digitalisierung kleiner Handwerksbetriebe gibt es verschiedene Fördermöglichkeiten:

- Bundesförderprogramme für Digitalisierung im Handwerk
- Landesspezifische Förderungen für kleine und mittlere Unternehmen (KMU)
- EU-Fördermittel für Innovation und Nachhaltigkeit
- Unterstützung durch die Handwerkskammer

### Schrittweise Investitionen planen

Die Digitalisierung sollte nicht zu finanziellen Überlastungen führen:

- Priorisierung von Maßnahmen mit schnellem Return on Investment
- Nutzung von Abo-Modellen statt hoher Anfangsinvestitionen
- Reinvestition der ersten Effizienzgewinne in weitere Digitalisierungsschritte
- Kombination aus eigenen Mitteln und gezielter Förderung

## Fazit: Die zukunftssichere Dorfbäckerei

Die Digitalisierung und KI-Integration stellen für die Bäckerei Heusser keine Bedrohung des traditionellen Handwerks dar, sondern eine Chance, dieses zu bewahren und weiterzuentwickeln. Durch die schrittweise Implementierung digitaler Werkzeuge kann die Bäckerei ihre Effizienz steigern, Kosten senken und gleichzeitig die Qualität und Kundenzufriedenheit verbessern[5].

Die Kombination aus handwerklichem Können und modernen Technologien schafft eine zukunftssichere Bäckerei, die nicht nur wirtschaftlich erfolgreich ist, sondern auch als zentraler Treffpunkt und Innovations-Hub in der lokalen Gemeinschaft fungiert. Indem die Bäckerei Heusser ihr digitales Wissen mit anderen lokalen Unternehmen teilt, trägt sie zur Stärkung der gesamten Gemeinschaft bei und sichert so die Zukunft des lokalen Handwerks in Kirrberg und Umgebung.

Die Digitalisierung im Bäckerhandwerk ist kein Widerspruch zur Tradition – vielmehr ermöglicht sie es, diese Tradition unter neuen wirtschaftlichen Bedingungen zu bewahren und weiterzuentwickeln[1]. Eine kluge, schrittweise Digitalisierung sichert nicht nur das Überleben, sondern eröffnet auch neue Chancen für Wachstum und Innovation.

Citations:
[1] https://www.aramaz-digital.de/digitalisierung-in-der-baeckerei/
[2] https://backofficedigital.de/ki-baeckerei/
[3] https://www.hssoft.de/news/vorteile-der-digitalisierung-in-der-backbranche
[4] https://de.linkedin.com/in/thomas-betz-57b2b830b
[5] https://www.optimobercher.de/blog/53_digitalisierungsguide_fuer_baeckereien/
[6] https://koeln.business/magazinbeitrag/foodforecast-bringt-ki-in-die-baeckerei
[7] https://backdigital.de/wp-content/uploads/2022/04/Broschuere-Backdigital.pdf
[8] https://horizont-handwerk.de/wp-content/uploads/h2025-digi-werkstatt_ki-baecker-transferleitfaden-1.pdf
[9] https://baeckereihandwerk.de/die-besten-tools-fuer-digitale-transformation-ihrer-baeckerei/
[10] https://www.weizenbaum-institut.de/news/detail/berliner-start-ups-aufstieg-datenbasierter-geschftsmodelle/
[11] https://bimanu.de/success-story/kaisers-gute-backstube/
[12] https://reset.org/traditionelles-backhandwerk-per-digitaler-transformation-in-die-zukunft-fuehren/
[13] https://industry-science.com/artikel/baeckerei-4-0-entwicklung-eines-iot-frameworks-zur-automatischen-erfassung-von-maschinen-und-prozessdaten-in-mittelstaendischen-baeckereibetrieben/
[14] https://www.hiig.de/digitale-geschaeftsmodelle-im-handwerk/
[15] https://www.arbeitsagentur.de/datei/annual-report-2021_ba038059.pdf
[16] https://baeko-magazin.de/messen/digitalisierung-zum-anfassen/
[17] https://wissensforum-backwaren.de/digitalisierung-im-baeckerhandwerk-erleichterungen-fuer-den-arbeitsalltag-und-neue-werbemoeglichkeiten/
[18] https://www.it-boltwise.de/kuenstliche-intelligenz-beim-baecker-aiperia-setzt-auf-ki-zur-reduzierung-von-lebensmittelverschwendung-weltweit-und-erhaelt-75-millionen-euro.html
[19] https://backofficedigital.de/digitale-foerderung-2025/
[20] https://www.odoo.com/de_DE/blog/odoo-news-5/the-new-odoo-326
[21] https://mein-bbn.de/baeckerei/index.php/bbn-software/
[22] https://backofficedigital.de/magazin/
[23] https://www.dfki.de/web/news/ki-basierte-prognosen-fuer-lebensmittelproduktion
[24] https://backdigital.de/digitalisierung-backerei/
[25] https://northcape4000.com/northcape4000/
[26] https://colab-digital.de/corona-und-das-momentum-fuer-plattform-kooperationen-im-regionalen-handel/
[27] https://www.ffe.de/veroeffentlichungen/beitragsreihe-use-case-und-geschaeftsmodellentwicklung-an-der-ffe-geschaeftsmodell-relevanz-und-abgrenzung/
[28] https://www.econbiz.de/Record/zukunftsorientierte-gesch%C3%A4ftsmodelle-klassische-b%C3%A4ckerei-%C3%B6sterreich-theoretische-konzeption-empirische-analyse-szenarien-gesch%C3%A4ftsmodelloptionen/10014544868
----------------------------------------

FILE: ./public/favicon-16x16.png
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/favicon-32x32.png
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/favicon.ico
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./public/site.webmanifest
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./src/app/ThemeRegistry.tsx
----------------------------------------
// src/app/ThemeRegistry.tsx
'use client'
import { ThemeProvider, CssBaseline, createTheme } from '@mui/material'
import { AppRouterCacheProvider } from '@mui/material-nextjs/v14-appRouter'
import { Box } from '@mui/material'

import theme from '../theme'
import CartProvider from '../context/CartContext'
import { Header } from '../components/header'
import Footer from '../components/footer/Index'

// Create theme
const muiTheme = createTheme(theme)

export default function ThemeRegistry({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <AppRouterCacheProvider options={{ key: 'mui' }}>
      <ThemeProvider theme={muiTheme}>
        <CartProvider>
          <CssBaseline />
          <Box
            sx={{
              background:
                'radial-gradient(143.25% 143.25% at 50% 100%, #FFFFFF 0%, rgba(255, 255, 255, 0) 100%), #D8E1F4',
            }}
          >
            <Header />
            <Box sx={{ minHeight: 'calc(100vh - 332px)' }}>{children}</Box>
            <Footer />
          </Box>
        </CartProvider>
      </ThemeProvider>
    </AppRouterCacheProvider>
  )
}
----------------------------------------

FILE: ./src/app/about/page.tsx
----------------------------------------
'use client'
import React from 'react'
import {
  Box,
  Container,
  Grid,
  Typography,
  Paper,
  Divider,
  Card,
  CardContent,
  Avatar,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
} from '@mui/material'

// Import Timeline components from @mui/lab instead
import {
  Timeline,
  TimelineItem,
  TimelineSeparator,
  TimelineConnector,
  TimelineContent,
  TimelineDot,
  TimelineOppositeContent,
} from '@mui/lab'
import Base from '../../layouts/Base'
import Hero from '../../components/Hero'
import CallToAction from '../../components/CallToAction'
import GrainIcon from '@mui/icons-material/Grain'
import PeopleIcon from '@mui/icons-material/People'
import NatureIcon from '@mui/icons-material/Nature'
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline'
import LocalPhoneIcon from '@mui/icons-material/LocalPhone'
import DirectionsWalkIcon from '@mui/icons-material/DirectionsWalk'

// Main sections of content
const sections = [
  {
    image: '/assets/images/bakery/1933.png',
    title: 'Familienbetrieb seit 1933',
    description:
      'Seit nun fast einem Jahrhundert backen wir Backwaren mit höchster Qualität und Leidenschaft für das wahre Handwerk. Alles begann 1933, als Bäckermeister Heinrich Heusser unsere kleine, aber feine Bäckerei in Kirrberg eröffnete. Sein Sohn, Heinrich "Heiner" Heusser, ebenfalls Bäckermeister mit Leib und Seele, übernahm früh das Familienunternehmen und führte es gemeinsam mit seiner Frau Hildegard bis 2022 zu einem festen Bestandteil des Dorflebens. Die persönliche Verbindung zu unseren Kunden und dem Dorf stand dabei immer im Mittelpunkt. Seit 2022 setzt Karl-Heinrich Heusser diese wertvolle Tradition in dritter Generation fort – mit dem gleichen Gespür für Qualität und dem Versprechen, Tag für Tag frische, handgefertigte Backwaren anzubieten, die von Herzen kommen und Herzen erobern.',
  },
  {
    image: '/assets/images/bakery/neu_theke3.jpeg',
    title: 'Für Sie vor Ort',
    description:
      'In unserem gemütlichen Laden direkt neben der Backstube erwarten wir Sie mit frischen Backwaren, die wir mit Liebe für Sie zubereiten. Ganz nach dem traditionellen "Tante Emma Laden" Prinzip finden Sie bei uns alles rund um Brot und Brötchen sowie ausgewählte regionale Spezialitäten wie Eier, Honig oder Nudeln. Wir freuen uns auf den persönlichen Kontakt mit Ihnen und möchten, dass Sie sich bei uns in einer herzlichen, familiären Atmosphäre rundum wohlfühlen. Kommen Sie vorbei - wir heißen Sie herzlich willkommen!',
  },
]

// Timeline history events
const historyTimeline = [
  {
    year: '1933',
    title: 'Gründung der Bäckerei',
    description:
      'Heinrich Heusser gründet die Bäckerei in Kirrberg und setzt von Anfang an auf traditionelle Rezepte und hochwertige Zutaten.',
  },
  {
    year: '1968',
    title: 'Übernahme durch die zweite Generation',
    description:
      'Heinrich "Heiner" Heusser übernimmt mit seiner Frau Hildegard den Familienbetrieb und baut das Sortiment kontinuierlich aus.',
  },
  {
    year: '1985',
    title: 'Ausbau der Backstube',
    description:
      'Die Backstube wird modernisiert und erweitert, um der steigenden Nachfrage gerecht zu werden, ohne dabei Kompromisse bei der Qualität einzugehen.',
  },
  {
    year: '2000',
    title: 'Renovierung des Verkaufsraums',
    description:
      'Der Verkaufsraum wird renoviert und neu gestaltet, um den Kunden ein noch angenehmeres Einkaufserlebnis zu bieten.',
  },
  {
    year: '2022',
    title: 'Übergang zur dritten Generation',
    description:
      'Karl-Heinrich Heusser übernimmt die Bäckerei in dritter Generation und führt die Familientradition mit neuen Ideen und bewährter Qualität fort.',
  },
  {
    year: 'Heute',
    title: 'Tradition bewahren, Zukunft gestalten',
    description:
      'Wir setzen weiterhin auf traditionelles Handwerk und regionale Zutaten, während wir behutsam neue Wege gehen, um unsere Backkunst zukunftsfähig zu halten.',
  },
]

// Core values
const coreValues = [
  {
    icon: <GrainIcon color="primary" fontSize="large" />,
    title: 'Qualität',
    description:
      'Wir verwenden nur die besten Zutaten und traditionelle Backverfahren für ein unvergleichliches Geschmackserlebnis.',
  },
  {
    icon: <NatureIcon color="primary" fontSize="large" />,
    title: 'Nachhaltigkeit',
    description:
      'Wir legen Wert auf regionale Herkunft und umweltbewusste Herstellungsprozesse.',
  },
  {
    icon: <PeopleIcon color="primary" fontSize="large" />,
    title: 'Gemeinschaft',
    description:
      'Unsere Bäckerei ist ein Ort der Begegnung, an dem wir Menschen zusammenbringen und lokale Traditionen pflegen.',
  },
]

// Team members data
const teamMembers = [
  {
    name: 'Karl Heinrich Heusser',
    role: 'Geschäftsführer und Diplom Ingenieur',
    image: '/assets/images/team/karl.jpg',
    description:
      'Leitet den Betrieb mit technischem Know-how und Leidenschaft für die Bäckertradition.',
  },
  {
    name: 'Florian Hein',
    role: 'Backstubenleiter',
    image: '/assets/images/team/florian.jpg',
    description:
      'Verantwortlich für unsere hochwertigen Backwaren mit handwerklichem Geschick und Kreativität.',
  },
  {
    name: 'Daniela Fricke',
    role: 'Bäckereifachverkäuferin',
    image: '/assets/images/team/daniela.jpg',
    description:
      'Sorgt mit ihrer Expertise für eine kompetente Beratung und herzlichen Service am Verkaufstresen.',
  },
]

const About: React.FC = () => (
  <Base>
    <Hero title="Über Uns" />

    {/* Main Intro Sections */}
    <Container maxWidth="md" sx={{ mb: 8 }}>
      <Grid container spacing={8}>
        {sections.map((item, index) => (
          <Grid
            key={item.title}
            item
            xs={12}
            container
            spacing={4}
            sx={{
              flexDirection: index % 2 ? 'row-reverse' : 'row',
            }}
          >
            <Grid item xs={12} sm={6} sx={styles.column}>
              <Box
                sx={{
                  ...styles.image,
                  backgroundImage: `url(${item.image})`,
                }}
              />
            </Grid>
            <Grid item xs={12} sm={6} sx={styles.column}>
              <Typography variant="h4" gutterBottom>
                {item.title}
              </Typography>
              <Typography color="text.secondary" paragraph>
                {item.description}
              </Typography>
            </Grid>
          </Grid>
        ))}
      </Grid>
    </Container>

    {/* Vision and Mission Section */}
    <Box sx={{ bgcolor: 'background.default', py: 8 }}>
      <Container maxWidth="md">
        <Grid container spacing={4}>
          {/* Vision */}
          <Grid item xs={12} md={6}>
            <Paper elevation={2} sx={styles.visionMissionCard}>
              <Box sx={styles.cardHeader}>
                <Typography
                  variant="h5"
                  fontWeight="bold"
                  gutterBottom
                  align="center"
                >
                  Unsere Vision
                </Typography>
              </Box>
              <Divider />
              <Box sx={{ p: 3 }}>
                <Typography variant="body1" paragraph>
                  Wir streben danach, die führende handwerkliche Bäckerei der
                  Region zu sein, die für ihre herausragende Qualität, Tradition
                  und Innovation bekannt ist.
                </Typography>
                <Typography variant="body1">
                  In einer Zeit der industriellen Massenproduktion wollen wir
                  zeigen, dass traditionelles Bäckerhandwerk nicht nur
                  überlebensfähig ist, sondern auch eine entscheidende Rolle für
                  eine nachhaltige und gesunde Ernährungskultur spielt.
                </Typography>
                <List>
                  <ListItem>
                    <ListItemIcon>
                      <CheckCircleOutlineIcon color="primary" />
                    </ListItemIcon>
                    <ListItemText
                      primary="Handwerk bewahren"
                      secondary="Traditionelle Backtechniken für kommende Generationen erhalten"
                    />
                  </ListItem>
                  <ListItem>
                    <ListItemIcon>
                      <CheckCircleOutlineIcon color="primary" />
                    </ListItemIcon>
                    <ListItemText
                      primary="Regionales Bewusstsein fördern"
                      secondary="Die Bedeutung kurzer Lieferketten und lokaler Produkte betonen"
                    />
                  </ListItem>
                </List>
              </Box>
            </Paper>
          </Grid>

          {/* Mission */}
          <Grid item xs={12} md={6}>
            <Paper elevation={2} sx={styles.visionMissionCard}>
              <Box sx={styles.cardHeader}>
                <Typography
                  variant="h5"
                  fontWeight="bold"
                  gutterBottom
                  align="center"
                >
                  Unsere Mission
                </Typography>
              </Box>
              <Divider />
              <Box sx={{ p: 3 }}>
                <Typography variant="body1" paragraph>
                  Wir verpflichten uns, jeden Tag hochwertige, handwerklich
                  gefertigte Backwaren herzustellen, die nicht nur den Gaumen
                  erfreuen, sondern auch eine gesunde Ernährung fördern.
                </Typography>
                <Typography variant="body1" paragraph>
                  Durch die sorgfältige Auswahl regionaler Zutaten und den
                  Einsatz traditioneller Methoden schaffen wir Produkte mit
                  authentischem Geschmack und charakteristischer Qualität.
                </Typography>
                <Typography variant="body1">
                  Unser Laden ist mehr als nur eine Bäckerei – er ist ein Ort
                  der Gemeinschaft, an dem Menschen zusammenkommen und die
                  einfachen Freuden des Lebens teilen können.
                </Typography>
              </Box>
            </Paper>
          </Grid>
        </Grid>
      </Container>
    </Box>

    {/* Core Values */}
    <Container maxWidth="md" sx={{ mt: 8, mb: 8 }}>
      <Typography variant="h4" align="center" gutterBottom>
        Unsere Werte
      </Typography>
      <Typography
        variant="body1"
        align="center"
        color="text.secondary"
        paragraph
        sx={{ mb: 5 }}
      >
        Diese Grundsätze leiten unser tägliches Handeln und definieren, wofür
        wir stehen.
      </Typography>

      <Grid container spacing={4}>
        {coreValues.map((value) => (
          <Grid item xs={12} md={4} key={value.title}>
            <Box sx={styles.valueCard}>
              <Box sx={{ display: 'flex', justifyContent: 'center', mb: 2 }}>
                {value.icon}
              </Box>
              <Typography variant="h6" align="center" gutterBottom>
                {value.title}
              </Typography>
              <Typography variant="body2" align="center" color="text.secondary">
                {value.description}
              </Typography>
            </Box>
          </Grid>
        ))}
      </Grid>
    </Container>

    {/* Our Story Timeline */}
    <Box sx={{ bgcolor: 'background.default', py: 8 }}>
      <Container maxWidth="md">
        <Typography variant="h4" align="center" gutterBottom>
          Unsere Geschichte
        </Typography>
        <Typography
          variant="body1"
          align="center"
          color="text.secondary"
          paragraph
          sx={{ mb: 5 }}
        >
          Fast 90 Jahre Bäckerhandwerk und Familientradition in Kirrberg.
        </Typography>

        <Timeline position="alternate" sx={styles.timeline}>
          {historyTimeline.map((event, index) => (
            <TimelineItem key={event.year}>
              <TimelineOppositeContent sx={styles.timelineYear}>
                <Typography variant="h6" color="primary.main" fontWeight="bold">
                  {event.year}
                </Typography>
              </TimelineOppositeContent>
              <TimelineSeparator>
                <TimelineDot
                  color="primary"
                  variant={
                    index === historyTimeline.length - 1 ? 'filled' : 'outlined'
                  }
                />
                {index < historyTimeline.length - 1 && <TimelineConnector />}
              </TimelineSeparator>
              <TimelineContent sx={styles.timelineContent}>
                <Paper elevation={2} sx={styles.timelineCard}>
                  <Typography variant="h6" component="h3">
                    {event.title}
                  </Typography>
                  <Typography color="text.secondary">
                    {event.description}
                  </Typography>
                </Paper>
              </TimelineContent>
            </TimelineItem>
          ))}
        </Timeline>
      </Container>
    </Box>

    {/* Team Section */}
    <Container maxWidth="md" sx={{ mt: 8, mb: 8 }}>
      <Typography variant="h4" align="center" gutterBottom>
        Unser Team
      </Typography>
      <Typography
        variant="body1"
        align="center"
        color="text.secondary"
        paragraph
        sx={{ mb: 5 }}
      >
        Die Menschen hinter unseren köstlichen Backwaren.
      </Typography>

      <Grid container spacing={4}>
        {teamMembers.map((member) => (
          <Grid item xs={12} sm={6} md={4} key={member.name}>
            <Card sx={styles.teamCard}>
              <Avatar
                src={member.image}
                alt={member.name}
                sx={styles.teamAvatar}
              >
                {!member.image && member.name.charAt(0)}
              </Avatar>
              <CardContent>
                <Typography variant="h6" align="center" gutterBottom>
                  {member.name}
                </Typography>
                <Typography
                  variant="subtitle2"
                  align="center"
                  color="primary.main"
                  gutterBottom
                >
                  {member.role}
                </Typography>
                <Typography
                  variant="body2"
                  align="center"
                  color="text.secondary"
                >
                  {member.description}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>
    </Container>

    {/* CTA Section */}
    <CallToAction
      title="Besuchen Sie uns"
      subtitle="Unser Laden ist immer offen für Sie."
      description="Erleben Sie selbst die Qualität und Leidenschaft, die in jedem unserer Backwaren steckt."
      primaryAction={{
        label: 'Kontakt aufnehmen',
        icon: <LocalPhoneIcon />,
        href: '/kontakt',
      }}
      secondaryAction={{
        label: 'Unser Angebot entdecken',
        icon: <DirectionsWalkIcon />,
        href: '/produkte',
      }}
    />
  </Base>
)

// Styles for the component
const styles = {
  column: {
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
  },
  image: {
    width: '100%',
    height: 300,
    backgroundSize: 'cover',
    backgroundPosition: 'center',
    borderRadius: 2,
  },
  visionMissionCard: {
    height: '100%',
    display: 'flex',
    flexDirection: 'column',
    borderRadius: 2,
    overflow: 'hidden',
  },
  cardHeader: {
    padding: 3,
    backgroundColor: 'background.paper',
  },
  valueCard: {
    p: 3,
    textAlign: 'center',
    height: '100%',
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
  },
  timeline: {
    '& .MuiTimelineItem-root:before': {
      flex: 0,
      padding: 0,
    },
  },
  timelineYear: {
    m: 'auto 0',
    p: 2,
  },
  timelineContent: {
    py: 2,
  },
  timelineCard: {
    p: 2,
    borderRadius: 2,
  },
  teamCard: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    height: '100%',
    pt: 4,
    borderRadius: 2,
  },
  teamAvatar: {
    width: 100,
    height: 100,
    mb: 2,
  },
}

export default About
----------------------------------------

FILE: ./src/app/bakery/processes/page.tsx
----------------------------------------
'use client'
import React, { useState, useEffect } from 'react'
import { Box, Container, Typography, Grid, Button, Fab } from '@mui/material'
import { Add as AddIcon } from '@mui/icons-material'
import { getWorkflows } from '../../../services/workflowService'
import WorkflowSidebar from '../../../components/bakery/WorkflowSidebar'
import WorkflowDetail from '../../../components/bakery/WorkflowDetail'
import WorkflowCreationForm from '../../../components/bakery/WorkflowCreationForm'
import { Workflow } from '../../../types/workflow'

export default function BakeryProcessesPage() {
  const [workflows, setWorkflows] = useState<Workflow[]>([])
  const [selectedWorkflow, setSelectedWorkflow] = useState<Workflow | null>(
    null
  )
  const [viewMode, setViewMode] = useState<'table' | 'timeline'>('table')
  const [activeTab, setActiveTab] = useState(0)
  const [creationDialogOpen, setCreationDialogOpen] = useState(false)
  const [loading, setLoading] = useState(true)

  // Fetch workflow data
  useEffect(() => {
    const fetchWorkflows = async () => {
      try {
        setLoading(true)
        const result = await getWorkflows()
        setWorkflows(result)
        if (result.length > 0) {
          setSelectedWorkflow(result[0])
        }
      } catch (error) {
        console.error('Failed to fetch workflows:', error)
      } finally {
        setLoading(false)
      }
    }

    fetchWorkflows()
  }, [])

  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {
    setActiveTab(newValue)
  }

  const handleWorkflowSelect = (workflow: Workflow) => {
    setSelectedWorkflow(workflow)
  }

  const handleViewModeChange = (mode: 'table' | 'timeline') => {
    setViewMode(mode)
  }

  const handleCreateWorkflow = (workflowData: any) => {
    // In a real app, you would send this to your API
    // For this demo, we'll add it directly to state
    const newWorkflow = {
      ...workflowData,
      id: `wf-${Date.now()}`, // generate a unique ID
    }

    setWorkflows([...workflows, newWorkflow])
    setSelectedWorkflow(newWorkflow)
    setActiveTab(newWorkflow.status === 'planned' ? 1 : 0)
    setCreationDialogOpen(false)
  }

  return (
    <Container maxWidth="xl" sx={{ py: 4, pt: 20 }}>
      <Box
        sx={{
          mb: 4,
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
        }}
      >
        <Box>
          <Typography variant="h4" component="h1" gutterBottom>
            Bäckerei-Prozessmanagement
          </Typography>
          <Typography variant="body1" color="text.secondary">
            Verfolgen und verwalten Sie Ihre Produktionsprozesse in Echtzeit
          </Typography>
        </Box>
        <Button
          variant="contained"
          startIcon={<AddIcon />}
          onClick={() => setCreationDialogOpen(true)}
        >
          Neuer Prozess
        </Button>
      </Box>

      <Grid container spacing={3}>
        {/* Sidebar with workflow list */}
        <Grid item xs={12} md={4} lg={3}>
          <WorkflowSidebar
            workflows={workflows}
            selectedWorkflow={selectedWorkflow}
            activeTab={activeTab}
            onTabChange={handleTabChange}
            onSelectWorkflow={handleWorkflowSelect}
          />
        </Grid>

        {/* Main content area */}
        <Grid item xs={12} md={8} lg={9}>
          {loading ? (
            <Box sx={{ textAlign: 'center', py: 8 }}>
              <Typography>Lade Prozesse...</Typography>
            </Box>
          ) : selectedWorkflow ? (
            <WorkflowDetail
              workflow={selectedWorkflow}
              viewMode={viewMode}
              onViewModeChange={handleViewModeChange}
              onUpdateWorkflow={(updatedWorkflow) => {
                setWorkflows(
                  workflows.map((wf) =>
                    wf.id === updatedWorkflow.id ? updatedWorkflow : wf
                  )
                )
                setSelectedWorkflow(updatedWorkflow)
              }}
            />
          ) : (
            <Box
              sx={{
                textAlign: 'center',
                py: 8,
                bgcolor: 'background.paper',
                borderRadius: 1,
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                justifyContent: 'center',
                gap: 2,
              }}
            >
              <Typography variant="h6">Keine Prozesse ausgewählt</Typography>
              <Button
                variant="outlined"
                startIcon={<AddIcon />}
                onClick={() => setCreationDialogOpen(true)}
              >
                Neuen Prozess erstellen
              </Button>
            </Box>
          )}
        </Grid>
      </Grid>

      {/* Workflow Creation Dialog */}
      <WorkflowCreationForm
        open={creationDialogOpen}
        onClose={() => setCreationDialogOpen(false)}
        onSubmit={handleCreateWorkflow}
      />

      {/* Fixed action button for mobile */}
      <Box sx={{ display: { sm: 'none' } }}>
        <Fab
          color="primary"
          aria-label="add"
          sx={{ position: 'fixed', bottom: 16, right: 16 }}
          onClick={() => setCreationDialogOpen(true)}
        >
          <AddIcon />
        </Fab>
      </Box>
    </Container>
  )
}
----------------------------------------

FILE: ./src/app/bestellen/page.tsx
----------------------------------------
'use client'
import React from 'react'
import { Box, Container, Typography, Paper, Grid } from '@mui/material'
import PhoneIcon from '@mui/icons-material/Phone'
import WhatsAppIcon from '@mui/icons-material/WhatsApp'

import Base from '../../layouts/Base'
import Hero from '../../components/Hero'
import Button from '../../components/button/Index'
// import Form from '../../components/orders/Form'  // Commented out as requested

const BestellenPage: React.FC = () => (
  <Base>
    <Hero title="Bestellen" />
    <Container maxWidth="md">
      <Box sx={styles.mainContent}>
        {/* Introductory Text */}
        <Paper elevation={1} sx={styles.introSection}>
          <Typography variant="h5" component="h2" gutterBottom>
            So können Sie bei uns bestellen
          </Typography>

          <Typography paragraph>
            Unsere frischen Backwaren können Sie ganz einfach vorbestellen.
            Wählen Sie eine der folgenden Möglichkeiten, um Ihre Bestellung
            aufzugeben und genießen Sie den Vorteil, dass Ihre Backwaren für Sie
            reserviert werden.
          </Typography>

          <Typography paragraph>
            Für größere Bestellungen oder besondere Anlässe empfehlen wir,
            mindestens 48 Stunden im Voraus zu bestellen.
          </Typography>
        </Paper>

        {/* Contact Options */}
        <Grid container sx={styles.contactOptions}>
          {/* Phone Option */}
          <Grid item xs={12} md={6}>
            <Paper elevation={2} sx={styles.optionCard}>
              <Box sx={styles.optionIcon}>
                <PhoneIcon fontSize="large" color="primary" />
              </Box>
              <Typography variant="h6" gutterBottom>
                Telefonisch bestellen
              </Typography>
              <Typography paragraph>
                Rufen Sie uns direkt während unserer Öffnungszeiten an und geben
                Sie Ihre Bestellung auf. So können wir direkt Rückfragen klären
                und Ihnen einen Abholtermin bestätigen.
              </Typography>
              <Typography variant="body2" color="text.secondary" paragraph>
                Unsere Telefonnummer:
              </Typography>
              <Typography variant="h6" gutterBottom fontWeight="bold">
                06841 2229
              </Typography>
              <Button startIcon={<PhoneIcon />} href="tel:068412229" fullWidth>
                Jetzt anrufen
              </Button>
            </Paper>
          </Grid>

          {/* WhatsApp Option */}
          <Grid item xs={12} md={6}>
            <Paper elevation={2} sx={styles.optionCard}>
              <Box sx={styles.optionIcon}>
                <WhatsAppIcon fontSize="large" style={{ color: '#25D366' }} />
              </Box>
              <Typography variant="h6" gutterBottom>
                Per WhatsApp bestellen
              </Typography>
              <Typography paragraph>
                Senden Sie uns eine WhatsApp-Nachricht mit Ihrer Bestellung.
                Bitte geben Sie folgende Informationen an:
                <ul style={{ paddingLeft: '1.5rem', marginTop: '0.5rem' }}>
                  <li>Vollständige Bestellung mit Mengen</li>
                  <li>Gewünschter Abholtermin</li>
                  <li>Ihr Name</li>
                </ul>
              </Typography>
              <Typography variant="body2" color="text.secondary" paragraph>
                Unsere WhatsApp-Nummer:
              </Typography>
              <Typography variant="h6" gutterBottom fontWeight="bold">
                01522 6621236
              </Typography>
              <Button
                startIcon={<WhatsAppIcon />}
                href="https://wa.me/4915226621236"
                target="_blank"
                rel="noopener noreferrer"
                fullWidth
                sx={{
                  backgroundColor: '#25D366',
                  '&:hover': {
                    backgroundColor: '#128C7E',
                  },
                }}
              >
                WhatsApp öffnen
              </Button>
            </Paper>
          </Grid>
        </Grid>

        {/* Additional Information */}
        <Paper elevation={1} sx={styles.noteSection}>
          <Typography variant="h6" gutterBottom>
            Wichtige Hinweise
          </Typography>
          <Typography paragraph>
            • Bestellungen für den nächsten Tag bitten wir bis spätestens 18:00
            Uhr am Vortag aufzugeben.
          </Typography>
          <Typography paragraph>
            • Spezielle Kuchen, Torten oder große Mengen benötigen mehr
            Vorlaufzeit (mindestens 2-3 Tage).
          </Typography>
          <Typography paragraph>
            • Sie erhalten immer eine Bestätigung von uns, wenn Ihre Bestellung
            bei uns eingegangen ist.
          </Typography>
          <Typography>
            Bei Fragen zu Ihren Bestellungen stehen wir Ihnen gerne zur
            Verfügung!
          </Typography>
        </Paper>

        {/* Online Form - commented out as requested */}
        {/*
        <Box sx={styles.onlineFormSection}>
          <Typography variant="h5" component="h2" gutterBottom textAlign="center">
            Online bestellen
          </Typography>
          <Paper elevation={3} sx={styles.formContainer}>
            <Form />
          </Paper>
        </Box>
        */}
      </Box>
    </Container>
  </Base>
)

const styles = {
  mainContent: {
    py: 4,
    display: 'flex',
    flexDirection: 'column',
    gap: 4,
    mb: 6,
  },
  introSection: {
    p: 3,
    bgcolor: 'background.paper',
  },
  contactOptions: {
    mt: 2,
  },
  optionCard: {
    p: 3,
    height: '100%',
    display: 'flex',
    flexDirection: 'column',
  },
  optionIcon: {
    display: 'flex',
    justifyContent: 'center',
    mb: 2,
    fontSize: 48,
  },
  noteSection: {
    p: 3,
    bgcolor: 'background.paper',
    borderLeft: '4px solid',
    borderColor: 'primary.main',
  },
  onlineFormSection: {
    mt: 4,
  },
  formContainer: {
    p: 3,
  },
}

export default BestellenPage
----------------------------------------

FILE: ./src/app/dashboard/_page.tsx
----------------------------------------
'use client'
import React, { useState, useEffect } from 'react'
import {
  Container,
  Typography,
  Box,
  Grid,
  Card,
  CardContent,
  CircularProgress,
} from '@mui/material'
import { useRouter } from 'next/navigation'

import Hero from '../../components/Hero'
import Base from '../../layouts/Base'
import Button from '../../components/button/Index'
import Input from '../../components/Input'

// Chat message interface
interface Message {
  id: number
  user_id: number
  message: string
  timestamp: string
}

const Dashboard: React.FC = () => {
  const router = useRouter()
  const [loading, setLoading] = useState<boolean>(true)
  const [cashAmount, setCashAmount] = useState<string>('')
  const [chatMessage, setChatMessage] = useState<string>('')
  const [messages, setMessages] = useState<Message[]>([])
  const [username, setUsername] = useState<string>('')
  const [error, setError] = useState<string>('')

  // Check authentication on component mount
  useEffect(() => {
    const token = localStorage.getItem('token')
    if (!token) {
      router.push('/login')
      return
    }

    // Fetch initial data
    fetchChatMessages()

    // Extract username from token (if you want to display it)
    try {
      // This is a simple example - in a real app, you might want to decode the JWT
      // or make an API call to get user info
      setUsername('Logged In User')
    } catch (e) {
      console.error('Error getting username', e)
    }

    setLoading(false)
  }, [router])

  // Fetch chat messages from the API
  const fetchChatMessages = async () => {
    try {
      const token = localStorage.getItem('token')
      const response = await fetch('http://localhost:5000/chat', {
        headers: {
          Authorization: token || '',
        },
      })

      if (!response.ok) {
        if (response.status === 403) {
          // Token expired or invalid
          logout()
          return
        }
        throw new Error('Failed to fetch messages')
      }

      const data = await response.json()
      setMessages(data)
    } catch (error: any) {
      setError('Failed to load messages: ' + error.message)
    }
  }

  // Submit cash entry
  const submitCashEntry = async () => {
    if (!cashAmount || isNaN(Number(cashAmount))) {
      setError('Please enter a valid amount')
      return
    }

    try {
      const token = localStorage.getItem('token')
      const response = await fetch('http://localhost:5000/cash', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: token || '',
        },
        body: JSON.stringify({ amount: Number(cashAmount) }),
      })

      if (!response.ok) {
        if (response.status === 403) {
          // Token expired or invalid
          logout()
          return
        }
        throw new Error('Failed to save cash entry')
      }

      setCashAmount('')
      alert('Cash entry saved successfully!')
    } catch (error: any) {
      setError('Failed to save cash entry: ' + error.message)
    }
  }

  // Submit chat message
  const submitChatMessage = async () => {
    if (!chatMessage.trim()) {
      return
    }

    try {
      const token = localStorage.getItem('token')
      const response = await fetch('http://localhost:5000/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: token || '',
        },
        body: JSON.stringify({ message: chatMessage }),
      })

      if (!response.ok) {
        if (response.status === 403) {
          // Token expired or invalid
          logout()
          return
        }
        throw new Error('Failed to send message')
      }

      setChatMessage('')
      // Refresh messages
      fetchChatMessages()
    } catch (error: any) {
      setError('Failed to send message: ' + error.message)
    }
  }

  // Logout function
  const logout = () => {
    localStorage.removeItem('token')
    router.push('/login')
  }

  if (loading) {
    return (
      <Base>
        <Container
          sx={{
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            height: '60vh',
          }}
        >
          <CircularProgress />
        </Container>
      </Base>
    )
  }

  return (
    <Base>
      <Hero title={`Dashboard - Welcome ${username}`} />
      <Container>
        {error && (
          <Box
            sx={{
              bgcolor: 'error.main',
              color: 'white',
              p: 2,
              mb: 2,
              borderRadius: 1,
            }}
          >
            {error}
            <Button
              onClick={() => setError('')}
              style={{
                marginLeft: '10px',
                background: 'white',
                color: 'red',
                padding: '0 10px',
              }}
            >
              Clear
            </Button>
          </Box>
        )}

        <Grid container spacing={3}>
          {/* Cash Entry Section */}
          <Grid item xs={12} md={6}>
            <Card>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  Daily Cash Entry
                </Typography>
                <Input
                  name="cashAmount"
                  placeholder="Enter amount"
                  label="Cash Amount"
                  type="number"
                  value={cashAmount}
                  onChange={(e) => setCashAmount(e.target.value)}
                />
                <Button onClick={submitCashEntry}>Save Cash Entry</Button>
              </CardContent>
            </Card>
          </Grid>

          {/* Chat Section */}
          <Grid item xs={12} md={6}>
            <Card>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  Team Chat
                </Typography>
                <Box
                  sx={{
                    height: '200px',
                    overflowY: 'auto',
                    border: '1px solid #eee',
                    p: 2,
                    mb: 2,
                    borderRadius: 1,
                    bgcolor: '#f9f9f9',
                  }}
                >
                  {messages.length === 0 ? (
                    <Typography color="textSecondary" align="center">
                      No messages yet
                    </Typography>
                  ) : (
                    messages.map((msg) => (
                      <Box
                        key={msg.id}
                        sx={{ mb: 1, p: 1, bgcolor: 'white', borderRadius: 1 }}
                      >
                        <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
                          User #{msg.user_id}
                        </Typography>
                        <Typography variant="body1">{msg.message}</Typography>
                        <Typography variant="caption" color="textSecondary">
                          {new Date(msg.timestamp).toLocaleString()}
                        </Typography>
                      </Box>
                    ))
                  )}
                </Box>
                <Input
                  name="chatMessage"
                  placeholder="Type a message"
                  value={chatMessage}
                  onChange={(e) => setChatMessage(e.target.value)}
                />
                <Button onClick={submitChatMessage}>Send Message</Button>
              </CardContent>
            </Card>
          </Grid>

          {/* Logout Button */}
          <Grid
            item
            xs={12}
            sx={{ display: 'flex', justifyContent: 'center', mt: 2 }}
          >
            <Button onClick={logout} style={{ backgroundColor: '#f44336' }}>
              Logout
            </Button>
          </Grid>
        </Grid>
      </Container>
    </Base>
  )
}

export default Dashboard
----------------------------------------

FILE: ./src/app/dashboard/management/page.tsx
----------------------------------------
'use client'
import React, { useState, useEffect } from 'react'
import {
  Container,
  Typography,
  Box,
  Grid,
  CircularProgress,
  Paper,
} from '@mui/material'
import { useRouter } from 'next/navigation'
import AttachMoneyIcon from '@mui/icons-material/AttachMoney'
import TrendingUpIcon from '@mui/icons-material/TrendingUp'
import ShoppingCartIcon from '@mui/icons-material/ShoppingCart'
import InventoryIcon from '@mui/icons-material/Inventory'
import PeopleIcon from '@mui/icons-material/People'

import Base from '../../../layouts/Base'
import Hero from '../../../components/Hero'
import Button from '../../../components/button/Index'
import DateRangeSelector, {
  TimeRange,
} from '../../../components/dashboard/DateRangeSelector'
import MetricCard from '../../../components/dashboard/MetricCard'
import ChartComponent from '../../../components/dashboard/ChartComponent'
import DataTable from '../../../components/dashboard/DataTable'
import StatsComparison from '../../../components/dashboard/StatsComparison'

import bakeryAPI from '../../../services/bakeryAPI'
import { FinancialData, Product, TimeSeriesData } from '../../../services/types'

const ManagementDashboard: React.FC = () => {
  const router = useRouter()
  const [timeRange, setTimeRange] = useState<TimeRange>('day')
  const [loading, setLoading] = useState<boolean>(true)
  const [summary, setSummary] = useState<any>(null)
  const [salesTrend, setSalesTrend] = useState<TimeSeriesData[]>([])
  const [profitTrend, setProfitTrend] = useState<TimeSeriesData[]>([])
  const [productData, setProductData] = useState<Product[]>([])
  const [financialData, setFinancialData] = useState<FinancialData[]>([])
  const [previousSummary, setPreviousSummary] = useState<any>(null)

  // Fetch data based on selected time range
  useEffect(() => {
    const fetchData = async () => {
      setLoading(true)
      try {
        // Get current period data
        const summaryData = await bakeryAPI.getSummaryData(timeRange)
        setSummary(summaryData)

        // Get previous period data for comparison
        let previousTimeRange: TimeRange
        switch (timeRange) {
          case 'day':
            previousTimeRange = 'day' // Previous day
            break
          case 'week':
            previousTimeRange = 'week' // Previous week
            break
          case 'month':
            previousTimeRange = 'month' // Previous month
            break
          case 'year':
            previousTimeRange = 'year' // Previous year
            break
        }
        const previousSummaryData = await bakeryAPI.getSummaryData(
          previousTimeRange
        )
        setPreviousSummary(previousSummaryData)

        // Get sales trend data
        const salesData = await bakeryAPI.getTimeSeriesData('sales', timeRange)
        setSalesTrend(salesData)

        // Get profit trend data (simulate with some calculation from sales)
        const profitData = salesData.map((item) => ({
          ...item,
          value: item.value * (0.25 + Math.random() * 0.15), // Profit is roughly 25-40% of sales
        }))
        setProfitTrend(profitData)

        // Get product data
        const products = await bakeryAPI.getProducts()
        setProductData(products)

        // Get financial data
        const finances = await bakeryAPI.getFinancialData(timeRange)
        setFinancialData(finances)
      } catch (error) {
        console.error('Error fetching dashboard data:', error)
      } finally {
        setLoading(false)
      }
    }

    fetchData()
  }, [timeRange])

  // Calculate percentage changes
  const calculatePercentageChange = (current: number, previous: number) => {
    if (previous === 0) return current > 0 ? 100 : 0
    return ((current - previous) / previous) * 100
  }

  // Handle time range change
  const handleTimeRangeChange = (range: TimeRange) => {
    setTimeRange(range)
  }

  // Format financial data for table display
  const formatFinancialData = (data: FinancialData[]) => {
    return data.map((item) => ({
      id: item.id,
      date: new Date(item.date).toLocaleDateString(),
      category: item.category,
      amount: `${item.amount < 0 ? '-' : ''}$${Math.abs(item.amount).toFixed(
        2
      )}`,
      description: item.description,
    }))
  }

  // Get product performance data
  const getProductPerformanceData = () => {
    const products = productData.slice(0, 5) // Top 5 products
    return products.map((product) => ({
      name: product.name,
      profit: (product.price - product.cost) * product.stock,
      margin: ((product.price - product.cost) / product.price) * 100,
    }))
  }

  // Navigate back to dashboard selector
  const navigateBack = () => {
    router.push('/dashboard')
  }

  if (loading || !summary) {
    return (
      <Base>
        <Container
          sx={{
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            height: '60vh',
          }}
        >
          <CircularProgress />
        </Container>
      </Base>
    )
  }

  return (
    <Base>
      <Hero title="Management Dashboard" />
      <Container maxWidth="xl">
        <Box
          sx={{
            mb: 3,
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
            flexWrap: 'wrap',
          }}
        >
          <Button onClick={navigateBack} style={{ marginBottom: '10px' }}>
            ← Back to Dashboard Selection
          </Button>
          <DateRangeSelector
            timeRange={timeRange}
            onTimeRangeChange={handleTimeRangeChange}
          />
        </Box>

        {/* KPI Summary Cards */}
        <Grid container spacing={3} sx={{ mb: 4 }}>
          <Grid item xs={12} sm={6} md={2.4}>
            <MetricCard
              title="Total Revenue"
              value={`$${summary.revenue.toFixed(2)}`}
              icon={<AttachMoneyIcon />}
              percentageChange={calculatePercentageChange(
                summary.revenue,
                previousSummary?.revenue || 0
              )}
              color="#4caf50"
              tooltip="Total revenue from all sales in the selected period"
            />
          </Grid>
          <Grid item xs={12} sm={6} md={2.4}>
            <MetricCard
              title="Net Profit"
              value={`$${summary.profit.toFixed(2)}`}
              icon={<TrendingUpIcon />}
              percentageChange={calculatePercentageChange(
                summary.profit,
                previousSummary?.profit || 0
              )}
              color="#2196f3"
              tooltip="Net profit after all expenses in the selected period"
            />
          </Grid>
          <Grid item xs={12} sm={6} md={2.4}>
            <MetricCard
              title="Transactions"
              value={summary.transactions}
              icon={<ShoppingCartIcon />}
              percentageChange={calculatePercentageChange(
                summary.transactions,
                previousSummary?.transactions || 0
              )}
              color="#ff9800"
              tooltip="Number of sales transactions in the selected period"
            />
          </Grid>
          <Grid item xs={12} sm={6} md={2.4}>
            <MetricCard
              title="Profit Margin"
              value={`${summary.profitMargin.toFixed(1)}%`}
              icon={<TrendingUpIcon />}
              percentageChange={calculatePercentageChange(
                summary.profitMargin,
                previousSummary?.profitMargin || 0
              )}
              color="#9c27b0"
              tooltip="Profit as a percentage of revenue"
            />
          </Grid>
          <Grid item xs={12} sm={6} md={2.4}>
            <MetricCard
              title="Avg Order Value"
              value={`$${summary.averageOrderValue.toFixed(2)}`}
              icon={<AttachMoneyIcon />}
              percentageChange={calculatePercentageChange(
                summary.averageOrderValue,
                previousSummary?.averageOrderValue || 0
              )}
              color="#f44336"
              tooltip="Average value per transaction"
            />
          </Grid>
        </Grid>

        {/* Charts Row */}
        <Grid container spacing={3} sx={{ mb: 4 }}>
          <Grid item xs={12} md={8}>
            <ChartComponent
              title="Revenue Trends"
              subtitle={`Revenue performance for the selected ${timeRange}`}
              type="area"
              data={salesTrend}
              dataKeys={{ x: 'date', y: ['value'], colors: ['#4caf50'] }}
              height={300}
            />
          </Grid>
          <Grid item xs={12} md={4}>
            <StatsComparison
              title="Financial Performance"
              subtitle="Comparison with previous period"
              previousPeriodLabel={`previous ${timeRange}`}
              items={[
                {
                  label: 'Revenue',
                  current: summary.revenue,
                  previous: previousSummary?.revenue || 0,
                  unit: '$',
                  color: '#4caf50',
                  isHigherBetter: true,
                },
                {
                  label: 'Expenses',
                  current: summary.expenses,
                  previous: previousSummary?.expenses || 0,
                  unit: '$',
                  color: '#f44336',
                  isHigherBetter: false,
                },
                {
                  label: 'Net Profit',
                  current: summary.profit,
                  previous: previousSummary?.profit || 0,
                  unit: '$',
                  color: '#2196f3',
                  isHigherBetter: true,
                },
                {
                  label: 'Profit Margin',
                  current: summary.profitMargin,
                  previous: previousSummary?.profitMargin || 0,
                  unit: '%',
                  color: '#9c27b0',
                  isHigherBetter: true,
                },
              ]}
            />
          </Grid>
        </Grid>

        {/* Product Performance and Financial Data */}
        <Grid container spacing={3}>
          <Grid item xs={12} md={5}>
            <ChartComponent
              title="Product Performance"
              subtitle="Top products by profit margin"
              type="bar"
              data={getProductPerformanceData()}
              dataKeys={{ x: 'name', y: 'margin', colors: ['#3f51b5'] }}
              height={350}
            />
          </Grid>
          <Grid item xs={12} md={7}>
            <DataTable
              title="Financial Transactions"
              subtitle="Recent financial activity"
              columns={[
                { id: 'date', label: 'Date', minWidth: 100 },
                { id: 'category', label: 'Category', minWidth: 150 },
                {
                  id: 'amount',
                  label: 'Amount',
                  minWidth: 120,
                  align: 'right',
                  format: (value) => {
                    // Color code negative values as red, positive as green
                    const isNegative = value.startsWith('-')
                    return (
                      <Typography
                        component="span"
                        sx={{
                          color: isNegative ? '#f44336' : '#4caf50',
                          fontWeight: 'medium',
                        }}
                      >
                        {value}
                      </Typography>
                    )
                  },
                },
                { id: 'description', label: 'Description', minWidth: 200 },
              ]}
              data={formatFinancialData(financialData)}
              searchEnabled={true}
              emptyMessage="No financial data available for the selected period"
            />
          </Grid>
        </Grid>
      </Container>
    </Base>
  )
}

export default ManagementDashboard
----------------------------------------

FILE: ./src/app/dashboard/page.tsx
----------------------------------------
'use client'
import React, { useState, useEffect } from 'react'
import {
  Container,
  Typography,
  Box,
  Grid,
  Card,
  CardContent,
  CircularProgress,
  Paper,
} from '@mui/material'
import { useRouter } from 'next/navigation'
import Base from '../../layouts/Base'
import Hero from '../../components/Hero'
import Button from '../../components/button/Index'

const Dashboard: React.FC = () => {
  const router = useRouter()
  const [loading, setLoading] = useState<boolean>(true)
  const [userRole, setUserRole] = useState<string>('')
  const [username, setUsername] = useState<string>('')

  useEffect(() => {
    const token = localStorage.getItem('token')
    if (!token) {
      router.push('/login')
      return
    }

    // In a real application, you would decode the token or make an API call
    // to determine the user's role and name
    const fetchUserData = async () => {
      try {
        // This would be an API call in a real application
        // For now we'll simulate different roles
        const roles = ['manager', 'production', 'sales']
        const randomRole = roles[Math.floor(Math.random() * roles.length)]
        setUserRole(randomRole)
        setUsername('Bakery User')
        setLoading(false)
      } catch (error) {
        console.error('Error fetching user data', error)
        setLoading(false)
      }
    }

    fetchUserData()
  }, [router])

  const navigateToDashboard = (dashboardType: string) => {
    router.push(`/dashboard/${dashboardType}`)
  }

  const logout = () => {
    localStorage.removeItem('token')
    router.push('/login')
  }

  if (loading) {
    return (
      <Base>
        <Container
          sx={{
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            height: '60vh',
          }}
        >
          <CircularProgress />
        </Container>
      </Base>
    )
  }

  return (
    <Base>
      <Hero title={`Bakery Dashboard - Welcome ${username}`} />
      <Container>
        <Typography variant="h4" gutterBottom sx={{ mb: 4 }}>
          Select Your Dashboard
        </Typography>

        <Grid container spacing={4}>
          <Grid item xs={12} md={4}>
            <Paper
              elevation={3}
              sx={{
                p: 3,
                height: '100%',
                display: 'flex',
                flexDirection: 'column',
                transition: 'transform 0.3s, box-shadow 0.3s',
                '&:hover': {
                  transform: 'translateY(-5px)',
                  boxShadow: 6,
                },
              }}
            >
              <Typography variant="h5" component="h2" gutterBottom>
                Management Dashboard
              </Typography>
              <Typography
                variant="body1"
                color="text.secondary"
                sx={{ mb: 3, flexGrow: 1 }}
              >
                Overview of business performance, financials, and strategic
                metrics for bakery management.
              </Typography>
              <Button onClick={() => navigateToDashboard('management')}>
                Access Management View
              </Button>
            </Paper>
          </Grid>

          <Grid item xs={12} md={4}>
            <Paper
              elevation={3}
              sx={{
                p: 3,
                height: '100%',
                display: 'flex',
                flexDirection: 'column',
                transition: 'transform 0.3s, box-shadow 0.3s',
                '&:hover': {
                  transform: 'translateY(-5px)',
                  boxShadow: 6,
                },
              }}
            >
              <Typography variant="h5" component="h2" gutterBottom>
                Production Dashboard
              </Typography>
              <Typography
                variant="body1"
                color="text.secondary"
                sx={{ mb: 3, flexGrow: 1 }}
              >
                Production schedules, inventory tracking, and kitchen efficiency
                metrics for baking operations.
              </Typography>
              <Button onClick={() => navigateToDashboard('production')}>
                Access Production View
              </Button>
            </Paper>
          </Grid>

          <Grid item xs={12} md={4}>
            <Paper
              elevation={3}
              sx={{
                p: 3,
                height: '100%',
                display: 'flex',
                flexDirection: 'column',
                transition: 'transform 0.3s, box-shadow 0.3s',
                '&:hover': {
                  transform: 'translateY(-5px)',
                  boxShadow: 6,
                },
              }}
            >
              <Typography variant="h5" component="h2" gutterBottom>
                Sales Dashboard
              </Typography>
              <Typography
                variant="body1"
                color="text.secondary"
                sx={{ mb: 3, flexGrow: 1 }}
              >
                Sales performance, customer data, promotions, and retail
                inventory for front-of-house staff.
              </Typography>
              <Button onClick={() => navigateToDashboard('sales')}>
                Access Sales View
              </Button>
            </Paper>
          </Grid>
        </Grid>

        <Box sx={{ mt: 4, textAlign: 'center' }}>
          <Button onClick={logout} style={{ backgroundColor: '#f44336' }}>
            Logout
          </Button>
        </Box>
      </Container>
    </Base>
  )
}

export default Dashboard
----------------------------------------

FILE: ./src/app/dashboard/production/page.tsx
----------------------------------------
'use client'
import React, { useState, useEffect } from 'react'
import {
  Container,
  Typography,
  Box,
  Grid,
  CircularProgress,
  Chip,
  Alert,
} from '@mui/material'
import { useRouter } from 'next/navigation'
import InventoryIcon from '@mui/icons-material/Inventory'
import LocalShippingIcon from '@mui/icons-material/LocalShipping'
import DeleteIcon from '@mui/icons-material/Delete'
import SpeedIcon from '@mui/icons-material/Speed'
import PersonIcon from '@mui/icons-material/Person'

import Base from '../../../layouts/Base'
import Hero from '../../../components/Hero'
import Button from '../../../components/button/Index'
import DateRangeSelector, {
  TimeRange,
} from '../../../components/dashboard/DateRangeSelector'
import MetricCard from '../../../components/dashboard/MetricCard'
import ChartComponent from '../../../components/dashboard/ChartComponent'
import DataTable from '../../../components/dashboard/DataTable'
import ProductivityChart from '../../../components/dashboard/ProductivityChart'

import bakeryAPI from '../../../services/bakeryAPI'
import {
  ProductionData,
  InventoryItem,
  StaffData,
} from '../../../services/types'

const ProductionDashboard: React.FC = () => {
  const router = useRouter()
  const [timeRange, setTimeRange] = useState<TimeRange>('day')
  const [loading, setLoading] = useState<boolean>(true)
  const [productionData, setProductionData] = useState<ProductionData[]>([])
  const [inventoryData, setInventoryData] = useState<InventoryItem[]>([])
  const [staffData, setStaffData] = useState<StaffData[]>([])
  const [productionTrend, setProductionTrend] = useState<any[]>([])
  const [wasteTrend, setWasteTrend] = useState<any[]>([])
  const [summary, setSummary] = useState<any>(null)

  // Fetch data based on selected time range
  useEffect(() => {
    const fetchData = async () => {
      setLoading(true)
      try {
        // Get production data
        const production = await bakeryAPI.getProductionData(timeRange)
        setProductionData(production)

        // Get inventory data
        const inventory = await bakeryAPI.getInventoryData()
        setInventoryData(inventory)

        // Get staff data
        const staff = await bakeryAPI.getStaffData()
        setStaffData(
          staff.filter((s) => s.role === 'Baker' || s.role === 'Pastry Chef')
        )

        // Get production trend
        const productionTrendData = await bakeryAPI.getTimeSeriesData(
          'production',
          timeRange
        )
        setProductionTrend(productionTrendData)

        // Get waste trend
        const wasteTrendData = await bakeryAPI.getTimeSeriesData(
          'waste',
          timeRange
        )
        setWasteTrend(wasteTrendData)

        // Calculate summary data
        const summaryData = await bakeryAPI.getSummaryData(timeRange)
        setSummary(summaryData)
      } catch (error) {
        console.error('Error fetching production data:', error)
      } finally {
        setLoading(false)
      }
    }

    fetchData()
  }, [timeRange])

  // Handle time range change
  const handleTimeRangeChange = (range: TimeRange) => {
    setTimeRange(range)
  }

  // Navigate back to dashboard selector
  const navigateBack = () => {
    router.push('/dashboard')
  }

  // Format production data for display
  const formatProductionData = () => {
    return productionData.map((item) => ({
      id: item.id,
      date: new Date(item.date).toLocaleDateString(),
      product: item.product_name,
      quantity: item.quantity_produced,
      waste: item.waste,
      staff: item.staff_name,
      efficiency:
        (
          ((item.quantity_produced - item.waste) / item.quantity_produced) *
          100
        ).toFixed(1) + '%',
    }))
  }

  // Get products by category for chart
  const getProductionByCategory = () => {
    const categories: Record<string, number> = {}

    productionData.forEach((item) => {
      // Extract category from product name (in a real app, you'd have a proper category field)
      const product = item.product_name
      let category = 'Other'

      if (product.includes('Bread') || product.includes('Baguette'))
        category = 'Bread'
      else if (product.includes('Cake') || product.includes('Cupcake'))
        category = 'Cake'
      else if (
        product.includes('Pastry') ||
        product.includes('Croissant') ||
        product.includes('Roll')
      )
        category = 'Pastry'
      else if (product.includes('Pie')) category = 'Pie'

      categories[category] =
        (categories[category] || 0) + item.quantity_produced
    })

    return Object.entries(categories).map(([name, value]) => ({ name, value }))
  }

  // Get staff productivity data
  const getStaffProductivity = () => {
    return staffData.map((staff) => ({
      name: staff.name,
      value: staff.productivity,
      target: 90, // Target productivity
      color:
        staff.productivity >= 90
          ? '#4caf50'
          : staff.productivity >= 80
          ? '#ff9800'
          : '#f44336',
    }))
  }

  // Find low stock inventory items
  const getLowStockItems = () => {
    return inventoryData.filter(
      (item) => item.quantity <= item.min_stock_level * 1.2
    )
  }

  // Combined production and waste chart data
  const getProductionWasteData = () => {
    // Merge the two datasets by date
    const combinedData: any[] = []
    const dateMap: Record<string, any> = {}

    productionTrend.forEach((item) => {
      dateMap[item.date] = { date: item.date, production: item.value, waste: 0 }
    })

    wasteTrend.forEach((item) => {
      if (dateMap[item.date]) {
        dateMap[item.date].waste = item.value
      } else {
        dateMap[item.date] = {
          date: item.date,
          production: 0,
          waste: item.value,
        }
      }
    })

    Object.values(dateMap).forEach((item) => combinedData.push(item))

    // Sort by date
    combinedData.sort(
      (a, b) => new Date(a.date).getTime() - new Date(b.date).getTime()
    )

    return combinedData
  }

  if (loading || !summary) {
    return (
      <Base>
        <Container
          sx={{
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            height: '60vh',
          }}
        >
          <CircularProgress />
        </Container>
      </Base>
    )
  }

  return (
    <Base>
      <Hero title="Production Dashboard" />
      <Container maxWidth="xl">
        <Box
          sx={{
            mb: 3,
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
            flexWrap: 'wrap',
          }}
        >
          <Button onClick={navigateBack} style={{ marginBottom: '10px' }}>
            ← Back to Dashboard Selection
          </Button>
          <DateRangeSelector
            timeRange={timeRange}
            onTimeRangeChange={handleTimeRangeChange}
          />
        </Box>

        {/* KPI Summary Cards */}
        <Grid container spacing={3} sx={{ mb: 4 }}>
          <Grid item xs={12} sm={6} md={3}>
            <MetricCard
              title="Total Production"
              value={summary.totalProduced}
              unit=" units"
              icon={<InventoryIcon />}
              color="#4caf50"
              tooltip="Total items produced in the selected period"
            />
          </Grid>
          <Grid item xs={12} sm={6} md={3}>
            <MetricCard
              title="Items Sold"
              value={summary.totalItems}
              unit=" units"
              icon={<LocalShippingIcon />}
              color="#2196f3"
              tooltip="Total items sold in the selected period"
            />
          </Grid>
          <Grid item xs={12} sm={6} md={3}>
            <MetricCard
              title="Waste Items"
              value={summary.totalWaste}
              unit=" units"
              icon={<DeleteIcon />}
              color="#f44336"
              tooltip="Total waste in the selected period"
            />
          </Grid>
          <Grid item xs={12} sm={6} md={3}>
            <MetricCard
              title="Wastage Rate"
              value={summary.wastageRate.toFixed(1)}
              unit="%"
              icon={<SpeedIcon />}
              color="#ff9800"
              tooltip="Percentage of production wasted"
            />
          </Grid>
        </Grid>

        {/* Low Stock Alert */}
        {getLowStockItems().length > 0 && (
          <Alert severity="warning" sx={{ mb: 4 }}>
            <Typography
              variant="subtitle1"
              component="div"
              sx={{ fontWeight: 'bold' }}
            >
              Low Stock Alert
            </Typography>
            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mt: 1 }}>
              {getLowStockItems().map((item) => (
                <Chip
                  key={item.id}
                  label={`${item.name}: ${item.quantity} ${item.unit} left`}
                  color="warning"
                  size="small"
                />
              ))}
            </Box>
          </Alert>
        )}

        {/* Charts Row */}
        <Grid container spacing={3} sx={{ mb: 4 }}>
          <Grid item xs={12} md={8}>
            <ChartComponent
              title="Production & Waste Overview"
              subtitle={`Production and waste trends for the selected ${timeRange}`}
              type="line"
              data={getProductionWasteData()}
              dataKeys={{
                x: 'date',
                y: ['production', 'waste'],
                colors: ['#4caf50', '#f44336'],
              }}
              height={300}
            />
          </Grid>
          <Grid item xs={12} md={4}>
            <ChartComponent
              title="Production by Category"
              subtitle="Distribution of products by category"
              type="pie"
              data={getProductionByCategory()}
              dataKeys={{
                x: 'name',
                y: 'value',
                colors: ['#4caf50', '#2196f3', '#ff9800', '#9c27b0', '#607d8b'],
              }}
              height={300}
            />
          </Grid>
        </Grid>

        {/* Staff Productivity & Inventory */}
        <Grid container spacing={3} sx={{ mb: 4 }}>
          <Grid item xs={12} md={6}>
            <ProductivityChart
              title="Staff Productivity"
              subtitle="Bakery staff performance metrics"
              data={getStaffProductivity()}
              valueLabel="Productivity Score"
              targetLabel="Target"
              height={300}
            />
          </Grid>
          <Grid item xs={12} md={6}>
            <DataTable
              title="Inventory Status"
              subtitle="Current inventory levels"
              columns={[
                { id: 'name', label: 'Ingredient', minWidth: 120 },
                {
                  id: 'quantity',
                  label: 'Quantity',
                  minWidth: 80,
                  align: 'right',
                },
                { id: 'unit', label: 'Unit', minWidth: 60 },
                {
                  id: 'status',
                  label: 'Status',
                  minWidth: 100,
                  align: 'center',
                  format: (value: string) => (
                    <Chip
                      label={value}
                      color={
                        value === 'Low Stock'
                          ? 'error'
                          : value === 'Reorder Soon'
                          ? 'warning'
                          : 'success'
                      }
                      size="small"
                    />
                  ),
                },
                {
                  id: 'last_restocked',
                  label: 'Last Restocked',
                  minWidth: 120,
                },
              ]}
              data={inventoryData.map((item) => ({
                id: item.id,
                name: item.name,
                quantity: item.quantity,
                unit: item.unit,
                status:
                  item.quantity <= item.min_stock_level
                    ? 'Low Stock'
                    : item.quantity <= item.min_stock_level * 1.5
                    ? 'Reorder Soon'
                    : 'OK',
                last_restocked: new Date(
                  item.last_restocked
                ).toLocaleDateString(),
              }))}
              searchEnabled={true}
              emptyMessage="No inventory data available"
            />
          </Grid>
        </Grid>

        {/* Production Records */}
        <Grid container spacing={3}>
          <Grid item xs={12}>
            <DataTable
              title="Production Records"
              subtitle="Detailed production data for the selected period"
              columns={[
                { id: 'date', label: 'Date', minWidth: 100 },
                { id: 'product', label: 'Product', minWidth: 150 },
                {
                  id: 'quantity',
                  label: 'Produced',
                  minWidth: 100,
                  align: 'right',
                },
                { id: 'waste', label: 'Waste', minWidth: 100, align: 'right' },
                {
                  id: 'efficiency',
                  label: 'Efficiency',
                  minWidth: 100,
                  align: 'right',
                  format: (value: string) => {
                    const percentage = parseFloat(value)
                    let color = '#4caf50' // green
                    if (percentage < 90) color = '#ff9800' // orange
                    if (percentage < 80) color = '#f44336' // red

                    return (
                      <Typography
                        component="span"
                        sx={{ color, fontWeight: 'medium' }}
                      >
                        {value}
                      </Typography>
                    )
                  },
                },
                { id: 'staff', label: 'Staff', minWidth: 120 },
              ]}
              data={formatProductionData()}
              searchEnabled={true}
              emptyMessage="No production data available for the selected period"
            />
          </Grid>
        </Grid>
      </Container>
    </Base>
  )
}

export default ProductionDashboard
----------------------------------------

FILE: ./src/app/dashboard/sales/page.tsx
----------------------------------------
'use client'
import React, { useState, useEffect } from 'react'
import {
  Container,
  Typography,
  Box,
  Grid,
  CircularProgress,
  Chip,
  Avatar,
  Rating,
} from '@mui/material'
import { useRouter } from 'next/navigation'
import PeopleIcon from '@mui/icons-material/People'
import ShoppingCartIcon from '@mui/icons-material/ShoppingCart'
import AttachMoneyIcon from '@mui/icons-material/AttachMoney'
import LocalOfferIcon from '@mui/icons-material/LocalOffer'
import TrendingUpIcon from '@mui/icons-material/TrendingUp'

import Base from '../../../layouts/Base'
import Hero from '../../../components/Hero'
import Button from '../../../components/button/Index'
import DateRangeSelector, {
  TimeRange,
} from '../../../components/dashboard/DateRangeSelector'
import MetricCard from '../../../components/dashboard/MetricCard'
import ChartComponent from '../../../components/dashboard/ChartComponent'
import DataTable from '../../../components/dashboard/DataTable'
import StatsComparison from '../../../components/dashboard/StatsComparison'

import bakeryAPI from '../../../services/bakeryAPI'
import {
  SalesData,
  CustomerData,
  Product,
  TimeSeriesData,
} from '../../../services/types'

const SalesDashboard: React.FC = () => {
  const router = useRouter()
  const [timeRange, setTimeRange] = useState<TimeRange>('day')
  const [loading, setLoading] = useState<boolean>(true)
  const [salesData, setSalesData] = useState<SalesData[]>([])
  const [customerData, setCustomerData] = useState<CustomerData[]>([])
  const [productData, setProductData] = useState<Product[]>([])
  const [salesTrend, setSalesTrend] = useState<TimeSeriesData[]>([])
  const [customerTrend, setCustomerTrend] = useState<TimeSeriesData[]>([])
  const [summary, setSummary] = useState<any>(null)
  const [previousSummary, setPreviousSummary] = useState<any>(null)

  // Fetch data based on selected time range
  useEffect(() => {
    const fetchData = async () => {
      setLoading(true)
      try {
        // Get sales data
        const sales = await bakeryAPI.getSalesData(timeRange)
        setSalesData(sales)

        // Get customer data
        const customers = await bakeryAPI.getCustomerData()
        setCustomerData(customers)

        // Get product data
        const products = await bakeryAPI.getProducts()
        setProductData(products)

        // Get sales trend
        const salesTrendData = await bakeryAPI.getTimeSeriesData(
          'sales',
          timeRange
        )
        setSalesTrend(salesTrendData)

        // Get customer trend
        const customerTrendData = await bakeryAPI.getTimeSeriesData(
          'customers',
          timeRange
        )
        setCustomerTrend(customerTrendData)

        // Calculate summary data
        const summaryData = await bakeryAPI.getSummaryData(timeRange)
        setSummary(summaryData)

        // Get previous period summary for comparison
        let previousTimeRange: TimeRange
        switch (timeRange) {
          case 'day':
            previousTimeRange = 'day' // Previous day
            break
          case 'week':
            previousTimeRange = 'week' // Previous week
            break
          case 'month':
            previousTimeRange = 'month' // Previous month
            break
          case 'year':
            previousTimeRange = 'year' // Previous year
            break
        }
        const previousSummaryData = await bakeryAPI.getSummaryData(
          previousTimeRange
        )
        setPreviousSummary(previousSummaryData)
      } catch (error) {
        console.error('Error fetching sales data:', error)
      } finally {
        setLoading(false)
      }
    }

    fetchData()
  }, [timeRange])

  // Handle time range change
  const handleTimeRangeChange = (range: TimeRange) => {
    setTimeRange(range)
  }

  // Navigate back to dashboard selector
  const navigateBack = () => {
    router.push('/dashboard')
  }

  // Format sales data for display
  const formatSalesData = () => {
    return salesData.map((item) => ({
      id: item.id,
      date: new Date(item.date).toLocaleDateString(),
      product: item.product_name,
      quantity: item.quantity,
      total: `$${item.total.toFixed(2)}`,
      payment: item.payment_method,
    }))
  }

  // Get best-selling products
  const getBestSellingProducts = () => {
    // Group sales by product and calculate total quantity sold
    const productSales: Record<string, { name: string; quantity: number }> = {}

    salesData.forEach((sale) => {
      if (!productSales[sale.product_id]) {
        productSales[sale.product_id] = { name: sale.product_name, quantity: 0 }
      }
      productSales[sale.product_id].quantity += sale.quantity
    })

    // Convert to array and sort by quantity
    return Object.values(productSales)
      .sort((a, b) => b.quantity - a.quantity)
      .slice(0, 5) // Get top 5
      .map((product) => ({ name: product.name, value: product.quantity }))
  }

  // Get sales by payment method
  const getSalesByPaymentMethod = () => {
    const paymentMethods: Record<string, number> = {}

    salesData.forEach((sale) => {
      if (!paymentMethods[sale.payment_method]) {
        paymentMethods[sale.payment_method] = 0
      }
      paymentMethods[sale.payment_method] += sale.total
    })

    return Object.entries(paymentMethods).map(([name, value]) => ({
      name,
      value,
    }))
  }

  // Calculate percentage changes
  const calculatePercentageChange = (current: number, previous: number) => {
    if (previous === 0) return current > 0 ? 100 : 0
    return ((current - previous) / previous) * 100
  }

  if (loading || !summary) {
    return (
      <Base>
        <Container
          sx={{
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            height: '60vh',
          }}
        >
          <CircularProgress />
        </Container>
      </Base>
    )
  }

  return (
    <Base>
      <Hero title="Sales Dashboard" />
      <Container maxWidth="xl">
        <Box
          sx={{
            mb: 3,
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
            flexWrap: 'wrap',
          }}
        >
          <Button onClick={navigateBack} style={{ marginBottom: '10px' }}>
            ← Back to Dashboard Selection
          </Button>
          <DateRangeSelector
            timeRange={timeRange}
            onTimeRangeChange={handleTimeRangeChange}
          />
        </Box>

        {/* KPI Summary Cards */}
        <Grid container spacing={3} sx={{ mb: 4 }}>
          <Grid item xs={12} sm={6} md={2.4}>
            <MetricCard
              title="Total Sales"
              value={`$${summary.totalSales.toFixed(2)}`}
              icon={<AttachMoneyIcon />}
              percentageChange={calculatePercentageChange(
                summary.totalSales,
                previousSummary?.totalSales || 0
              )}
              color="#4caf50"
              tooltip="Total revenue from sales in the selected period"
            />
          </Grid>
          <Grid item xs={12} sm={6} md={2.4}>
            <MetricCard
              title="Transactions"
              value={summary.transactions}
              icon={<ShoppingCartIcon />}
              percentageChange={calculatePercentageChange(
                summary.transactions,
                previousSummary?.transactions || 0
              )}
              color="#2196f3"
              tooltip="Number of sales transactions in the selected period"
            />
          </Grid>
          <Grid item xs={12} sm={6} md={2.4}>
            <MetricCard
              title="Avg Order Value"
              value={`$${summary.averageOrderValue.toFixed(2)}`}
              icon={<LocalOfferIcon />}
              percentageChange={calculatePercentageChange(
                summary.averageOrderValue,
                previousSummary?.averageOrderValue || 0
              )}
              color="#ff9800"
              tooltip="Average value per transaction"
            />
          </Grid>
          <Grid item xs={12} sm={6} md={2.4}>
            <MetricCard
              title="Items Sold"
              value={summary.totalItems}
              icon={<ShoppingCartIcon />}
              percentageChange={calculatePercentageChange(
                summary.totalItems,
                previousSummary?.totalItems || 0
              )}
              color="#9c27b0"
              tooltip="Total number of items sold"
            />
          </Grid>
          <Grid item xs={12} sm={6} md={2.4}>
            <MetricCard
              title="Conversion Rate"
              value={`${(
                (summary.transactions / summary.uniqueTransactions) *
                100
              ).toFixed(1)}%`}
              icon={<TrendingUpIcon />}
              percentageChange={calculatePercentageChange(
                summary.transactions / summary.uniqueTransactions,
                previousSummary
                  ? previousSummary.transactions /
                      previousSummary.uniqueTransactions
                  : 0
              )}
              color="#607d8b"
              tooltip="Percentage of store visitors who made a purchase"
            />
          </Grid>
        </Grid>

        {/* Charts Row */}
        <Grid container spacing={3} sx={{ mb: 4 }}>
          <Grid item xs={12} md={8}>
            <ChartComponent
              title="Sales Performance"
              subtitle={`Sales trend for the selected ${timeRange}`}
              type="area"
              data={salesTrend}
              dataKeys={{ x: 'date', y: ['value'], colors: ['#4caf50'] }}
              height={300}
            />
          </Grid>
          <Grid item xs={12} md={4}>
            <ChartComponent
              title="Best Selling Products"
              subtitle="Top products by quantity sold"
              type="bar"
              data={getBestSellingProducts()}
              dataKeys={{ x: 'name', y: 'value', colors: ['#2196f3'] }}
              height={300}
            />
          </Grid>
        </Grid>

        {/* Payment Methods & Customer Insights */}
        <Grid container spacing={3} sx={{ mb: 4 }}>
          <Grid item xs={12} md={6}>
            <ChartComponent
              title="Payment Methods"
              subtitle="Sales by payment type"
              type="pie"
              data={getSalesByPaymentMethod()}
              dataKeys={{
                x: 'name',
                y: 'value',
                colors: ['#4caf50', '#2196f3', '#ff9800', '#9c27b0'],
              }}
              height={300}
            />
          </Grid>
          <Grid item xs={12} md={6}>
            <StatsComparison
              title="Sales Performance"
              subtitle="Comparison with previous period"
              previousPeriodLabel={`previous ${timeRange}`}
              items={[
                {
                  label: 'Total Sales',
                  current: summary.totalSales,
                  previous: previousSummary?.totalSales || 0,
                  unit: '$',
                  color: '#4caf50',
                  isHigherBetter: true,
                },
                {
                  label: 'Total Transactions',
                  current: summary.transactions,
                  previous: previousSummary?.transactions || 0,
                  color: '#2196f3',
                  isHigherBetter: true,
                },
                {
                  label: 'Average Order Value',
                  current: summary.averageOrderValue,
                  previous: previousSummary?.averageOrderValue || 0,
                  unit: '$',
                  color: '#ff9800',
                  isHigherBetter: true,
                },
                {
                  label: 'Items Sold',
                  current: summary.totalItems,
                  previous: previousSummary?.totalItems || 0,
                  color: '#9c27b0',
                  isHigherBetter: true,
                },
              ]}
            />
          </Grid>
        </Grid>

        {/* Product Inventory & Customer Table */}
        <Grid container spacing={3} sx={{ mb: 4 }}>
          <Grid item xs={12} md={6}>
            <DataTable
              title="Product Inventory"
              subtitle="Current stock levels for retail"
              columns={[
                { id: 'name', label: 'Product', minWidth: 150 },
                {
                  id: 'price',
                  label: 'Price',
                  minWidth: 80,
                  align: 'right',
                  format: (value) => `$${value.toFixed(2)}`,
                },
                { id: 'stock', label: 'Stock', minWidth: 70, align: 'right' },
                {
                  id: 'status',
                  label: 'Status',
                  minWidth: 120,
                  align: 'center',
                  format: (value: string) => (
                    <Chip
                      label={value}
                      color={
                        value === 'Low Stock'
                          ? 'error'
                          : value === 'Medium Stock'
                          ? 'warning'
                          : 'success'
                      }
                      size="small"
                    />
                  ),
                },
              ]}
              data={productData.map((product) => ({
                id: product.id,
                name: product.name,
                price: product.price,
                stock: product.stock,
                status:
                  product.stock < 10
                    ? 'Low Stock'
                    : product.stock < 30
                    ? 'Medium Stock'
                    : 'Good Stock',
              }))}
              searchEnabled={true}
              emptyMessage="No product data available"
            />
          </Grid>
          <Grid item xs={12} md={6}>
            <DataTable
              title="Top Customers"
              subtitle="Highest spending customers"
              columns={[
                {
                  id: 'name',
                  label: 'Customer',
                  minWidth: 150,
                  format: (value, row) => (
                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                      <Avatar
                        sx={{
                          mr: 1,
                          bgcolor:
                            '#' +
                            Math.floor(Math.random() * 16777215).toString(16),
                        }}
                      >
                        {value.charAt(0)}
                      </Avatar>
                      <Typography variant="body2">{value}</Typography>
                    </Box>
                  ),
                },
                {
                  id: 'visits',
                  label: 'Visits',
                  minWidth: 80,
                  align: 'center',
                },
                {
                  id: 'total_spent',
                  label: 'Total Spent',
                  minWidth: 120,
                  align: 'right',
                  format: (value) => `$${value.toFixed(2)}`,
                },
                {
                  id: 'loyalty',
                  label: 'Loyalty',
                  minWidth: 150,
                  format: (value) => (
                    <Rating
                      value={value}
                      readOnly
                      precision={0.5}
                      size="small"
                    />
                  ),
                },
              ]}
              data={customerData
                .sort((a, b) => b.total_spent - a.total_spent)
                .slice(0, 10)
                .map((customer) => ({
                  id: customer.id,
                  name: customer.name,
                  visits: customer.visits,
                  total_spent: customer.total_spent,
                  last_visit: customer.last_visit,
                  loyalty: Math.min(5, customer.visits / 5), // Convert visits to 0-5 scale for rating
                }))}
              emptyMessage="No customer data available"
            />
          </Grid>
        </Grid>

        {/* Sales Transactions */}
        <Grid container spacing={3}>
          <Grid item xs={12}>
            <DataTable
              title="Recent Transactions"
              subtitle="Latest sales transactions"
              columns={[
                { id: 'id', label: 'Order ID', minWidth: 80 },
                { id: 'date', label: 'Date', minWidth: 100 },
                { id: 'product', label: 'Product', minWidth: 150 },
                {
                  id: 'quantity',
                  label: 'Quantity',
                  minWidth: 80,
                  align: 'right',
                },
                {
                  id: 'total',
                  label: 'Total',
                  minWidth: 100,
                  align: 'right',
                  format: (value) => (
                    <Typography
                      component="span"
                      sx={{ color: '#4caf50', fontWeight: 'medium' }}
                    >
                      {value}
                    </Typography>
                  ),
                },
                {
                  id: 'payment',
                  label: 'Payment Method',
                  minWidth: 150,
                  format: (value) => (
                    <Chip
                      label={value}
                      size="small"
                      color={
                        value === 'Cash'
                          ? 'success'
                          : value === 'Credit Card'
                          ? 'primary'
                          : value === 'Debit Card'
                          ? 'info'
                          : 'default'
                      }
                    />
                  ),
                },
              ]}
              data={formatSalesData()}
              searchEnabled={true}
              emptyMessage="No sales data available for the selected period"
            />
          </Grid>
        </Grid>
      </Container>
    </Base>
  )
}

export default SalesDashboard
----------------------------------------

FILE: ./src/app/docs/page.tsx
----------------------------------------
'use client'
import React, { useState, useEffect } from 'react'
import {
  Container,
  Typography,
  Box,
  Tab,
  Tabs,
  CircularProgress,
  Alert,
} from '@mui/material'
import Base from '../../layouts/Base'
import Hero from '../../components/Hero'
import MarkdownDisplay from '../../components/MarkdownDisplay'

// List of markdown files to display
const documentFiles = [
  { name: 'KPI Analysis', path: '/docs/planning/kpi.md' },
  // Add more markdown files here as needed
]

export default function DocsPage() {
  const [selectedTab, setSelectedTab] = useState(0)
  const [markdownContent, setMarkdownContent] = useState('')
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setSelectedTab(newValue)
  }

  useEffect(() => {
    const fetchMarkdown = async () => {
      setLoading(true)
      setError(null)
      try {
        const response = await fetch(documentFiles[selectedTab].path)
        if (!response.ok) {
          throw new Error(`Failed to load document: ${response.statusText}`)
        }
        const text = await response.text()
        setMarkdownContent(text)
      } catch (err) {
        console.error('Error loading markdown file:', err)
        setError(
          'Fehler beim Laden des Dokuments. Bitte versuchen Sie es später erneut.'
        )
      } finally {
        setLoading(false)
      }
    }

    fetchMarkdown()
  }, [selectedTab])

  return (
    <Base>
      <Hero title="Dokumentation" />
      <Container maxWidth="lg" sx={{ mt: 4, mb: 8 }}>
        <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>
          <Tabs
            value={selectedTab}
            onChange={handleTabChange}
            variant="scrollable"
            scrollButtons="auto"
          >
            {documentFiles.map((doc) => (
              <Tab key={doc.name} label={doc.name} />
            ))}
          </Tabs>
        </Box>

        {loading ? (
          <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>
            <CircularProgress />
          </Box>
        ) : error ? (
          <Alert severity="error" sx={{ my: 2 }}>
            {error}
          </Alert>
        ) : (
          <MarkdownDisplay
            content={markdownContent}
            title={documentFiles[selectedTab].name}
          />
        )}
      </Container>
    </Base>
  )
}
----------------------------------------

FILE: ./src/app/fonts.ts
----------------------------------------
import { Ubuntu, Averia_Serif_Libre } from 'next/font/google'

export const ubuntu = Ubuntu({
  weight: ['300', '400', '500', '700'],
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-ubuntu',
})

export const averiaSerifLibre = Averia_Serif_Libre({
  weight: ['300', '400', '700'],
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-averia',
})
----------------------------------------

FILE: ./src/app/imprint/page.tsx
----------------------------------------
'use client'
import React from 'react'
import Base from '../../layouts/Base'
import { Box, Container, Typography } from '@mui/material'
import Hero from '../../components/Hero'

const Imprint: React.FC = () => (
  <Base>
    <Hero title="Impressum" />
    <Box sx={{ py: 6 }}>
      <Container maxWidth="sm">
        <Box>
          <Typography variant="h5">
            Angaben gem&auml;&szlig; &sect; 5 TMG
          </Typography>
          <Typography mb={2} color="text.secondary">
            Bäckerei Heusser
            <br />
            Eckstraße 3
            <br />
            66424 Homburg/Kirrberg
          </Typography>

          <Typography mb={2} color="text.secondary">
            <strong>Vertreten durch:</strong>
            <br />
            Karl-Heinz Heußer
          </Typography>

          <Typography variant="h5">Kontakt</Typography>
          <Typography mb={2} color="text.secondary">
            Telefon: 06841 2229
            <br />
            Handy: 01522 66 2 12 36
            <br />
            E-Mail: baeckerei@heusserk.de
          </Typography>

          <Typography variant="h5">Umsatzsteuer-ID</Typography>
          <Typography mb={2} color="text.secondary">
            Umsatzsteuer-Identifikationsnummer gem&auml;&szlig; &sect; 27 a
            Umsatzsteuergesetz:
            <br />
            DE999999999
          </Typography>

          <Typography variant="h5">Redaktionell verantwortlich</Typography>
          <Typography mb={2} color="text.secondary">
            Sebastian Heußer
            <br />
            Collingstraße 104
            <br />
            66424 Homburg/Kirrberg
          </Typography>
        </Box>
      </Container>
    </Box>
  </Base>
)

export default Imprint
----------------------------------------

FILE: ./src/app/infotv/page.tsx
----------------------------------------
'use client'
import React from 'react'
import {
  Box,
  Typography,
  Divider,
  Grid,
  useMediaQuery,
  Container,
} from '@mui/material'
import { ZEITEN } from '../../components/home/map/zeiten'

import Weather from '../../components/info/Weather'
import Calendar from '../../components/info/Calendar'
// import RSSFeed from '../../components/info/RSSFeed'
import Products from '../../components/info/Products'
import News from '../../components/info/News'
import useDate from '../../components/info/useDate'

import { featuredProducts } from '../../mocks/products/featured'
import Image from 'next/image'
import Heusser from '../../components/icons/brand/Heusser'
import Baeckerei from '../../components/icons/brand/Baeckerei'
import Wappen from '../../components/icons/brand/Wappen'
import Info from '../../components/home/map/Info'

const InfoTV: React.FC = () => {
  const [isOpen, setOpen] = React.useState(true)

  console.log('ZEITEN')
  console.log(ZEITEN)
  const handleOpeningHours = () => {
    // get day
    let workday = new Date().getDay()
    console.log(workday)
    console.log('time')
    let hour = new Date().getHours()
    console.log('hour')
    console.log(hour)

    function calculateOpenHours(open: any, close: any) {
      var open_hour = parseInt(open.split(':')[0])
      var open_minutes = parseInt(open.split(':')[1])
      console.log('open_time', open_hour, open_minutes)

      var close_hour = parseInt(close.split(':')[0])
      var close_minutes = parseInt(close.split(':')[1])
      console.log('close_time', close_hour, close_minutes)

      var d = new Date() // current time
      var current_hours = d.getHours()
      var current_mins = d.getMinutes()

      if (
        current_hours > open_hour ||
        (current_hours === open_hour &&
          current_mins >= open_minutes &&
          (current_hours < close_hour ||
            (current_hours === close_hour && current_mins < close_minutes)))
      ) {
        console.log('open')

        return true
      } else {
        console.log('closed')
        return false
      }
    }

    switch (workday) {
      case 0:
        console.log("Sonntag, We've closed! See you tomorrow!")
        break
      case 1:
        console.log("Montag, It's a Bakeryday! :-)")
        if (
          calculateOpenHours('05:00', '12:00') ||
          calculateOpenHours('15:30', '17:00')
        ) {
          setOpen(true)
        } else {
          setOpen(false)
        }

        break
      case 2:
        console.log("Dienstag, It's a Bakeryday! :-)")
        if (
          calculateOpenHours('05:00', '12:00') ||
          calculateOpenHours('15:30', '17:00')
        ) {
          setOpen(true)
        } else {
          setOpen(false)
        }
        break
      case 3:
        console.log("Mittwoch, It's a Bakeryday! :-)")
        if (calculateOpenHours('06:00', '12:30')) {
          setOpen(true)
        } else {
          setOpen(false)
        }
        break
      case 4:
        console.log("Donnerstag, It's a Bakeryday! :-)")
        if (
          calculateOpenHours('05:00', '12:00') ||
          calculateOpenHours('15:30', '17:00')
        ) {
          setOpen(true)
        } else {
          setOpen(false)
        }
        break
      case 5:
        console.log("Freitag, It's a Bakeryday! :-)")
        if (
          calculateOpenHours('05:00', '12:00') ||
          calculateOpenHours('15:30', '17:00')
        ) {
          setOpen(true)
        } else {
          setOpen(false)
        }
        break
      case 6:
        console.log("Samstag, It's a Bakeryday! :-)")
        if (calculateOpenHours('06:00', '12:30')) {
          setOpen(true)
        } else {
          setOpen(false)
        }
        break
      default:
        break
    }
  }

  React.useEffect(() => {
    // Update the document title using the browser API
    handleOpeningHours()
    setInterval(() => {
      handleOpeningHours()
    }, 50000)
  })

  return (
    <div>
      {isOpen ? (
        <Box sx={styles.root}>
          <Grid container sx={styles.outerContainer}>
            <Grid item md={3}>
              <Box sx={styles.brand}>
                <Box flex={1}>
                  <Box sx={{ mb: 6 }}>
                    {/* <Typography variant="h4">{useDate().wish}</Typography>
                  <Typography variant="h2">{useDate().time}</Typography> */}
                    <Typography variant="h1">{`Hello ${isOpen}`}</Typography>
                  </Box>
                  <Weather />
                </Box>
                <Box
                  sx={{
                    mt: 6,
                    display: 'flex',
                    alignItems: 'center',
                  }}
                >
                  <Box flex={1}>
                    <Typography variant="h4">Jetzt auch online!</Typography>
                    <Typography sx={{ opacity: 0.66 }} fontSize={20}>
                      Du findest uns jetzt auch im Web unter{' '}
                      <strong>bäckerei-heusser.de</strong>
                    </Typography>
                  </Box>
                  {/* eslint-disable-next-line @next/next/no-img-element */}
                  <img
                    src="/assets/qr-home.png"
                    alt="Logo Bäckerei Heusser"
                    height={120}
                    width={120}
                    style={{ borderRadius: '12px' }}
                  />
                </Box>
              </Box>
            </Grid>
            <Grid item md={9}>
              <Box
                sx={{
                  p: 6,
                  display: 'flex',
                  flexDirection: 'column',
                }}
              >
                <Box
                  sx={{
                    display: 'flex',
                    height: '50vh',
                  }}
                >
                  <Box
                    sx={{
                      width: 'calc((100% - 96px) / 3)',
                    }}
                  >
                    <News header="Neuigkeiten" />
                  </Box>
                  <Box
                    sx={{
                      width: 'calc((100% - 96px) / 3)',
                      mx: 6,
                    }}
                  >
                    <Products items={featuredProducts} header="Angebote" />
                  </Box>
                  <Box
                    sx={{
                      width: 'calc((100% - 96px) / 3)',
                    }}
                  >
                    <Typography sx={{ mb: 1 }} variant="h4">
                      Regionales
                    </Typography>
                    {/* <RSSFeed /> */}
                  </Box>
                </Box>
                <Box sx={{ mt: 6 }}>
                  <Typography sx={{ mb: 1 }} variant="h4">
                    Kalender
                  </Typography>
                  <Calendar />
                </Box>
              </Box>
            </Grid>
          </Grid>
        </Box>
      ) : (
        <Box sx={styles.isClosed}>
          <Box sx={styles.logo}>
            <Wappen />
            <Baeckerei />
          </Box>
          <Box sx={styles.info}>
            <Typography variant="h6" gutterBottom>
              Öffnungszeiten
            </Typography>
            {ZEITEN.map((item) => (
              <>
                <Typography fontWeight="bold" variant="body2">
                  {item.label}
                </Typography>
                <Typography>{item.value}</Typography>
              </>
            ))}

            <Typography variant="h6" gutterBottom>
              Telefon
            </Typography>
            <Typography>06841 2229</Typography>
            <Typography>01522 6621236</Typography>
          </Box>
        </Box>
      )}
    </div>
  )
}

const styles = {
  root: {
    p: 0,
  },
  outerContainer: {
    flexWrap: 'nowrap',
  },
  brand: {
    height: '100vh',
    p: 6,
    bgcolor: 'text.primary',
    color: 'background.paper',
    display: 'flex',
    flexDirection: 'column',
  },
  main: {},
  logo: {
    position: 'relative',
    zIndex: 10,
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    color: 'white',
    transform: { xs: 'scale(0.5)', sm: 'scale(0.6)', md: 'scale(1)' },
  },
  isClosed: {
    backgroundColor: 'black',
    height: '100vh',
    padding: '20% 50px',
  },
  info: {
    paddingTop: '50px',
    position: 'relative',
    justifyContent: 'center',
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    zIndex: 2,
    color: 'white',
  },
}

export default InfoTV
----------------------------------------

FILE: ./src/app/layout.tsx
----------------------------------------
// src/app/layout.tsx
import { AppConfig } from '../utils/AppConfig'
import ThemeRegistry from './ThemeRegistry'

// This works because this file is now a Server Component
export const metadata = {
  title: AppConfig.title,
  description: AppConfig.description,
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang={AppConfig.locale}>
      <head>
        <link
          rel="apple-touch-icon"
          href={`${process.env.basePath}/apple-touch-icon.png`}
        />
        <link
          rel="icon"
          type="image/png"
          sizes="32x32"
          href={`${process.env.basePath}/favicon-32x32.png`}
        />
        <link
          rel="icon"
          type="image/png"
          sizes="16x16"
          href={`${process.env.basePath}/favicon-16x16.png`}
        />
        <link rel="icon" href={`${process.env.basePath}/favicon.ico`} />
      </head>
      <body>
        <ThemeRegistry>{children}</ThemeRegistry>
      </body>
    </html>
  )
}
----------------------------------------

FILE: ./src/app/login/page.tsx
----------------------------------------
'use client'
import React, { useState } from 'react'
import { Container } from '@mui/material'
import { useRouter } from 'next/navigation'

import Hero from '../../components/Hero'
import Base from '../../layouts/Base'
import Input from '../../components/Input'
import Button from '../../components/button/Index'

interface Data {
  username: string
  password: string
}

const DEFAULT = {
  username: '',
  password: '',
}

const Login: React.FC = () => {
  const [data, setData] = useState<Data>(DEFAULT)
  const [error, setError] = useState<string>('')
  const [loading, setLoading] = useState<boolean>(false)
  const router = useRouter()

  const login = async () => {
    setLoading(true)
    setError('')

    try {
      const response = await fetch('http://localhost:5000/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      })

      const result = await response.json()

      if (!response.ok) {
        throw new Error(result.error || 'Login failed')
      }

      // Store token in localStorage
      localStorage.setItem('token', result.token)

      // Redirect to dashboard or home
      router.push('/dashboard')
    } catch (error: any) {
      setError(error.message || 'Failed to login. Please try again.')
    } finally {
      setLoading(false)
    }
  }

  const register = async () => {
    setLoading(true)
    setError('')

    try {
      const response = await fetch('http://localhost:5000/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      })

      const result = await response.json()

      if (!response.ok) {
        throw new Error(result.error || 'Registration failed')
      }

      // Show success message and prompt to login
      alert('Registration successful! You can now log in.')

      // Clear form
      setData(DEFAULT)
    } catch (error: any) {
      setError(error.message || 'Failed to register. Please try again.')
    } finally {
      setLoading(false)
    }
  }

  return (
    <Base>
      <Hero title="Anmelden" />
      <Container maxWidth="sm">
        {error && (
          <div
            style={{ color: 'red', marginBottom: '20px', textAlign: 'center' }}
          >
            {error}
          </div>
        )}
        <Input
          name="username"
          placeholder="Benutzername"
          label="Benutzername"
          onChange={(e) => setData({ ...data, username: e.target.value })}
          value={data.username}
          disabled={loading}
        />
        <Input
          name="password"
          type="password"
          placeholder="Passwort"
          label="Passwort"
          onChange={(e) => setData({ ...data, password: e.target.value })}
          value={data.password}
          disabled={loading}
        />
        <div style={{ display: 'flex', gap: '10px', marginTop: '20px' }}>
          <Button
            onClick={login}
            disabled={loading || !data.username || !data.password}
          >
            {loading ? 'Anmelden...' : 'Anmelden'}
          </Button>
          <Button
            onClick={register}
            disabled={loading || !data.username || !data.password}
            variant="outlined"
          >
            {loading ? 'Registrieren...' : 'Registrieren'}
          </Button>
        </div>
      </Container>
    </Base>
  )
}

export default Login
----------------------------------------

FILE: ./src/app/news/[slug]/page.tsx
----------------------------------------
// @ts-nocheck

import React from 'react'
import { Box, Container, Typography } from '@mui/material'
import Base from '../../../layouts/Base'
import Hero from '../../../components/Hero'
import { NEWS } from '../../../mocks/news'
import { notFound } from 'next/navigation'

export default function NewsArticlePage({ params }: any) {
  const { slug } = params

  const news = NEWS.find((item) => item.slug === slug)

  if (!news) {
    notFound()
  }

  return (
    <Base>
      <Container maxWidth="sm">
        <Hero title={news.name} />
        <Box
          sx={{
            backgroundImage: `url(${news.image})`,
            backgroundSize: 'cover',
            backgroundPosition: 'center',
            height: 320,
            width: '100%',
            borderRadius: '8px',
            boxShadow: 1,
            mb: 2,
          }}
        />
        <Box mb={6}>
          <Typography color="text.secondary">{news.text}</Typography>
        </Box>
      </Container>
    </Base>
  )
}

export async function generateStaticParams() {
  return NEWS.map((article) => ({
    slug: article.slug,
  }))
}
----------------------------------------

FILE: ./src/app/news/page.tsx
----------------------------------------
'use client'

import React from 'react'
import { Box } from '@mui/material'

import Base from '../../layouts/Base'
import News from '../../components/home/news'
import Hero from '../../components/Hero'

const Index: React.FC = () => (
  <Base>
    <Hero title="Neuigkeiten" />
    <Box mb={6}>
      <News />
    </Box>
  </Base>
)

export default Index
----------------------------------------

FILE: ./src/app/orders/baking-list/page.tsx
----------------------------------------
'use client'
import React, { useState, useEffect } from 'react'
import {
  Container,
  Typography,
  Box,
  Grid,
  Paper,
  CircularProgress,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Chip,
  Divider,
} from '@mui/material'
import { useRouter } from 'next/navigation'
import PrintIcon from '@mui/icons-material/Print'
import Base from '../../../layouts/Base'
import Hero from '../../../components/Hero'
import Button from '../../../components/button/Index'
import bakeryAPI from '../../../services/bakeryAPI'
import {
  BakingItem,
  ShopItem,
  OrderForBakingList,
} from '../../../services/types'

const BakingList = () => {
  const router = useRouter()
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [bakingItems, setBakingItems] = useState<BakingItem[]>([])
  const [shopItems, setShopItems] = useState<ShopItem[]>([])
  const [orderItems, setOrderItems] = useState<OrderForBakingList[]>([])
  const [date, setDate] = useState(new Date())

  useEffect(() => {
    const fetchBakingList = async () => {
      try {
        setLoading(true)
        setError(null)
        // Get baking list from backend
        const bakingListData = await bakeryAPI.getBakingList(date)

        setBakingItems(bakingListData.allItems || [])
        setShopItems(bakingListData.shopItems || [])
        setOrderItems(bakingListData.orderItems || [])
      } catch (err) {
        console.error('Error fetching baking list:', err)
        setError('Failed to load the baking list. Please try again later.')
      } finally {
        setLoading(false)
      }
    }

    fetchBakingList()
  }, [date])

  const handleNavigateBack = () => {
    router.push('/orders')
  }

  const handlePrint = () => {
    window.print()
  }

  if (loading) {
    return (
      <Base>
        <Container
          sx={{
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            height: '60vh',
          }}
        >
          <CircularProgress />
        </Container>
      </Base>
    )
  }

  if (error) {
    return (
      <Base>
        <Hero title="Daily Baking List" />
        <Container maxWidth="xl">
          <Box
            sx={{
              mb: 3,
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
            }}
          >
            <Button onClick={handleNavigateBack}>← Back to Orders</Button>
          </Box>
          <Paper sx={{ p: 3, textAlign: 'center' }}>
            <Typography color="error" variant="h6">
              {error}
            </Typography>
            <Button onClick={() => window.location.reload()} sx={{ mt: 2 }}>
              Try Again
            </Button>
          </Paper>
        </Container>
      </Base>
    )
  }

  return (
    <Base>
      <Hero title="Daily Baking List" />
      <Container maxWidth="xl" className="print-container">
        <Box
          sx={{
            mb: 3,
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
          }}
        >
          <Button onClick={handleNavigateBack}>← Back to Orders</Button>
          <Button onClick={handlePrint} startIcon={<PrintIcon />}>
            Print Baking List
          </Button>
        </Box>

        <Paper sx={{ p: 3, mb: 4 }} className="print-content">
          <Box sx={{ mb: 3 }}>
            <Typography variant="h4">Daily Baking List</Typography>
            <Typography variant="subtitle1">
              {date.toLocaleDateString('en-US', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric',
              })}
            </Typography>
          </Box>

          {/* Combined Baking Summary */}
          <TableContainer sx={{ mb: 4 }}>
            <Typography variant="h5" gutterBottom>
              Complete Baking Summary
            </Typography>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>
                    <strong>Product</strong>
                  </TableCell>
                  <TableCell align="right">
                    <strong>Quantity to Bake</strong>
                  </TableCell>
                  <TableCell align="right">
                    <strong>For Shop</strong>
                  </TableCell>
                  <TableCell align="right">
                    <strong>For Orders</strong>
                  </TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {bakingItems.length > 0 ? (
                  bakingItems.map((item) => (
                    <TableRow key={item.productId}>
                      <TableCell>{item.name}</TableCell>
                      <TableCell align="right">
                        <Typography variant="h6">
                          {item.totalQuantity}
                        </Typography>
                      </TableCell>
                      <TableCell align="right">{item.shopQuantity}</TableCell>
                      <TableCell align="right">{item.orderQuantity}</TableCell>
                    </TableRow>
                  ))
                ) : (
                  <TableRow>
                    <TableCell colSpan={4} align="center">
                      No items to bake today
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </TableContainer>

          <Divider sx={{ my: 4 }} />

          {/* Shop Inventory */}
          <Box sx={{ mb: 4 }}>
            <Typography variant="h5" gutterBottom>
              Shop Inventory
            </Typography>
            <TableContainer>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>
                      <strong>Product</strong>
                    </TableCell>
                    <TableCell align="right">
                      <strong>Daily Target</strong>
                    </TableCell>
                    <TableCell align="right">
                      <strong>Current Stock</strong>
                    </TableCell>
                    <TableCell align="right">
                      <strong>Quantity to Bake</strong>
                    </TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {shopItems.length > 0 ? (
                    shopItems.map((item) => (
                      <TableRow key={item.productId}>
                        <TableCell>{item.name}</TableCell>
                        <TableCell align="right">{item.dailyTarget}</TableCell>
                        <TableCell align="right">{item.currentStock}</TableCell>
                        <TableCell align="right">{item.shopQuantity}</TableCell>
                      </TableRow>
                    ))
                  ) : (
                    <TableRow>
                      <TableCell colSpan={4} align="center">
                        No shop inventory needed
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </TableContainer>
          </Box>

          {/* Customer Orders */}
          <Box>
            <Typography variant="h5" gutterBottom>
              Customer Orders for {date.toLocaleDateString()}
            </Typography>
            {orderItems.length > 0 ? (
              orderItems.map((order, index) => (
                <Box
                  key={order.orderId}
                  sx={{
                    mb: 3,
                    pb: 2,
                    borderBottom:
                      index < orderItems.length - 1 ? '1px solid #eee' : 'none',
                  }}
                >
                  <Grid container spacing={2} sx={{ mb: 1 }}>
                    <Grid item xs={6}>
                      <Typography variant="subtitle1">
                        <strong>Order #{order.orderId}</strong>
                      </Typography>
                      <Typography>Customer: {order.customerName}</Typography>
                      <Typography>
                        Pickup Time:{' '}
                        {new Date(order.pickupDate).toLocaleTimeString([], {
                          hour: '2-digit',
                          minute: '2-digit',
                        })}
                      </Typography>
                    </Grid>
                    <Grid item xs={6} textAlign="right">
                      <Chip
                        label={order.status}
                        color={
                          order.status === 'Pending'
                            ? 'warning'
                            : order.status === 'Confirmed'
                            ? 'primary'
                            : order.status === 'Completed'
                            ? 'success'
                            : 'default'
                        }
                      />
                    </Grid>
                  </Grid>

                  <TableContainer>
                    <Table size="small">
                      <TableHead>
                        <TableRow>
                          <TableCell>Product</TableCell>
                          <TableCell align="right">Quantity</TableCell>
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {order.items.map((item, itemIndex) => (
                          <TableRow key={`${order.orderId}-${itemIndex}`}>
                            <TableCell>{item.productName}</TableCell>
                            <TableCell align="right">{item.quantity}</TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </TableContainer>

                  {order.notes && (
                    <Box
                      sx={{ mt: 1, p: 1, bgcolor: '#f5f5f5', borderRadius: 1 }}
                    >
                      <Typography variant="body2">
                        <strong>Notes:</strong> {order.notes}
                      </Typography>
                    </Box>
                  )}
                </Box>
              ))
            ) : (
              <Typography>No customer orders for today</Typography>
            )}
          </Box>
        </Paper>
      </Container>
    </Base>
  )
}

export default BakingList
----------------------------------------

FILE: ./src/app/orders/page.tsx
----------------------------------------
'use client'
import React, { useState, useEffect } from 'react'
import {
  Container,
  Typography,
  Box,
  Grid,
  Paper,
  CircularProgress,
  Fab,
  Chip,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
} from '@mui/material'
import { useRouter } from 'next/navigation'
import AddIcon from '@mui/icons-material/Add'
import Base from '../../layouts/Base'
import Hero from '../../components/Hero'
import Button from '../../components/button/Index'
import DataTable from '../../components/dashboard/DataTable'
import bakeryAPI from '../../services/bakeryAPI'
import OrderForm from '../../components/orders/OrderForm'

const OrderManagement = () => {
  const router = useRouter()
  const [loading, setLoading] = useState(true)
  const [orders, setOrders] = useState([])
  const [products, setProducts] = useState([])
  const [showAddForm, setShowAddForm] = useState(false)
  const [selectedOrder, setSelectedOrder] = useState(null)

  // Fetch orders and products
  useEffect(() => {
    const fetchData = async () => {
      try {
        const [ordersData, productsData] = await Promise.all([
          bakeryAPI.getOrders(),
          bakeryAPI.getProducts(),
        ])

        setOrders(ordersData)
        setProducts(productsData)
      } catch (error) {
        console.error('Error fetching data:', error)
      } finally {
        setLoading(false)
      }
    }

    fetchData()
  }, [])

  const handleNavigateBack = () => {
    router.push('/dashboard')
  }

  const handleAddOrder = () => {
    setSelectedOrder(null)
    setShowAddForm(true)
  }

  const handleEditOrder = (order) => {
    setSelectedOrder(order)
    setShowAddForm(true)
  }

  const handleCloseForm = () => {
    setShowAddForm(false)
    setSelectedOrder(null)
  }

  const handleSaveOrder = async (orderData) => {
    setLoading(true)
    try {
      let updatedOrder
      if (selectedOrder) {
        // Update existing order
        updatedOrder = await bakeryAPI.updateOrder(selectedOrder.id, orderData)
        setOrders(
          orders.map((order) =>
            order.id === selectedOrder.id ? updatedOrder : order
          )
        )
      } else {
        // Create new order
        updatedOrder = await bakeryAPI.createOrder(orderData)
        setOrders([...orders, updatedOrder])
      }
      setShowAddForm(false)
      setSelectedOrder(null)
    } catch (error) {
      console.error('Error saving order:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleDeleteOrder = async (orderId) => {
    if (window.confirm('Are you sure you want to delete this order?')) {
      setLoading(true)
      try {
        await bakeryAPI.deleteOrder(orderId)
        setOrders(orders.filter((order) => order.id !== orderId))
      } catch (error) {
        console.error('Error deleting order:', error)
      } finally {
        setLoading(false)
      }
    }
  }

  const handleGenerateBakingList = () => {
    router.push('/dashboard/orders/baking-list')
  }

  if (loading) {
    return (
      <Base>
        <Container
          sx={{
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            height: '60vh',
          }}
        >
          <CircularProgress />
        </Container>
      </Base>
    )
  }

  const formatOrders = () => {
    return orders.map((order) => ({
      id: order?.id,
      customerName: order?.customerName,
      date: new Date(order?.pickupDate).toLocaleDateString(),
      status: order?.status,
      totalItems: order?.items?.reduce((sum, item) => sum + item.quantity, 0),
      totalPrice: `$${order?.totalPrice.toFixed(2)}`,
    }))
  }

  return (
    <Base>
      <Hero title="Order Management" />
      <Container maxWidth="xl">
        <Box
          sx={{
            mb: 3,
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
          }}
        >
          <Button onClick={handleNavigateBack}>← Back to Dashboard</Button>
          <Box>
            <Button
              onClick={handleGenerateBakingList}
              style={{ marginRight: '10px' }}
            >
              Generate Baking List
            </Button>
            <Fab
              color="primary"
              size="medium"
              onClick={handleAddOrder}
              aria-label="add order"
            >
              <AddIcon />
            </Fab>
          </Box>
        </Box>

        {showAddForm ? (
          <OrderForm
            products={products}
            order={selectedOrder}
            onSave={handleSaveOrder}
            onCancel={handleCloseForm}
          />
        ) : (
          <DataTable
            title="Orders"
            subtitle="Manage customer orders"
            columns={[
              { id: 'id', label: 'Order ID', minWidth: 80 },
              { id: 'customerName', label: 'Customer', minWidth: 150 },
              { id: 'date', label: 'Pickup Date', minWidth: 120 },
              {
                id: 'status',
                label: 'Status',
                minWidth: 120,
                format: (value) => (
                  <Chip
                    label={value}
                    color={
                      value === 'Pending'
                        ? 'warning'
                        : value === 'Confirmed'
                        ? 'primary'
                        : value === 'Completed'
                        ? 'success'
                        : value === 'Cancelled'
                        ? 'error'
                        : 'default'
                    }
                    size="small"
                  />
                ),
              },
              {
                id: 'totalItems',
                label: 'Items',
                minWidth: 80,
                align: 'right',
              },
              {
                id: 'totalPrice',
                label: 'Total',
                minWidth: 100,
                align: 'right',
              },
              {
                id: 'actions',
                label: 'Actions',
                minWidth: 150,
                align: 'center',
                format: (_, row) => (
                  <Box>
                    <Button
                      size="small"
                      onClick={() =>
                        handleEditOrder(orders.find((o) => o.id === row.id))
                      }
                      style={{ marginRight: '8px' }}
                    >
                      Edit
                    </Button>
                    <Button
                      size="small"
                      color="error"
                      onClick={() => handleDeleteOrder(row.id)}
                    >
                      Delete
                    </Button>
                  </Box>
                ),
              },
            ]}
            data={formatOrders()}
            searchEnabled={true}
            emptyMessage="No orders available"
          />
        )}
      </Container>
    </Base>
  )
}

export default OrderManagement
----------------------------------------

FILE: ./src/app/page.tsx
----------------------------------------
'use client'
import React from 'react'
import { useRouter } from 'next/navigation'
import {
  Box,
  Typography,
  Container,
  Divider,
  useTheme,
  useMediaQuery,
} from '@mui/material'
import ShoppingBasketIcon from '@mui/icons-material/ShoppingBasket'
import ArrowForwardIcon from '@mui/icons-material/ArrowForward'
import DirectionsIcon from '@mui/icons-material/Directions'
import RestaurantIcon from '@mui/icons-material/Restaurant'
import PhoneIcon from '@mui/icons-material/Phone'

import Hero from '../components/home/hero/Hero'
import Map from '../components/home/map'
import Wochenanfebote from '../components/home/wochenanfebote'
import Products from '../components/home/products'
import Testimonial from '../components/home/testimonial'
import News from '../components/home/news'
import CallToAction from '../components/CallToAction'
import { featuredProducts } from '../mocks/products/featured'
import Button from '../components/button/Index'

export default function HomePage() {
  const router = useRouter()
  const theme = useTheme()
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'))

  // Function to handle navigation to products page
  const navigateToProducts = () => router.push('/products')

  // Function to handle navigation to news page
  const navigateToNews = () => router.push('/news')

  return (
    <>
      <Hero />

      {/* Top CTA for new visitors */}
      <CallToAction
        position="top"
        title="Traditionelle Backkunst seit 1933"
        subtitle="WILLKOMMEN IN UNSERER BÄCKEREI"
        description="Entdecken Sie unsere handwerklich hergestellten Backwaren aus regionalen Zutaten. Frisch gebacken und mit Liebe zubereitet – besuchen Sie uns oder bestellen Sie bequem per Telefon oder WhatsApp."
        primaryAction={{
          label: 'Bestellung aufgeben',
          icon: <PhoneIcon />,
          href: '/bestellen',
          variant: 'contained',
        }}
        secondaryAction={{
          label: 'Wegbeschreibung',
          icon: <DirectionsIcon />,
          href: '#map-section', // Scroll to map section
          variant: 'outlined',
        }}
      />

      <Wochenanfebote />

      <Box id="map-section">
        <Map />
      </Box>

      {/* Products Section */}
      <Box component="section" sx={{ py: { xs: 4, md: 6 } }}>
        <Container>
          <Box
            sx={{
              mb: 3,
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
            }}
          >
            <Typography variant="h3" component="h2" fontWeight="bold">
              Sortiment
            </Typography>
            <Button onClick={navigateToProducts}>Mehr</Button>
          </Box>
          <Products items={featuredProducts} />
        </Container>
      </Box>

      <Testimonial />

      <News
        header={
          <Box
            sx={{
              mb: 3,
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
            }}
          >
            <Typography variant="h3" component="h2" fontWeight="bold">
              Neuigkeiten
            </Typography>
            <Button onClick={navigateToNews}>Mehr</Button>
          </Box>
        }
      />

      {/* Bottom CTA for informed visitors */}
      <CallToAction
        position="bottom"
        title="Probieren Sie unsere frischen Backwaren"
        subtitle="HANDGEMACHT & KÖSTLICH"
        description="Unsere Türen stehen Ihnen offen und wir freuen uns auf Ihren Besuch!"
        primaryAction={{
          label: 'Jetzt bestellen',
          icon: <RestaurantIcon />,
          href: '/bestellen',
          variant: 'contained',
          color: 'primary',
        }}
        secondaryAction={{
          label: 'Mehr erfahren',
          variant: 'outlined',
          href: '/about',
        }}
        backgroundImage="/images/bakery-background.jpg" // Add a background image path if you have one
      />
    </>
  )
}
----------------------------------------

FILE: ./src/app/products/[pid]/not-found.tsx
----------------------------------------
'use client'

import React from 'react'
import { Box, Container, Typography, Button } from '@mui/material'
import { useRouter } from 'next/navigation'

export default function ProductNotFound() {
  const router = useRouter()

  return (
    <Container maxWidth="sm">
      <Box sx={{ my: 8, textAlign: 'center' }}>
        <Typography variant="h4" gutterBottom>
          Produkt nicht gefunden
        </Typography>
        <Typography variant="body1" color="text.secondary" sx={{ mb: 4 }}>
          Entschuldigung, wir konnten das gesuchte Produkt nicht finden.
        </Typography>
        <Button variant="contained" onClick={() => router.push('/products')}>
          Zurück zu Produkten
        </Button>
      </Box>
    </Container>
  )
}
----------------------------------------

FILE: ./src/app/products/[pid]/page.tsx
----------------------------------------
// @ts-nocheck
import React from 'react'
import { notFound } from 'next/navigation'
import Base from '../../../layouts/Base'
import { PRODUCTS } from '../../../mocks/products'
import {
  Box,
  Chip,
  Container,
  Grid,
  Typography,
  Paper,
  Divider,
  Breadcrumbs,
  Link,
} from '@mui/material'
import { formatter } from '../../../utils/formatPrice'
import Button from '../../../components/button/Index'
import Hero from '../../../components/Hero'
import Image from 'next/image'
import HomeIcon from '@mui/icons-material/Home'
import ShoppingBasketIcon from '@mui/icons-material/ShoppingBasket'

export default function ProductPage({ params }) {
  const { pid } = params

  const product = PRODUCTS.find((item) => Number(pid) === Number(item.id))

  if (!product) {
    notFound()
  }

  return (
    <Base>
      <Container>
        {/* Breadcrumb Navigation */}
        <Box sx={{ my: 2 }}>
          <Breadcrumbs aria-label="breadcrumb">
            <Link
              underline="hover"
              color="inherit"
              href="/"
              sx={{ display: 'flex', alignItems: 'center' }}
            >
              <HomeIcon sx={{ mr: 0.5 }} fontSize="small" />
              Home
            </Link>
            <Link
              underline="hover"
              color="inherit"
              href="/products"
              sx={{ display: 'flex', alignItems: 'center' }}
            >
              <ShoppingBasketIcon sx={{ mr: 0.5 }} fontSize="small" />
              Produkte
            </Link>
            <Typography color="text.primary">{product.name}</Typography>
          </Breadcrumbs>
        </Box>

        {/* Product Detail */}
        <Paper
          elevation={2}
          sx={{
            p: 3,
            mb: 4,
            borderRadius: 2,
          }}
        >
          <Grid container spacing={3}>
            {/* Product Image */}
            <Grid item xs={12} md={6}>
              <Box
                sx={styles.imageContainer}
                component="figure"
                aria-label={`Bild von ${product.name}`}
              >
                <Image
                  src={product.image}
                  alt={product.name}
                  style={styles.productImage}
                />
              </Box>
            </Grid>

            {/* Product Information */}
            <Grid item xs={12} md={6}>
              <Box component="article">
                <Box sx={styles.categoryContainer}>
                  <Chip
                    size="small"
                    label={product.category}
                    color="primary"
                    variant="outlined"
                  />
                </Box>

                <Typography
                  variant="h4"
                  component="h1"
                  fontWeight="bold"
                  gutterBottom
                >
                  {product.name}
                </Typography>

                <Typography
                  variant="h5"
                  component="p"
                  color="primary.main"
                  fontWeight="bold"
                  sx={{ mb: 2 }}
                >
                  {formatter.format(product.price)}
                </Typography>

                <Divider sx={{ my: 2 }} />

                <Typography variant="h6" gutterBottom>
                  Produktbeschreibung
                </Typography>

                <Typography variant="body1" paragraph>
                  {product.description ||
                    `${product.name} ist ein hochwertiges Backprodukt aus unserer Bäckerei.
                   Hergestellt aus sorgfältig ausgewählten Zutaten und mit handwerklichem
                   Können gebacken.`}
                </Typography>

                <Box sx={styles.productFeatures}>
                  <Typography variant="subtitle2">
                    • Frisch gebacken in unserer Bäckerei
                  </Typography>
                  <Typography variant="subtitle2">
                    • Aus regionalen Zutaten
                  </Typography>
                  <Typography variant="subtitle2">
                    • Ohne künstliche Zusatzstoffe
                  </Typography>
                </Box>

                {/* Add to Cart Button - Commented out but improved */}
                {/*
                <Button
                  sx={{ mt: 3 }}
                  size="large"
                  fullWidth
                  onClick={() => add(product.id)}
                  aria-label={`${product.name} zum Warenkorb hinzufügen`}
                >
                  Zum Warenkorb
                </Button>
                */}

                <Divider sx={{ my: 2 }} />

                <Typography variant="body2" color="text.secondary">
                  Artikelnummer: {product.id}
                </Typography>
              </Box>
            </Grid>
          </Grid>
        </Paper>
      </Container>
    </Base>
  )
}

const styles = {
  imageContainer: {
    backgroundColor: 'background.paper',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 2,
    padding: 4,
    height: '100%',
    minHeight: 300,
    boxShadow: 'inset 0 0 10px rgba(0,0,0,0.05)',
    margin: 0,
  },
  productImage: {
    maxWidth: '90%',
    maxHeight: '90%',
    objectFit: 'contain',
  },
  categoryContainer: {
    marginBottom: 2,
  },
  productFeatures: {
    mt: 2,
    bgcolor: 'grey.50',
    p: 2,
    borderRadius: 1,
    borderLeft: '4px solid',
    borderColor: 'primary.main',
  },
}

export async function generateStaticParams() {
  return PRODUCTS.map((product) => ({
    pid: product.id.toString(),
  }))
}
----------------------------------------

FILE: ./src/app/products/page.tsx
----------------------------------------
'use client'
import React, { useState } from 'react'
import { Box, Container } from '@mui/material'

import { PRODUCTS } from '../../mocks/products'
import Base from '../../layouts/Base'
import Hero from '../../components/Hero'
import Filter from '../../components/products/Filter'
import Products from '../../components/home/products'

const Index = () => {
  const [products, setProducts] = useState(PRODUCTS)

  return (
    <Base>
      <Hero title="Sortiment" />
      <Box mb={6}>
        <Container>
          <Filter setProducts={setProducts} />
        </Container>
        <Products items={products} />
      </Box>
    </Base>
  )
}

export default Index
----------------------------------------

FILE: ./src/components/CallToAction.tsx
----------------------------------------
'use client'
import React from 'react'
import {
  Box,
  Typography,
  Container,
  Paper,
  Button,
  Grid,
  useTheme,
  useMediaQuery,
  Divider,
} from '@mui/material'
import DirectionsIcon from '@mui/icons-material/Directions'
import ShoppingBasketIcon from '@mui/icons-material/ShoppingBasket'
import PhoneIcon from '@mui/icons-material/Phone'
import { useRouter } from 'next/navigation'

interface CTAAction {
  label: string
  icon?: React.ReactNode
  href: string
  variant?: 'text' | 'outlined' | 'contained'
  color?: 'primary' | 'secondary' | 'success' | 'error' | 'info' | 'warning'
  external?: boolean
}

interface CallToActionProps {
  title: string
  subtitle: string
  description: string
  primaryAction: CTAAction
  secondaryAction?: CTAAction
  backgroundImage?: string
  position?: 'top' | 'bottom'
  compact?: boolean
}

const CallToAction: React.FC<CallToActionProps> = ({
  title,
  subtitle,
  description,
  primaryAction,
  secondaryAction,
  backgroundImage,
  position = 'top',
  compact = false,
}) => {
  const theme = useTheme()
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'))
  const router = useRouter()

  const handleActionClick = (action: CTAAction) => {
    if (action.external) {
      window.open(action.href, '_blank', 'noopener,noreferrer')
    } else {
      router.push(action.href)
    }
  }

  return (
    <Box
      sx={{
        position: 'relative',
        overflow: 'hidden',
        py: compact ? 3 : 5,
        bgcolor: position === 'top' ? 'background.default' : 'background.paper',
      }}
    >
      {/* Background graphics */}
      {position === 'top' && (
        <Box
          sx={{
            position: 'absolute',
            top: -30,
            right: -30,
            width: 150,
            height: 150,
            borderRadius: '50%',
            backgroundColor: 'primary.main',
            opacity: 0.05,
            zIndex: 0,
          }}
        />
      )}

      {position === 'bottom' && (
        <Box
          sx={{
            position: 'absolute',
            bottom: -30,
            left: -30,
            width: 150,
            height: 150,
            borderRadius: '50%',
            backgroundColor: 'primary.main',
            opacity: 0.05,
            zIndex: 0,
          }}
        />
      )}

      <Container maxWidth="lg">
        <Paper
          elevation={3}
          sx={{
            p: { xs: 3, md: 4 },
            borderRadius: 2,
            backgroundImage: backgroundImage
              ? `url(${backgroundImage})`
              : 'none',
            backgroundSize: 'cover',
            backgroundPosition: 'center',
            position: 'relative',
            overflow: 'hidden',
            bgcolor: backgroundImage ? 'rgba(0,0,0,0.7)' : 'background.paper',
            color: backgroundImage ? 'white' : 'inherit',
            '&::before': backgroundImage
              ? {
                  content: '""',
                  position: 'absolute',
                  top: 0,
                  left: 0,
                  right: 0,
                  bottom: 0,
                  backgroundColor: 'rgba(0,0,0,0.6)',
                  zIndex: 1,
                }
              : {},
          }}
        >
          <Grid
            container
            spacing={3}
            alignItems="center"
            justifyContent="space-between"
            sx={{ position: 'relative', zIndex: 2 }}
          >
            {/* Text content */}
            <Grid item xs={12} md={7}>
              <Box>
                <Typography
                  variant="overline"
                  component="p"
                  sx={{
                    color: backgroundImage ? 'grey.300' : 'primary.main',
                    fontWeight: 'bold',
                    mb: 0.5,
                  }}
                >
                  {subtitle}
                </Typography>

                <Typography
                  variant="h4"
                  component="h2"
                  fontWeight="bold"
                  sx={{
                    mb: 1.5,
                    color: backgroundImage ? 'white' : 'text.primary',
                    fontSize: compact
                      ? { xs: '1.5rem', md: '2rem' }
                      : { xs: '1.75rem', md: '2.5rem' },
                  }}
                >
                  {title}
                </Typography>

                <Typography
                  variant="body1"
                  sx={{
                    mb: 3,
                    color: backgroundImage ? 'grey.100' : 'text.secondary',
                    maxWidth: '600px',
                    lineHeight: 1.6,
                  }}
                >
                  {description}
                </Typography>
              </Box>
            </Grid>

            {/* Action buttons */}
            <Grid
              item
              xs={12}
              md={5}
              sx={{
                display: 'flex',
                flexDirection: 'column',
                alignItems: { xs: 'stretch', md: 'flex-end' },
                gap: 2,
              }}
            >
              <Button
                variant={primaryAction.variant || 'contained'}
                color={primaryAction.color || 'primary'}
                size={compact ? 'medium' : 'large'}
                startIcon={primaryAction.icon}
                onClick={() => handleActionClick(primaryAction)}
                fullWidth={isMobile}
                sx={{
                  px: 3,
                  py: compact ? 1 : 1.5,
                  minWidth: { md: '200px' },
                  fontWeight: 'bold',
                  fontSize: compact ? 'inherit' : '1.1rem',
                  borderRadius: '8px',
                }}
              >
                {primaryAction.label}
              </Button>

              {secondaryAction && (
                <Button
                  variant={secondaryAction.variant || 'outlined'}
                  color={secondaryAction.color || 'primary'}
                  size={compact ? 'medium' : 'large'}
                  startIcon={secondaryAction.icon}
                  onClick={() => handleActionClick(secondaryAction)}
                  fullWidth={isMobile}
                  sx={{
                    px: 3,
                    py: compact ? 1 : 1.5,
                    minWidth: { md: '200px' },
                    fontWeight: 'medium',
                    borderRadius: '8px',
                    borderColor: backgroundImage ? 'white' : undefined,
                    color: backgroundImage ? 'white' : undefined,
                    '&:hover': {
                      borderColor: backgroundImage ? 'grey.300' : undefined,
                      bgcolor: backgroundImage
                        ? 'rgba(255,255,255,0.1)'
                        : undefined,
                    },
                  }}
                >
                  {secondaryAction.label}
                </Button>
              )}
            </Grid>
          </Grid>
        </Paper>
      </Container>
    </Box>
  )
}

export default CallToAction
----------------------------------------

FILE: ./src/components/Hero.tsx
----------------------------------------
import { Box, Container, Typography } from '@mui/material'
import React from 'react'
import Divider from './icons/brand/Divider'

interface Props {
	title: string
}

const Hero: React.FC<Props> = (props) => {
	const { title } = props

  return (
    <Box sx={{
			pt: { xs: '120px', md: '160px'},
			pb: 3
		}}>
			<Container sx={{
				display: 'flex',
				flexDirection: 'column',
				alignItems: 'center',

        '& svg': {
          maxWidth: '80vw',
        }
			}}>
				<Typography variant='h3' textAlign='center' sx={{
          fontSize: { xs: '8vw', md: '3rem' }
        }}>
          {title}
        </Typography>
				<Divider />
			</Container>
		</Box>
  )
}

export default Hero----------------------------------------

FILE: ./src/components/Input.tsx
----------------------------------------
import React from 'react'
import { TextFieldProps, TextField } from '@mui/material'

const Input: React.FC<TextFieldProps> = (props) => {
  return (
    <TextField 
      {...props}
      variant='filled'
      fullWidth
      sx={{
        mb: 2,
        boxShadow: 1,
        overflow: 'hidden',
        borderRadius: '8px',
        
        '& .MuiFilledInput-root': {
          bgcolor: 'white',
        },

        '& svg': {
          mr: '6px',
          mt: '14px',
        },

        '& .MuiInputBase-multiline': {
          alignItems: 'flex-start',

          '& svg': {
            mt: '2px'
          },
        }
      }} 
    />
  )
}

export default Input----------------------------------------

FILE: ./src/components/MarkdownDisplay.tsx
----------------------------------------
'use client'
import React, { CSSProperties } from 'react'
import ReactMarkdown from 'react-markdown'
import remarkGfm from 'remark-gfm'
import { Typography, Box, Paper } from '@mui/material'
import type { Components } from 'react-markdown'

interface MarkdownDisplayProps {
  content: string
  title?: string
}

// Interface for code element props from react-markdown
interface CodeProps {
  node?: any
  inline?: boolean
  className?: string
  children?: React.ReactNode
}

const MarkdownDisplay: React.FC<MarkdownDisplayProps> = ({
  content,
  title,
}) => {
  // Define components for ReactMarkdown with proper type handling
  const components: Components = {
    h1: ({ children }) => (
      <Typography variant="h2" gutterBottom>
        {children}
      </Typography>
    ),
    h2: ({ children }) => (
      <Typography variant="h3" gutterBottom sx={styles.heading}>
        {children}
      </Typography>
    ),
    h3: ({ children }) => (
      <Typography variant="h4" gutterBottom sx={styles.heading}>
        {children}
      </Typography>
    ),
    h4: ({ children }) => (
      <Typography variant="h5" gutterBottom>
        {children}
      </Typography>
    ),
    h5: ({ children }) => (
      <Typography variant="h6" gutterBottom>
        {children}
      </Typography>
    ),
    h6: ({ children }) => (
      <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
        {children}
      </Typography>
    ),
    p: ({ children }) => (
      <Typography variant="body1" paragraph>
        {children}
      </Typography>
    ),
    a: ({ href, children }) => (
      <a href={href} style={inlineStyles.link}>
        {children}
      </a>
    ),
    table: ({ children }) => (
      <table style={inlineStyles.table}>{children}</table>
    ),
    thead: ({ children }) => (
      <thead style={inlineStyles.tableHeader}>{children}</thead>
    ),
    th: ({ children }) => <th style={inlineStyles.tableCell}>{children}</th>,
    td: ({ children }) => <td style={inlineStyles.tableCell}>{children}</td>,
    ul: ({ children }) => <ul style={inlineStyles.list}>{children}</ul>,
    ol: ({ children }) => <ol style={inlineStyles.list}>{children}</ol>,
    li: ({ children }) => <li style={inlineStyles.listItem}>{children}</li>,
    blockquote: ({ children }) => <Box sx={styles.blockquote}>{children}</Box>,
    // Use a proper type for the code component
    code: (props: CodeProps) => {
      const { inline, children } = props
      return inline ? (
        <code style={inlineStyles.inlineCode}>{children}</code>
      ) : (
        <Box component="pre" sx={styles.codeBlock}>
          {children}
        </Box>
      )
    },
    hr: () => <Box component="hr" sx={styles.divider} />,
  }

  return (
    <Paper elevation={1} sx={{ p: 4, my: 3 }}>
      {title && (
        <Typography variant="h4" component="h1" gutterBottom>
          {title}
        </Typography>
      )}
      <Box sx={styles.markdownContainer}>
        <ReactMarkdown remarkPlugins={[remarkGfm]} components={components}>
          {content}
        </ReactMarkdown>
      </Box>
    </Paper>
  )
}

// MUI sx prop styles
const styles = {
  markdownContainer: {
    '& img': {
      maxWidth: '100%',
      height: 'auto',
    },
  },
  heading: {
    mt: 3,
    mb: 2,
    borderBottom: '1px solid',
    borderColor: 'divider',
    pb: 1,
  },
  blockquote: {
    pl: 2,
    py: 0.5,
    borderLeft: '4px solid',
    borderColor: 'divider',
    fontStyle: 'italic',
    bgcolor: 'rgba(0, 0, 0, 0.03)',
    my: 2,
  },
  codeBlock: {
    backgroundColor: 'rgba(0, 0, 0, 0.06)',
    p: 2,
    borderRadius: '4px',
    overflowX: 'auto',
    fontFamily: 'monospace',
    whiteSpace: 'pre-wrap',
    wordWrap: 'break-word',
  },
  divider: {
    my: 2,
    border: 'none',
    height: '1px',
    backgroundColor: 'rgba(0, 0, 0, 0.12)',
  },
}

// Inline styles with proper React CSSProperties type
const inlineStyles: Record<string, CSSProperties> = {
  link: {
    color: '#1976d2',
    textDecoration: 'none',
  },
  table: {
    borderCollapse: 'collapse' as const,
    width: '100%',
    margin: '16px 0',
    border: '1px solid #ddd',
  },
  tableHeader: {
    backgroundColor: 'rgba(0, 0, 0, 0.04)',
  },
  tableCell: {
    padding: '8px',
    border: '1px solid #ddd',
  },
  list: {
    marginLeft: '24px',
    marginBottom: '16px',
  },
  listItem: {
    margin: '4px 0',
  },
  inlineCode: {
    backgroundColor: 'rgba(0, 0, 0, 0.06)',
    padding: '2px 4px',
    borderRadius: '3px',
    fontFamily: 'monospace',
  },
}

export default MarkdownDisplay
----------------------------------------

FILE: ./src/components/Socials.tsx
----------------------------------------
import React from 'react'
import { Box } from '@mui/material'

import Facebook from './icons/socials/Facebook'
import Instagram from './icons/socials/Instagram'
import Whatsapp from './icons/socials/Whatsapp'

const SOCIALS = [
	{
		link: 'https://www.facebook.com/profile.php?id=100068876322773',
		icon: <Facebook />
	},
	{
		link: 'https://www.instagram.com/backereiheusser',
		icon: <Instagram />
	},
	{
		link: 'https://wa.me/015226621236',
		icon: <Whatsapp />
	},
]

const Socials: React.FC = () => {
  return (
    <Box sx={styles.root}>
			{SOCIALS.map((item) => (
				<a key={item.link} href={item.link} target="_blank" rel="noreferrer">
					{item.icon}
				</a>
			))}
    </Box>
  )
}

const styles = {
	root: {
		mb: 2,

		'& a': {
			color: 'text.secondary',
			
			'&:hover': {
				color :'primary.main'
			}
		},

		'& svg': {
			minHeight: 24,
			mr: 2
		}
	}
}

export default Socials----------------------------------------

FILE: ./src/components/bakery/WorkflowCreationForm.tsx
----------------------------------------
import React, { useState } from 'react'
import {
  Box,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Button,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Typography,
  Divider,
  Grid,
  Paper,
  Chip,
  Alert,
} from '@mui/material'
import {
  parseWorkflowDefinition,
  generateWorkflowPlan,
} from '../../utils/workflowUtils'

interface WorkflowCreationFormProps {
  open: boolean
  onClose: () => void
  onSubmit: (workflowData: any) => void
}

const WorkflowCreationForm: React.FC<WorkflowCreationFormProps> = ({
  open,
  onClose,
  onSubmit,
}) => {
  const [selectedTemplate, setSelectedTemplate] = useState('')
  const [product, setProduct] = useState('')
  const [quantity, setQuantity] = useState(0)
  const [startDate, setStartDate] = useState('')
  const [startTime, setStartTime] = useState('')
  const [assignedTo, setAssignedTo] = useState('')
  const [customYaml, setCustomYaml] = useState('')
  const [previewMode, setPreviewMode] = useState(false)
  const [workflowPreview, setWorkflowPreview] = useState<any>(null)
  const [error, setError] = useState<string | null>(null)

  const templates = [
    { id: 'croissant_production', name: 'Croissant Produktion' },
    { id: 'sourdough_bread', name: 'Sauerteigbrot' },
    { id: 'baguette', name: 'Baguette' },
    { id: 'ciabatta', name: 'Ciabatta' },
    { id: 'custom', name: 'Benutzerdefiniert' },
  ]

  const staff = [
    { id: 'franz', name: 'Franz Müller' },
    { id: 'maria', name: 'Maria Schmidt' },
    { id: 'lisa', name: 'Lisa Wagner' },
    { id: 'thomas', name: 'Thomas Weber' },
  ]

  // Sample YAML for custom workflow
  const sampleYaml = `# Beispiel für Croissant-Prozess
name: croissant_production
version: 1.2
steps:
  - name: teig_vorbereiten
    timeout: 30m
    activities:
      - mixen
      - kneten
  - name: erste_gehzeit
    type: sleep
    duration: 2h
    conditions:
      - temp > 22°C: 1.5h
  - name: formen
    parallel:
      - schneiden
      - rollen
  - name: zweite_gehzeit
    type: sleep
    duration: 1h
  - name: backen
    timeout: 20m
    params:
      temp: 190°C`

  const handlePreview = () => {
    try {
      setError(null)

      // Validate inputs
      if (!selectedTemplate) {
        setError('Bitte wählen Sie eine Vorlage aus')
        return
      }

      if (!product) {
        setError('Bitte geben Sie einen Produktnamen ein')
        return
      }

      if (quantity <= 0) {
        setError('Die Menge muss größer als 0 sein')
        return
      }

      if (!assignedTo) {
        setError('Bitte wählen Sie einen Verantwortlichen aus')
        return
      }

      if (!startDate || !startTime) {
        setError('Bitte wählen Sie Datum und Zeit aus')
        return
      }

      if (selectedTemplate === 'custom' && !customYaml.trim()) {
        setError('Bitte geben Sie eine YAML-Definition ein')
        return
      }

      // Create date from inputs
      const startDateTime = new Date(`${startDate}T${startTime}`)
      if (isNaN(startDateTime.getTime())) {
        setError('Ungültiges Datum oder ungültige Zeit')
        return
      }

      let workflowDefinition

      if (selectedTemplate === 'custom') {
        try {
          workflowDefinition = parseWorkflowDefinition(customYaml)
        } catch (err) {
          setError('Fehler beim Parsen der YAML-Definition')
          return
        }
      } else {
        // In a real app, you would fetch the template definition
        // For demo, we'll simulate predefined workflows
        const predefinedYaml =
          selectedTemplate === 'croissant_production'
            ? sampleYaml
            : `name: ${selectedTemplate}\nversion: 1.0`

        workflowDefinition = parseWorkflowDefinition(predefinedYaml)
      }

      const workflowPlan = generateWorkflowPlan(
        workflowDefinition,
        startDateTime
      )
      workflowPlan.product = product
      workflowPlan.batchSize = quantity
      workflowPlan.assignedTo =
        staff.find((s) => s.id === assignedTo)?.name || ''

      setWorkflowPreview(workflowPlan)
      setPreviewMode(true)
    } catch (error) {
      console.error('Error generating preview:', error)
      setError('Ein Fehler ist aufgetreten beim Erstellen der Vorschau')
    }
  }

  const handleBack = () => {
    setPreviewMode(false)
    setWorkflowPreview(null)
    setError(null)
  }

  const handleSubmit = () => {
    if (workflowPreview) {
      onSubmit(workflowPreview)
      onClose()
    } else {
      handlePreview()
    }
  }

  const handleTemplateChange = (
    event: React.ChangeEvent<{ value: unknown }>
  ) => {
    const value = event.target.value as string
    setSelectedTemplate(value)

    // Set default YAML for custom template
    if (value === 'custom' && !customYaml) {
      setCustomYaml(sampleYaml)
    }
  }

  // Initialize date and time if they're empty
  if (!startDate) {
    const today = new Date()
    const yyyy = today.getFullYear()
    const mm = String(today.getMonth() + 1).padStart(2, '0')
    const dd = String(today.getDate()).padStart(2, '0')
    setStartDate(`${yyyy}-${mm}-${dd}`)

    const hours = String(today.getHours()).padStart(2, '0')
    const minutes = String(today.getMinutes()).padStart(2, '0')
    setStartTime(`${hours}:${minutes}`)
  }

  return (
    <Dialog open={open} onClose={onClose} maxWidth="md" fullWidth>
      <DialogTitle>
        {previewMode
          ? 'Vorschau: Neuer Produktionsprozess'
          : 'Neuen Produktionsprozess erstellen'}
      </DialogTitle>
      <DialogContent>
        {error && (
          <Alert severity="error" sx={{ mt: 2, mb: 2 }}>
            {error}
          </Alert>
        )}

        {!previewMode ? (
          <Box sx={{ pt: 2 }}>
            <Grid container spacing={3}>
              <Grid item xs={12} sm={6}>
                <FormControl fullWidth>
                  <InputLabel>Vorlage auswählen</InputLabel>
                  <Select
                    value={selectedTemplate}
                    label="Vorlage auswählen"
                    onChange={(e) =>
                      setSelectedTemplate(e.target.value as string)
                    }
                  >
                    {templates.map((template) => (
                      <MenuItem key={template.id} value={template.id}>
                        {template.name}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>

              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  label="Produkt"
                  value={product}
                  onChange={(e) => setProduct(e.target.value)}
                  placeholder="z.B. Butter Croissants"
                />
              </Grid>

              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  label="Menge"
                  type="number"
                  InputProps={{ inputProps: { min: 1 } }}
                  value={quantity || ''}
                  onChange={(e) => setQuantity(parseInt(e.target.value) || 0)}
                  placeholder="Anzahl der Einheiten"
                />
              </Grid>

              <Grid item xs={12} sm={6}>
                <FormControl fullWidth>
                  <InputLabel>Verantwortlicher</InputLabel>
                  <Select
                    value={assignedTo}
                    label="Verantwortlicher"
                    onChange={(e) => setAssignedTo(e.target.value as string)}
                  >
                    {staff.map((person) => (
                      <MenuItem key={person.id} value={person.id}>
                        {person.name}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>

              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  label="Datum"
                  type="date"
                  value={startDate}
                  onChange={(e) => setStartDate(e.target.value)}
                  InputLabelProps={{ shrink: true }}
                />
              </Grid>

              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  label="Zeit"
                  type="time"
                  value={startTime}
                  onChange={(e) => setStartTime(e.target.value)}
                  InputLabelProps={{ shrink: true }}
                />
              </Grid>

              {selectedTemplate === 'custom' && (
                <Grid item xs={12}>
                  <Typography variant="subtitle2" gutterBottom>
                    Workflow Definition (YAML)
                  </Typography>
                  <TextField
                    fullWidth
                    multiline
                    rows={10}
                    value={customYaml}
                    onChange={(e) => setCustomYaml(e.target.value)}
                    placeholder="Geben Sie hier Ihre YAML-Definition ein"
                    variant="outlined"
                    sx={{ fontFamily: 'monospace' }}
                  />
                  <Typography
                    variant="caption"
                    color="text.secondary"
                    sx={{ mt: 1, display: 'block' }}
                  >
                    Definieren Sie Ihren Workflow mit Schritten, Zeitangaben und
                    Bedingungen
                  </Typography>
                </Grid>
              )}
            </Grid>
          </Box>
        ) : (
          <Box sx={{ pt: 2 }}>
            <Paper variant="outlined" sx={{ p: 2, mb: 3 }}>
              <Typography variant="h6" gutterBottom>
                {workflowPreview.product}
              </Typography>
              <Divider sx={{ my: 1 }} />

              <Grid container spacing={2}>
                <Grid item xs={6}>
                  <Typography variant="body2" color="text.secondary">
                    Workflow
                  </Typography>
                  <Typography variant="body1">
                    {workflowPreview.name} v{workflowPreview.version}
                  </Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography variant="body2" color="text.secondary">
                    Menge
                  </Typography>
                  <Typography variant="body1">
                    {workflowPreview.batchSize} Stk.
                  </Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography variant="body2" color="text.secondary">
                    Verantwortlich
                  </Typography>
                  <Typography variant="body1">
                    {workflowPreview.assignedTo}
                  </Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography variant="body2" color="text.secondary">
                    Startzeit
                  </Typography>
                  <Typography variant="body1">
                    {startDate} um {startTime} Uhr
                  </Typography>
                </Grid>
              </Grid>
            </Paper>

            <Typography variant="h6" gutterBottom>
              Prozessschritte
            </Typography>
            {/* In a real app, you'd show a preview of the workflow steps */}
            <Box sx={{ mb: 2 }}>
              {workflowPreview.steps && workflowPreview.steps.length > 0 ? (
                workflowPreview.steps.map((step: any, index: number) => (
                  <Paper
                    key={index}
                    variant="outlined"
                    sx={{
                      p: 2,
                      mb: 1,
                      display: 'flex',
                      justifyContent: 'space-between',
                      alignItems: 'center',
                    }}
                  >
                    <Box>
                      <Typography variant="subtitle2">
                        {index + 1}. {step.name.replace(/_/g, ' ')}
                      </Typography>
                      {step.type === 'sleep' && (
                        <Chip
                          label="Ruhezeit"
                          size="small"
                          color="info"
                          sx={{ mr: 1 }}
                        />
                      )}
                      {step.duration && (
                        <Typography variant="body2" color="text.secondary">
                          Dauer: {step.duration}
                        </Typography>
                      )}
                    </Box>
                    <Chip label="Ausstehend" size="small" color="default" />
                  </Paper>
                ))
              ) : (
                <Typography variant="body2" color="text.secondary">
                  Keine Prozessschritte definiert
                </Typography>
              )}
            </Box>

            <Alert severity="info">
              Dies ist eine Vorschau des Workflows. Klicken Sie auf "Erstellen",
              um den Prozess zu starten.
            </Alert>
          </Box>
        )}
      </DialogContent>
      <DialogActions>
        {previewMode ? (
          <>
            <Button onClick={handleBack}>Zurück</Button>
            <Button onClick={handleSubmit} variant="contained">
              Produktionsprozess erstellen
            </Button>
          </>
        ) : (
          <>
            <Button onClick={onClose}>Abbrechen</Button>
            <Button onClick={handlePreview} variant="contained">
              Vorschau
            </Button>
          </>
        )}
      </DialogActions>
    </Dialog>
  )
}

export default WorkflowCreationForm
----------------------------------------

FILE: ./src/components/bakery/WorkflowDetail.tsx
----------------------------------------
import React, { useState } from 'react'
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  IconButton,
  Chip,
  ToggleButtonGroup,
  ToggleButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
} from '@mui/material'
import {
  PlayArrow,
  Pause,
  Timeline as TimelineIcon,
  ViewList,
  Edit as EditIcon,
  Today as TodayIcon,
} from '@mui/icons-material'
import { format } from 'date-fns'
import { Workflow, WorkflowStep } from '../../types/workflow'
import WorkflowStepTable from './WorkflowStepTable'
import WorkflowTimeline from './WorkflowTimeline'
import {
  updateWorkflowStep,
  pauseWorkflow,
  startWorkflow,
} from '../../services/workflowService'

interface WorkflowDetailProps {
  workflow: Workflow
  viewMode: 'table' | 'timeline'
  onViewModeChange: (mode: 'table' | 'timeline') => void
  onUpdateWorkflow: (workflow: Workflow) => void
}

const WorkflowDetail: React.FC<WorkflowDetailProps> = ({
  workflow,
  viewMode,
  onViewModeChange,
  onUpdateWorkflow,
}) => {
  const [loading, setLoading] = useState(false)
  const [editingNotes, setEditingNotes] = useState<{
    stepId: string
    notes: string
  } | null>(null)

  const handleTogglePlayPause = async () => {
    setLoading(true)
    try {
      let updatedWorkflow

      if (workflow.status === 'paused') {
        updatedWorkflow = await startWorkflow(workflow.id)
      } else {
        updatedWorkflow = await pauseWorkflow(workflow.id)
      }

      onUpdateWorkflow(updatedWorkflow)
    } catch (error) {
      console.error('Error updating workflow:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleCompleteStep = async (stepId: string) => {
    setLoading(true)
    try {
      const stepIndex = workflow.steps.findIndex((s) => s.id === stepId)
      if (stepIndex === -1) return

      const updatedWorkflow = await updateWorkflowStep(workflow.id, stepId, {
        status: 'completed',
        progress: 100,
        endTime: new Date(),
      })

      // Start next step if available
      if (stepIndex < workflow.steps.length - 1) {
        const nextStepId = workflow.steps[stepIndex + 1].id
        const finalWorkflow = await updateWorkflowStep(
          updatedWorkflow.id,
          nextStepId,
          {
            status: 'in-progress',
            progress: 0,
            startTime: new Date(),
          }
        )
        onUpdateWorkflow(finalWorkflow)
      } else {
        onUpdateWorkflow(updatedWorkflow)
      }
    } catch (error) {
      console.error('Error completing step:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleOpenNotesDialog = (step: WorkflowStep) => {
    setEditingNotes({
      stepId: step.id,
      notes: step.notes || '',
    })
  }

  const handleSaveNotes = async () => {
    if (!editingNotes) return

    setLoading(true)
    try {
      const updatedWorkflow = await updateWorkflowStep(
        workflow.id,
        editingNotes.stepId,
        { notes: editingNotes.notes }
      )
      onUpdateWorkflow(updatedWorkflow)
      setEditingNotes(null)
    } catch (error) {
      console.error('Error updating notes:', error)
    } finally {
      setLoading(false)
    }
  }

  return (
    <>
      <Card sx={{ mb: 3 }}>
        <CardContent>
          <Box
            sx={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              mb: 2,
            }}
          >
            <Box>
              <Typography variant="h5" gutterBottom>
                {workflow.product}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                <TodayIcon
                  sx={{ fontSize: 16, verticalAlign: 'text-bottom', mr: 0.5 }}
                />
                {format(new Date(workflow.startTime), 'EEEE, d. MMMM yyyy')}
                {' • '}Workflow: {workflow.name} (v{workflow.version}){' • '}
                Charge: {workflow.batchSize}
                {' • '}Verantwortlich: {workflow.assignedTo}
              </Typography>
            </Box>
            <Box>
              <Button
                variant="contained"
                startIcon={
                  workflow.status === 'paused' ? <PlayArrow /> : <Pause />
                }
                color="primary"
                sx={{ mr: 1 }}
                onClick={handleTogglePlayPause}
                disabled={
                  loading ||
                  workflow.status === 'completed' ||
                  workflow.status === 'planned'
                }
              >
                {workflow.status === 'paused' ? 'Fortsetzen' : 'Pausieren'}
              </Button>
              <ToggleButtonGroup
                size="small"
                value={viewMode}
                exclusive
                onChange={(_, newMode) => newMode && onViewModeChange(newMode)}
              >
                <ToggleButton value="table">
                  <ViewList />
                </ToggleButton>
                <ToggleButton value="timeline">
                  <TimelineIcon />
                </ToggleButton>
              </ToggleButtonGroup>
            </Box>
          </Box>

          {/* Status badges */}
          <Box sx={{ display: 'flex', gap: 1, mt: 1, mb: 3 }}>
            <Chip
              label={workflow.status}
              color={
                workflow.status === 'completed'
                  ? 'success'
                  : workflow.status === 'in-progress'
                  ? 'primary'
                  : workflow.status === 'paused'
                  ? 'warning'
                  : 'default'
              }
              sx={{ textTransform: 'capitalize' }}
            />
            {workflow.status !== 'completed' && (
              <Chip
                label={`Fertig: ${format(
                  new Date(workflow.estimatedEndTime),
                  "HH:mm 'Uhr'"
                )}`}
                variant="outlined"
              />
            )}
          </Box>

          {/* Workflow visualization */}
          {viewMode === 'table' ? (
            <WorkflowStepTable
              steps={workflow.steps}
              onComplete={handleCompleteStep}
              onEditNotes={handleOpenNotesDialog}
              disabled={
                loading ||
                workflow.status === 'paused' ||
                workflow.status === 'completed'
              }
            />
          ) : (
            <WorkflowTimeline workflow={workflow} />
          )}
        </CardContent>
      </Card>

      {/* Notes editing dialog */}
      <Dialog
        open={editingNotes !== null}
        onClose={() => setEditingNotes(null)}
      >
        <DialogTitle>Notizen bearbeiten</DialogTitle>
        <DialogContent>
          <TextField
            fullWidth
            multiline
            rows={4}
            label="Notizen"
            variant="outlined"
            margin="normal"
            value={editingNotes?.notes || ''}
            onChange={(e) =>
              setEditingNotes((prev) =>
                prev ? { ...prev, notes: e.target.value } : null
              )
            }
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setEditingNotes(null)}>Abbrechen</Button>
          <Button
            onClick={handleSaveNotes}
            variant="contained"
            disabled={loading}
          >
            Speichern
          </Button>
        </DialogActions>
      </Dialog>
    </>
  )
}

export default WorkflowDetail
----------------------------------------

FILE: ./src/components/bakery/WorkflowSidebar.tsx
----------------------------------------
import React from 'react'
import {
  Box,
  Card,
  CardContent,
  Typography,
  Chip,
  LinearProgress,
  Divider,
  Button,
  Tabs,
  Tab,
  useTheme,
} from '@mui/material'
import {
  PlayArrow,
  Schedule,
  TimerOutlined,
  Add as AddIcon,
} from '@mui/icons-material'
import { Workflow } from '../../types/workflow'
import {
  calculateProgress,
  getTimeRemaining,
  getStatusColor,
} from '../../utils/workflowUtils'

interface WorkflowSidebarProps {
  workflows: Workflow[]
  selectedWorkflow: Workflow | null
  activeTab: number
  onTabChange: (event: React.SyntheticEvent, newValue: number) => void
  onSelectWorkflow: (workflow: Workflow) => void
}

const WorkflowSidebar: React.FC<WorkflowSidebarProps> = ({
  workflows,
  selectedWorkflow,
  activeTab,
  onTabChange,
  onSelectWorkflow,
}) => {
  const theme = useTheme()

  // Calculate production statistics
  const activeCount = workflows.filter(
    (wf) => wf.status === 'in-progress'
  ).length
  const plannedCount = workflows.filter((wf) => wf.status === 'planned').length

  // Group products for today's production
  const productionToday = workflows.reduce((acc, workflow) => {
    const isToday =
      new Date(workflow.startTime).toDateString() === new Date().toDateString()

    if (isToday) {
      if (!acc[workflow.product]) {
        acc[workflow.product] = workflow.batchSize
      } else {
        acc[workflow.product] += workflow.batchSize
      }
    }
    return acc
  }, {} as Record<string, number>)

  return (
    <>
      <Card sx={{ mb: 3 }}>
        <CardContent>
          <Box
            sx={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              mb: 2,
            }}
          >
            <Typography variant="h6">Aktive Prozesse</Typography>
          </Box>

          <Tabs
            value={activeTab}
            onChange={onTabChange}
            variant="fullWidth"
            textColor="primary"
            indicatorColor="primary"
            sx={{ mb: 2 }}
          >
            <Tab icon={<PlayArrow />} label="Aktiv" />
            <Tab icon={<Schedule />} label="Geplant" />
          </Tabs>

          {workflows
            .filter((wf) =>
              activeTab === 0
                ? wf.status === 'in-progress' || wf.status === 'paused'
                : wf.status === 'planned'
            )
            .map((workflow) => (
              <Card
                key={workflow.id}
                variant="outlined"
                sx={{
                  mb: 1,
                  cursor: 'pointer',
                  border:
                    selectedWorkflow?.id === workflow.id
                      ? `2px solid ${theme.palette.primary.main}`
                      : undefined,
                }}
                onClick={() => onSelectWorkflow(workflow)}
              >
                <CardContent sx={{ p: 2, '&:last-child': { pb: 2 } }}>
                  <Box
                    sx={{
                      display: 'flex',
                      justifyContent: 'space-between',
                      alignItems: 'center',
                      mb: 1,
                    }}
                  >
                    <Typography variant="subtitle2" noWrap>
                      {workflow.product}
                    </Typography>
                    <Chip
                      label={workflow.status}
                      size="small"
                      color={getStatusColor(workflow.status) as any}
                      sx={{ textTransform: 'capitalize' }}
                    />
                  </Box>
                  <Box
                    sx={{
                      display: 'flex',
                      justifyContent: 'space-between',
                      mb: 1,
                    }}
                  >
                    <Typography variant="body2" color="text.secondary">
                      Menge: {workflow.batchSize}
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      <TimerOutlined
                        sx={{ fontSize: 14, verticalAlign: 'middle', mr: 0.5 }}
                      />
                      {getTimeRemaining(workflow)}
                    </Typography>
                  </Box>
                  <LinearProgress
                    variant="determinate"
                    value={calculateProgress(workflow)}
                    sx={{ height: 6, borderRadius: 3 }}
                  />
                </CardContent>
              </Card>
            ))}
        </CardContent>
      </Card>

      <Card>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            Produktionsübersicht
          </Typography>
          <Box sx={{ mb: 2 }}>
            <Typography variant="body2" color="text.secondary">
              Aktive Prozesse
            </Typography>
            <Typography variant="h5">{activeCount}</Typography>
          </Box>
          <Box sx={{ mb: 2 }}>
            <Typography variant="body2" color="text.secondary">
              Geplante Prozesse
            </Typography>
            <Typography variant="h5">{plannedCount}</Typography>
          </Box>
          <Divider sx={{ my: 2 }} />
          <Box>
            <Typography variant="body2" color="text.secondary">
              Fertigung heute
            </Typography>
            {Object.entries(productionToday).map(([product, count]) => (
              <Box
                key={product}
                sx={{ display: 'flex', justifyContent: 'space-between', mt: 1 }}
              >
                <Typography>{product}</Typography>
                <Typography>{count} Stk.</Typography>
              </Box>
            ))}

            {Object.keys(productionToday).length === 0 && (
              <Typography
                variant="body2"
                sx={{ mt: 1, fontStyle: 'italic', color: 'text.secondary' }}
              >
                Keine Produktion für heute geplant
              </Typography>
            )}
          </Box>

          <Divider sx={{ my: 2 }} />
          <Typography variant="body2" color="text.secondary" gutterBottom>
            Temperaturen
          </Typography>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 1 }}>
            <Typography>Kühlraum</Typography>
            <Typography>4°C</Typography>
          </Box>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 1 }}>
            <Typography>Backstube</Typography>
            <Typography>22°C</Typography>
          </Box>
        </CardContent>
      </Card>
    </>
  )
}

export default WorkflowSidebar
----------------------------------------

FILE: ./src/components/bakery/WorkflowStepTable.tsx
----------------------------------------
import React from 'react'
import {
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  IconButton,
  Chip,
  Box,
  Typography,
  LinearProgress,
  Tooltip,
  Badge,
} from '@mui/material'
import {
  CheckCircle,
  AccessTime,
  Edit as EditIcon,
  Room as RoomIcon,
  Notes as NotesIcon,
  Settings as SettingsIcon,
} from '@mui/icons-material'
import { format } from 'date-fns'
import { WorkflowStep } from '../../types/workflow'

interface WorkflowStepTableProps {
  steps: WorkflowStep[]
  onComplete: (stepId: string) => void
  onEditNotes: (step: WorkflowStep) => void
  disabled: boolean
}

const WorkflowStepTable: React.FC<WorkflowStepTableProps> = ({
  steps,
  onComplete,
  onEditNotes,
  disabled,
}) => {
  return (
    <TableContainer component={Paper} variant="outlined">
      <Table>
        <TableHead>
          <TableRow>
            <TableCell sx={{ fontWeight: 'bold' }}>Schritt</TableCell>
            <TableCell sx={{ fontWeight: 'bold' }}>Typ</TableCell>
            <TableCell sx={{ fontWeight: 'bold' }}>Dauer</TableCell>
            <TableCell sx={{ fontWeight: 'bold' }}>Status</TableCell>
            <TableCell sx={{ fontWeight: 'bold' }}>Details</TableCell>
            <TableCell sx={{ fontWeight: 'bold' }}>Aktionen</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {steps.map((step) => (
            <TableRow
              key={step.id}
              sx={{
                bgcolor:
                  step.status === 'completed'
                    ? 'success.50'
                    : step.status === 'in-progress'
                    ? 'primary.50'
                    : 'inherit',
                '&:hover': {
                  backgroundColor:
                    step.status === 'completed'
                      ? 'success.100'
                      : step.status === 'in-progress'
                      ? 'primary.100'
                      : 'action.hover',
                },
              }}
            >
              <TableCell>
                <Typography variant="subtitle2">
                  {step.name.replace(/_/g, ' ')}
                </Typography>
                {step.activities && step.activities.length > 0 && (
                  <Box
                    sx={{ mt: 1, display: 'flex', flexWrap: 'wrap', gap: 0.5 }}
                  >
                    {step.activities.map((activity, i) => (
                      <Chip
                        key={i}
                        label={activity.name.replace(/_/g, ' ')}
                        size="small"
                        variant="outlined"
                        color={activity.completed ? 'success' : 'default'}
                        sx={{ height: 20 }}
                      />
                    ))}
                  </Box>
                )}
              </TableCell>
              <TableCell>
                <Chip
                  label={step.type === 'sleep' ? 'Ruhezeit' : 'Manuell'}
                  size="small"
                  color={step.type === 'sleep' ? 'info' : 'warning'}
                  sx={{ textTransform: 'capitalize' }}
                />
              </TableCell>
              <TableCell>
                {step.duration || '-'}
                {step.conditions && Object.keys(step.conditions).length > 0 && (
                  <Tooltip
                    title={
                      <div>
                        {Object.entries(step.conditions).map(
                          ([condition, duration]) => (
                            <div key={condition}>
                              Bei {condition}: {duration}
                            </div>
                          )
                        )}
                      </div>
                    }
                  >
                    <IconButton size="small">
                      <SettingsIcon fontSize="small" />
                    </IconButton>
                  </Tooltip>
                )}
              </TableCell>
              <TableCell>
                <Box sx={{ display: 'flex', flexDirection: 'column' }}>
                  <Box sx={{ display: 'flex', alignItems: 'center' }}>
                    <Chip
                      label={
                        step.status === 'completed'
                          ? 'Abgeschlossen'
                          : step.status === 'in-progress'
                          ? 'In Bearbeitung'
                          : step.status === 'pending'
                          ? 'Ausstehend'
                          : step.status === 'paused'
                          ? 'Pausiert'
                          : 'Fehler'
                      }
                      size="small"
                      color={
                        step.status === 'completed'
                          ? 'success'
                          : step.status === 'in-progress'
                          ? 'primary'
                          : step.status === 'paused'
                          ? 'warning'
                          : step.status === 'error'
                          ? 'error'
                          : 'default'
                      }
                      sx={{ textTransform: 'capitalize' }}
                    />
                  </Box>
                  {(step.status === 'in-progress' ||
                    step.status === 'completed') && (
                    <LinearProgress
                      variant="determinate"
                      value={step.progress}
                      sx={{ mt: 1, height: 6, borderRadius: 3 }}
                    />
                  )}
                </Box>
              </TableCell>
              <TableCell>
                <Box sx={{ display: 'flex', flexDirection: 'column' }}>
                  {step.location && (
                    <Typography
                      variant="body2"
                      sx={{ display: 'flex', alignItems: 'center' }}
                    >
                      <RoomIcon sx={{ fontSize: 16, mr: 0.5 }} />
                      {step.location}
                    </Typography>
                  )}
                  {step.startTime && (
                    <Typography
                      variant="body2"
                      sx={{ display: 'flex', alignItems: 'center' }}
                    >
                      <AccessTime sx={{ fontSize: 16, mr: 0.5 }} />
                      Start: {format(new Date(step.startTime), 'HH:mm')}
                    </Typography>
                  )}
                  {step.notes && (
                    <Tooltip title={step.notes}>
                      <Badge color="secondary" variant="dot">
                        <NotesIcon fontSize="small" />
                      </Badge>
                    </Tooltip>
                  )}
                </Box>
              </TableCell>
              <TableCell>
                {step.status === 'in-progress' && (
                  <IconButton
                    color="success"
                    onClick={() => onComplete(step.id)}
                    disabled={disabled}
                  >
                    <CheckCircle />
                  </IconButton>
                )}
                <IconButton color="primary" onClick={() => onEditNotes(step)}>
                  <EditIcon />
                </IconButton>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </TableContainer>
  )
}

export default WorkflowStepTable
----------------------------------------

FILE: ./src/components/bakery/WorkflowTimeline.tsx
----------------------------------------
import React from 'react'
import {
  Box,
  Typography,
  Paper,
  useTheme,
  Chip,
  Tooltip,
  Badge,
  Divider,
} from '@mui/material'
import {
  AccessTime,
  Notes as NotesIcon,
  Room as RoomIcon,
  DoneAll as DoneAllIcon,
  Settings as SettingsIcon,
  ArrowDownward as ArrowDownwardIcon,
} from '@mui/icons-material'
import { format } from 'date-fns'
import { Workflow, WorkflowStep } from '../../types/workflow'

interface WorkflowTimelineProps {
  workflow: Workflow
}

const WorkflowTimeline: React.FC<WorkflowTimelineProps> = ({ workflow }) => {
  const theme = useTheme()

  // Custom function to format date
  const formatTime = (date?: Date) => {
    if (!date) return ''
    return format(new Date(date), "HH:mm 'Uhr'")
  }

  // Custom timeline step component
  const TimelineStep = ({
    step,
    index,
    isLast,
  }: {
    step: WorkflowStep
    index: number
    isLast: boolean
  }) => {
    // Determine step status visual indicators
    let dotColor = theme.palette.grey[400]
    let borderColor = theme.palette.grey[300]

    if (step.status === 'completed') {
      dotColor = theme.palette.success.main
      borderColor = theme.palette.success.main
    } else if (step.status === 'in-progress') {
      dotColor = theme.palette.primary.main
      borderColor = theme.palette.primary.main
    } else if (step.status === 'error') {
      dotColor = theme.palette.error.main
      borderColor = theme.palette.error.main
    } else if (step.status === 'paused') {
      dotColor = theme.palette.warning.main
      borderColor = theme.palette.warning.main
    }

    return (
      <Box sx={{ mb: 3 }}>
        <Box sx={{ display: 'flex' }}>
          {/* Left side: Timeline indicator */}
          <Box
            sx={{
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              width: 50,
              position: 'relative',
            }}
          >
            {/* Timeline dot */}
            <Box
              sx={{
                width: 20,
                height: 20,
                borderRadius: '50%',
                bgcolor: dotColor,
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                color: '#fff',
                fontSize: 14,
              }}
            >
              {index + 1}
            </Box>

            {/* Timeline connector line */}
            {!isLast && (
              <Box
                sx={{
                  height: '100%',
                  width: 2,
                  bgcolor: borderColor,
                  my: 0.5,
                }}
              />
            )}
          </Box>

          {/* Right side: Step content */}
          <Box sx={{ flex: 1, ml: 2 }}>
            <Paper
              elevation={step.status === 'in-progress' ? 3 : 1}
              sx={{
                p: 2.5,
                mb: 1,
                bgcolor:
                  step.status === 'completed'
                    ? 'success.50'
                    : step.status === 'in-progress'
                    ? 'primary.50'
                    : 'background.paper',
                borderLeft: `4px solid ${borderColor}`,
              }}
            >
              {/* Header with name and status */}
              <Box
                sx={{
                  display: 'flex',
                  justifyContent: 'space-between',
                  alignItems: 'center',
                  mb: 1,
                }}
              >
                <Typography variant="h6" sx={{ textTransform: 'capitalize' }}>
                  {step.name.replace(/_/g, ' ')}
                </Typography>

                <Chip
                  label={
                    step.status === 'completed'
                      ? 'Abgeschlossen'
                      : step.status === 'in-progress'
                      ? 'In Bearbeitung'
                      : step.status === 'pending'
                      ? 'Ausstehend'
                      : step.status === 'paused'
                      ? 'Pausiert'
                      : 'Fehler'
                  }
                  size="small"
                  color={
                    step.status === 'completed'
                      ? 'success'
                      : step.status === 'in-progress'
                      ? 'primary'
                      : step.status === 'paused'
                      ? 'warning'
                      : step.status === 'error'
                      ? 'error'
                      : 'default'
                  }
                />
              </Box>

              {/* Step type */}
              {step.type === 'sleep' && (
                <Chip
                  label="Ruhezeit"
                  size="small"
                  color="info"
                  sx={{ mb: 1 }}
                />
              )}

              {/* Info box: timing, location */}
              <Box
                sx={{
                  display: 'flex',
                  flexWrap: 'wrap',
                  gap: 2,
                  alignItems: 'center',
                  mt: 1.5,
                }}
              >
                {/* Timing information */}
                {(step.startTime || step.duration) && (
                  <Box sx={{ display: 'flex', alignItems: 'center' }}>
                    <AccessTime
                      sx={{ fontSize: 16, mr: 0.5, color: 'text.secondary' }}
                    />
                    <Typography variant="body2" color="text.secondary">
                      {step.startTime && formatTime(step.startTime)}
                      {step.startTime && step.endTime && ' - '}
                      {step.endTime && formatTime(step.endTime)}
                      {!step.startTime &&
                        step.duration &&
                        `Dauer: ${step.duration}`}
                    </Typography>
                  </Box>
                )}

                {/* Location information */}
                {step.location && (
                  <Box sx={{ display: 'flex', alignItems: 'center' }}>
                    <RoomIcon
                      sx={{ fontSize: 16, mr: 0.5, color: 'text.secondary' }}
                    />
                    <Typography variant="body2" color="text.secondary">
                      {step.location}
                    </Typography>
                  </Box>
                )}

                {/* Conditions */}
                {step.conditions && Object.keys(step.conditions).length > 0 && (
                  <Tooltip
                    title={
                      <Box>
                        <Typography
                          variant="caption"
                          sx={{ fontWeight: 'bold' }}
                        >
                          Bedingungen:
                        </Typography>
                        {Object.entries(step.conditions).map(
                          ([condition, duration]) => (
                            <Typography
                              key={condition}
                              variant="caption"
                              display="block"
                            >
                              • Bei {condition}: {duration}
                            </Typography>
                          )
                        )}
                      </Box>
                    }
                  >
                    <Chip
                      icon={<SettingsIcon fontSize="small" />}
                      label="Bedingungen"
                      size="small"
                      variant="outlined"
                    />
                  </Tooltip>
                )}
              </Box>

              {/* Activities */}
              {step.activities && step.activities.length > 0 && (
                <Box sx={{ mt: 2 }}>
                  <Divider sx={{ my: 1 }} />
                  <Typography
                    variant="body2"
                    color="text.secondary"
                    gutterBottom
                  >
                    Aktivitäten:
                  </Typography>
                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
                    {step.activities.map((activity, i) => (
                      <Chip
                        key={i}
                        icon={
                          activity.completed ? (
                            <DoneAllIcon fontSize="small" />
                          ) : undefined
                        }
                        label={activity.name.replace(/_/g, ' ')}
                        size="small"
                        color={activity.completed ? 'success' : 'default'}
                        variant={activity.completed ? 'filled' : 'outlined'}
                      />
                    ))}
                  </Box>
                </Box>
              )}

              {/* Notes */}
              {step.notes && (
                <Box
                  sx={{
                    mt: 2,
                    p: 1,
                    borderRadius: 1,
                    bgcolor: 'background.paper',
                    border: '1px dashed',
                    borderColor: 'divider',
                  }}
                >
                  <Typography
                    variant="body2"
                    sx={{ display: 'flex', alignItems: 'flex-start' }}
                  >
                    <NotesIcon
                      sx={{ fontSize: 16, mr: 0.5, mt: 0.25 }}
                      color="action"
                    />
                    {step.notes}
                  </Typography>
                </Box>
              )}
            </Paper>
          </Box>
        </Box>
      </Box>
    )
  }

  return (
    <Box sx={{ mt: 2, px: 2 }}>
      {workflow.steps.map((step, index) => (
        <TimelineStep
          key={step.id}
          step={step}
          index={index}
          isLast={index === workflow.steps.length - 1}
        />
      ))}
    </Box>
  )
}

export default WorkflowTimeline
----------------------------------------

FILE: ./src/components/button/Index.tsx
----------------------------------------
'use client'
import { Button as MuiButton, ButtonProps } from '@mui/material'
import React from 'react'

// Extend ButtonProps with the anchor-specific props
interface CustomButtonProps extends ButtonProps {
  target?: string
  rel?: string
}

const Button: React.FC<CustomButtonProps> = ({ children, ...props }) => {
  return (
    <MuiButton variant="contained" {...props}>
      {children}
    </MuiButton>
  )
}

export default Button
----------------------------------------

FILE: ./src/components/cart/Card.tsx
----------------------------------------
import React from 'react'
import { Box, Chip, Typography } from '@mui/material'

import { CartContext, CartItem } from '../../context/CartContext'
import { formatter } from '../../utils/formatPrice'
import Button from '../button/Index'
import Image from 'next/image'

const Card: React.FC<CartItem> = (props) => {
  const { id, image, name, category, price, count } = props

  const { items, remove, changeCount } = React.useContext(CartContext)

  React.useEffect(() => {
    console.log('cont', items)
  }, [items])

  return (
    <Box sx={styles.root}>
      <Box sx={styles.image}>
        <Image src={image} alt={name} />
      </Box>
      <Box sx={styles.content}>
        <Box sx={styles.tags}>
          <Typography gutterBottom variant="h6" fontSize={20}>
            {name}
          </Typography>
          <Box sx={styles.counter}>
            <Button
              onClick={() => changeCount(id, -1)}
              color="inherit"
              size="small"
              sx={{ minWidth: 32 }}
            >
              -
            </Button>
            <Typography fontWeight="bold" mx={2}>
              {count}
            </Typography>
            <Button
              onClick={() => changeCount(id, 1)}
              color="inherit"
              size="small"
              sx={{ minWidth: 32 }}
            >
              +
            </Button>
          </Box>
        </Box>
        <Box sx={styles.tags}>
          <Chip label={category} />
          <Box onClick={() => remove(id)}>remove</Box>
          <Typography variant="h6" fontSize={20}>
            {formatter.format(price)}
          </Typography>
        </Box>
      </Box>
    </Box>
  )
}

const styles = {
  root: {
    boxShadow: 1,
    borderRadius: '8px',
    bgcolor: 'background.paper',
    p: 2,
    width: '100%',
    mb: 2,
    display: 'flex',
  },
  image: {
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    height: 70,
    width: 70,
    bgcolor: 'grey.100',
    borderRadius: '8px',
    border: '1px solid',
    borderColor: 'grey.300',
    mr: 2,

    '& img': {
      maxWidth: '80%',
      maxHeight: '80%',
    },
  },
  content: {
    flex: 1,
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
  },
  counter: {
    display: 'flex',
    alignItems: 'center',
  },
  tags: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
}

export default Card
----------------------------------------

FILE: ./src/components/cart/CartButton.tsx
----------------------------------------
import React from 'react'
import { Box, BoxProps, Typography } from '@mui/material'
import ShoppingCartRoundedIcon from '@mui/icons-material/ShoppingCartRounded'
import { CartContext } from '../../context/CartContext'

const CartButton: React.FC<BoxProps> = (props) => {
  const { totalCount } = React.useContext(CartContext)

  return (
    <Box sx={styles.root} {...props}>
      <Box sx={styles.wrapper}>
        <Box sx={styles.badge}>
          <Typography fontWeight="bold">{totalCount}</Typography>
        </Box>
        <ShoppingCartRoundedIcon />
      </Box>
    </Box>
  )
}

const styles = {
  root: {
    position: 'fixed',
    zIndex: 100001,
    bottom: 40,
    right: 40,
    borderRadius: '50%',
    bgcolor: 'primary.main',
    height: 50,
    width: 50,
    boxShadow: 1,

    '& svg': {
      color: 'common.white',
    },
  },
  wrapper: {
    position: 'relative',
    height: '100%',
    width: '100%',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
  },
  badge: {
    position: 'absolute',
    bottom: 0,
    right: 0,
    borderRadius: '50%',
    bgcolor: 'common.white',
    height: 20,
    width: 20,
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    boxShadow: 1,
  },
}

export default CartButton
----------------------------------------

FILE: ./src/components/cart/Modal.tsx
----------------------------------------
import React from 'react'
import { Box, BoxProps, Modal as MuiModal } from '@mui/material'

interface Props extends BoxProps {
  open: boolean
  setOpen: (status: boolean) => void
}

const Modal: React.FC<Props> = (props) => {
  const { open, setOpen, children } = props

  return (
    <MuiModal
      open={open}
      onClose={() => setOpen(false)}
      aria-labelledby='mobile-menu'
      aria-describedby='mobile-hamburger-menu'
      sx={{
        position: 'fixed',
        zIndex: '100000',
        bgcolor: 'rgba(255,255,255,0.66)',
        backdropFilter: 'blur(8px)',
        '& .MuiBackdrop-root': {
          bgcolor: 'transparent'
        }
      }}
    >
      <Box sx={{
        outline: 'none'
      }}>
        {children}
      </Box>
    </MuiModal>
  )
}

export default Modal----------------------------------------

FILE: ./src/components/cart/index.tsx
----------------------------------------
import React from 'react'
import { Box, Container, Grid, Typography } from '@mui/material'
import Modal from './Modal'
import CartButton from './CartButton'
import Hero from '../Hero'
import { CartContext } from '../../context/CartContext'
import Card from './Card'
import { formatter } from '../../utils/formatPrice'
import Link from 'next/link'

const Cart = () => {
  const [open, setOpen] = React.useState(false)
  const { items, totalPrice } = React.useContext(CartContext)

  return (
    <Box>
      <CartButton onClick={() => setOpen(!open)} />
      <Modal setOpen={setOpen} open={open}>
        <Box>
          <Container maxWidth="sm">
            <Hero title="Warenkorb" />
            <Grid container spacing={2}>
              {items.map((item) => (
                <Card key={item.id} {...item} />
              ))}
            </Grid>
            <Typography variant="h2">
              Summe: {formatter.format(totalPrice)}
            </Typography>
            <Link href="/bestellen">Bestellen</Link>
          </Container>
        </Box>
      </Modal>
    </Box>
  )
}

export default Cart
----------------------------------------

FILE: ./src/components/dashboard/ChartComponent.tsx
----------------------------------------
'use client'
import React from 'react'
import { Box, Paper, Typography, useTheme } from '@mui/material'
import {
  LineChart,
  Line,
  BarChart,
  Bar,
  PieChart,
  Pie,
  AreaChart,
  Area,
  Cell,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
} from 'recharts'

type ChartType = 'line' | 'bar' | 'pie' | 'area'

interface ChartComponentProps {
  title: string
  subtitle?: string
  type: ChartType
  data: any[]
  dataKeys: {
    x: string
    y: string | string[]
    colors?: string[]
    stacked?: boolean
  }
  height?: number
}

const ChartComponent: React.FC<ChartComponentProps> = ({
  title,
  subtitle,
  type,
  data,
  dataKeys,
  height = 300,
}) => {
  const theme = useTheme()
  const defaultColors = [
    theme.palette.primary.main,
    theme.palette.secondary.main,
    '#8884d8',
    '#82ca9d',
    '#ffc658',
    '#ff8042',
  ]

  const colors = dataKeys.colors || defaultColors

  const renderChart = () => {
    switch (type) {
      case 'line':
        return (
          <ResponsiveContainer width="100%" height={height}>
            <LineChart
              data={data}
              margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
            >
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey={dataKeys.x} />
              <YAxis />
              <Tooltip />
              <Legend />
              {Array.isArray(dataKeys.y) ? (
                dataKeys.y.map((key, index) => (
                  <Line
                    key={key}
                    type="monotone"
                    dataKey={key}
                    stroke={colors[index % colors.length]}
                    activeDot={{ r: 8 }}
                  />
                ))
              ) : (
                <Line
                  type="monotone"
                  dataKey={dataKeys.y}
                  stroke={colors[0]}
                  activeDot={{ r: 8 }}
                />
              )}
            </LineChart>
          </ResponsiveContainer>
        )

      case 'bar':
        return (
          <ResponsiveContainer width="100%" height={height}>
            <BarChart
              data={data}
              margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
            >
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey={dataKeys.x} />
              <YAxis />
              <Tooltip />
              <Legend />
              {Array.isArray(dataKeys.y) ? (
                dataKeys.y.map((key, index) => (
                  <Bar
                    key={key}
                    dataKey={key}
                    fill={colors[index % colors.length]}
                    stackId={dataKeys.stacked ? '1' : undefined}
                  />
                ))
              ) : (
                <Bar dataKey={dataKeys.y} fill={colors[0]} />
              )}
            </BarChart>
          </ResponsiveContainer>
        )

      case 'pie':
        return (
          <ResponsiveContainer width="100%" height={height}>
            <PieChart>
              <Pie
                data={data}
                cx="50%"
                cy="50%"
                labelLine={false}
                outerRadius={80}
                fill="#8884d8"
                dataKey={Array.isArray(dataKeys.y) ? dataKeys.y[0] : dataKeys.y}
                nameKey={dataKeys.x}
                label={({ name, percent }) =>
                  `${name}: ${(percent * 100).toFixed(0)}%`
                }
              >
                {data.map((entry, index) => (
                  <Cell
                    key={`cell-${index}`}
                    fill={colors[index % colors.length]}
                  />
                ))}
              </Pie>
              <Tooltip />
              <Legend />
            </PieChart>
          </ResponsiveContainer>
        )

      case 'area':
        return (
          <ResponsiveContainer width="100%" height={height}>
            <AreaChart
              data={data}
              margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
            >
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey={dataKeys.x} />
              <YAxis />
              <Tooltip />
              <Legend />
              {Array.isArray(dataKeys.y) ? (
                dataKeys.y.map((key, index) => (
                  <Area
                    key={key}
                    type="monotone"
                    dataKey={key}
                    stackId={dataKeys.stacked ? '1' : undefined}
                    stroke={colors[index % colors.length]}
                    fill={colors[index % colors.length]}
                    fillOpacity={0.6}
                  />
                ))
              ) : (
                <Area
                  type="monotone"
                  dataKey={dataKeys.y}
                  stroke={colors[0]}
                  fill={colors[0]}
                  fillOpacity={0.6}
                />
              )}
            </AreaChart>
          </ResponsiveContainer>
        )

      default:
        return <Typography color="error">Invalid chart type</Typography>
    }
  }

  return (
    <Paper
      sx={{ p: 2, height: '100%', display: 'flex', flexDirection: 'column' }}
    >
      <Typography variant="h6" component="h3" gutterBottom>
        {title}
      </Typography>
      {subtitle && (
        <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
          {subtitle}
        </Typography>
      )}
      <Box sx={{ flexGrow: 1, width: '100%' }}>{renderChart()}</Box>
    </Paper>
  )
}

export default ChartComponent
----------------------------------------

FILE: ./src/components/dashboard/DataTable.tsx
----------------------------------------
'use client'
import React, { useState } from 'react'
import {
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TablePagination,
  Typography,
  Box,
  Chip,
  TextField,
  InputAdornment,
} from '@mui/material'
import SearchIcon from '@mui/icons-material/Search'

interface Column {
  id: string
  label: string
  minWidth?: number
  align?: 'right' | 'left' | 'center'
  format?: (value: any) => React.ReactNode
}

interface DataTableProps {
  title: string
  subtitle?: string
  columns: Column[]
  data: any[]
  searchEnabled?: boolean
  emptyMessage?: string
}

const DataTable: React.FC<DataTableProps> = ({
  title,
  subtitle,
  columns,
  data,
  searchEnabled = false,
  emptyMessage = 'No data available',
}) => {
  const [page, setPage] = useState(0)
  const [rowsPerPage, setRowsPerPage] = useState(5)
  const [searchTerm, setSearchTerm] = useState('')

  const handleChangePage = (event: unknown, newPage: number) => {
    setPage(newPage)
  }

  const handleChangeRowsPerPage = (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    setRowsPerPage(+event.target.value)
    setPage(0)
  }

  // Filter data based on search term
  const filteredData =
    searchEnabled && searchTerm
      ? data.filter((row) =>
          Object.values(row).some(
            (value) =>
              value !== null &&
              value !== undefined &&
              value.toString().toLowerCase().includes(searchTerm.toLowerCase())
          )
        )
      : data

  // Calculate the sliced data for pagination
  const displayedData = filteredData.slice(
    page * rowsPerPage,
    page * rowsPerPage + rowsPerPage
  )

  return (
    <Paper
      sx={{
        width: '100%',
        height: '100%',
        display: 'flex',
        flexDirection: 'column',
        overflow: 'hidden',
      }}
    >
      <Box sx={{ p: 2, pb: searchEnabled ? 1 : 2 }}>
        <Typography variant="h6" component="h3">
          {title}
        </Typography>
        {subtitle && (
          <Typography variant="body2" color="text.secondary">
            {subtitle}
          </Typography>
        )}

        {searchEnabled && (
          <TextField
            margin="dense"
            placeholder="Search..."
            fullWidth
            variant="outlined"
            size="small"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <SearchIcon />
                </InputAdornment>
              ),
            }}
            sx={{ mt: 1 }}
          />
        )}
      </Box>

      <TableContainer sx={{ flexGrow: 1, overflow: 'auto' }}>
        <Table stickyHeader aria-label={`${title} table`} size="small">
          <TableHead>
            <TableRow>
              {columns.map((column) => (
                <TableCell
                  key={column.id}
                  align={column.align}
                  style={{ minWidth: column.minWidth, fontWeight: 'bold' }}
                >
                  {column.label}
                </TableCell>
              ))}
            </TableRow>
          </TableHead>
          <TableBody>
            {displayedData.length > 0 ? (
              displayedData.map((row, rowIndex) => (
                <TableRow hover tabIndex={-1} key={rowIndex}>
                  {columns.map((column) => {
                    const value = row[column.id]
                    return (
                      <TableCell key={column.id} align={column.align}>
                        {column.format ? column.format(value) : value}
                      </TableCell>
                    )
                  })}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={columns.length} align="center">
                  {emptyMessage}
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </TableContainer>
      <TablePagination
        rowsPerPageOptions={[5, 10, 25]}
        component="div"
        count={filteredData.length}
        rowsPerPage={rowsPerPage}
        page={page}
        onPageChange={handleChangePage}
        onRowsPerPageChange={handleChangeRowsPerPage}
      />
    </Paper>
  )
}

export default DataTable
----------------------------------------

FILE: ./src/components/dashboard/DateRangeSelector.tsx
----------------------------------------
'use client'
import React from 'react'
import { Box, ToggleButtonGroup, ToggleButton, Typography } from '@mui/material'

export type TimeRange = 'day' | 'week' | 'month' | 'year'

interface DateRangeSelectorProps {
  timeRange: TimeRange
  onTimeRangeChange: (range: TimeRange) => void
}

const DateRangeSelector: React.FC<DateRangeSelectorProps> = ({
  timeRange,
  onTimeRangeChange,
}) => {
  const handleTimeRangeChange = (
    event: React.MouseEvent<HTMLElement>,
    newTimeRange: TimeRange | null
  ) => {
    if (newTimeRange !== null) {
      onTimeRangeChange(newTimeRange)
    }
  }

  return (
    <Box sx={{ mb: 3 }}>
      <Typography variant="subtitle2" gutterBottom>
        Select Time Period:
      </Typography>
      <ToggleButtonGroup
        value={timeRange}
        exclusive
        onChange={handleTimeRangeChange}
        aria-label="time range"
        size="small"
        sx={{
          '& .MuiToggleButton-root': {
            textTransform: 'none',
            px: 2,
          },
        }}
      >
        <ToggleButton value="day" aria-label="today">
          Today
        </ToggleButton>
        <ToggleButton value="week" aria-label="this week">
          This Week
        </ToggleButton>
        <ToggleButton value="month" aria-label="this month">
          This Month
        </ToggleButton>
        <ToggleButton value="year" aria-label="this year">
          This Year
        </ToggleButton>
      </ToggleButtonGroup>
    </Box>
  )
}

export default DateRangeSelector
----------------------------------------

FILE: ./src/components/dashboard/MetricCard.tsx
----------------------------------------
'use client'
import React from 'react'
import {
  Box,
  Card,
  CardContent,
  Typography,
  CircularProgress,
  Tooltip,
} from '@mui/material'
import TrendingUpIcon from '@mui/icons-material/TrendingUp'
import TrendingDownIcon from '@mui/icons-material/TrendingDown'
import TrendingFlatIcon from '@mui/icons-material/TrendingFlat'
import InfoIcon from '@mui/icons-material/Info'

interface MetricCardProps {
  title: string
  value: string | number
  unit?: string
  icon?: React.ReactNode
  percentageChange?: number
  loading?: boolean
  tooltip?: string
  color?: string
}

const MetricCard: React.FC<MetricCardProps> = ({
  title,
  value,
  unit,
  icon,
  percentageChange,
  loading = false,
  tooltip,
  color = '#1976d2',
}) => {
  // Function to determine trend icon and color
  const getTrendDisplay = () => {
    if (percentageChange === undefined) return null

    let trendIcon
    let trendColor

    if (percentageChange > 0) {
      trendIcon = <TrendingUpIcon fontSize="small" />
      trendColor = '#4caf50' // green
    } else if (percentageChange < 0) {
      trendIcon = <TrendingDownIcon fontSize="small" />
      trendColor = '#f44336' // red
    } else {
      trendIcon = <TrendingFlatIcon fontSize="small" />
      trendColor = '#ff9800' // amber
    }

    return (
      <Box sx={{ display: 'flex', alignItems: 'center', color: trendColor }}>
        {trendIcon}
        <Typography variant="body2" component="span" sx={{ ml: 0.5 }}>
          {Math.abs(percentageChange).toFixed(1)}%
        </Typography>
      </Box>
    )
  }

  return (
    <Card sx={{ height: '100%', position: 'relative' }}>
      <CardContent>
        <Box
          sx={{
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'space-between',
            mb: 1,
          }}
        >
          <Typography variant="subtitle2" color="text.secondary">
            {title}
          </Typography>
          {tooltip && (
            <Tooltip title={tooltip} arrow>
              <InfoIcon
                fontSize="small"
                sx={{ color: 'text.secondary', ml: 1 }}
              />
            </Tooltip>
          )}
        </Box>

        <Box sx={{ display: 'flex', alignItems: 'flex-end', mb: 1 }}>
          {icon && <Box sx={{ mr: 1, color }}>{icon}</Box>}
          {loading ? (
            <CircularProgress size={24} />
          ) : (
            <Typography
              variant="h5"
              component="div"
              sx={{ fontWeight: 'bold' }}
            >
              {value}
              {unit && (
                <Typography variant="caption" sx={{ ml: 0.5 }}>
                  {unit}
                </Typography>
              )}
            </Typography>
          )}
        </Box>

        {getTrendDisplay()}
      </CardContent>
    </Card>
  )
}

export default MetricCard
----------------------------------------

FILE: ./src/components/dashboard/ProductivityChart.tsx
----------------------------------------
'use client'
import React from 'react'
import { Paper, Typography, Box, Divider, useTheme } from '@mui/material'
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
} from 'recharts'

interface ProductivityItem {
  name: string
  value: number
  target?: number
  color?: string
}

interface ProductivityChartProps {
  title: string
  subtitle?: string
  data: ProductivityItem[]
  valueLabel?: string
  targetLabel?: string
  height?: number
  showTarget?: boolean
}

const ProductivityChart: React.FC<ProductivityChartProps> = ({
  title,
  subtitle,
  data,
  valueLabel = 'Actual',
  targetLabel = 'Target',
  height = 300,
  showTarget = true,
}) => {
  const theme = useTheme()

  // Add color to each item if not provided
  const dataWithColors = data.map((item, index) => ({
    ...item,
    color: item.color || theme.palette.primary.main,
  }))

  // Custom tooltip to show percentage of target
  const CustomTooltip = ({ active, payload, label }: any) => {
    if (active && payload && payload.length) {
      const item = payload[0].payload
      const value = item.value
      const target = item.target || 0
      const percentage = target ? ((value / target) * 100).toFixed(1) : null

      return (
        <div
          style={{
            backgroundColor: '#fff',
            padding: '10px',
            border: '1px solid #ccc',
            borderRadius: '4px',
          }}
        >
          <p style={{ margin: 0, fontWeight: 'bold' }}>{`${label}`}</p>
          <p
            style={{ margin: '5px 0 0', color: payload[0].color }}
          >{`${valueLabel}: ${value}`}</p>
          {showTarget && target > 0 && (
            <>
              <p
                style={{
                  margin: '5px 0 0',
                  color: theme.palette.secondary.main,
                }}
              >
                {`${targetLabel}: ${target}`}
              </p>
              <Divider sx={{ my: 1 }} />
              <p style={{ margin: 0, fontWeight: 'bold' }}>
                {`Achievement: ${percentage}%`}
              </p>
            </>
          )}
        </div>
      )
    }
    return null
  }

  return (
    <Paper
      sx={{ p: 2, height: '100%', display: 'flex', flexDirection: 'column' }}
    >
      <Typography variant="h6" component="h3" gutterBottom>
        {title}
      </Typography>
      {subtitle && (
        <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
          {subtitle}
        </Typography>
      )}
      <Box sx={{ flexGrow: 1, width: '100%' }}>
        <ResponsiveContainer width="100%" height={height}>
          <BarChart
            data={dataWithColors}
            layout="vertical"
            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
          >
            <CartesianGrid
              strokeDasharray="3 3"
              horizontal={true}
              vertical={false}
            />
            <XAxis type="number" />
            <YAxis dataKey="name" type="category" />
            <Tooltip content={<CustomTooltip />} />
            <Legend />
            <Bar
              dataKey="value"
              name={valueLabel}
              fill={theme.palette.primary.main}
            >
              {dataWithColors.map((entry, index) => (
                <Bar key={`bar-${index}`} dataKey="value" fill={entry.color} />
              ))}
            </Bar>
            {showTarget && (
              <Bar
                dataKey="target"
                name={targetLabel}
                fill={theme.palette.secondary.main}
              />
            )}
          </BarChart>
        </ResponsiveContainer>
      </Box>
    </Paper>
  )
}

export default ProductivityChart
----------------------------------------

FILE: ./src/components/dashboard/StatsComparison.tsx
----------------------------------------
'use client'
import React from 'react'
import {
  Paper,
  Typography,
  Box,
  Divider,
  List,
  ListItem,
  ListItemText,
  LinearProgress,
  Tooltip,
  useTheme,
} from '@mui/material'
import ArrowUpwardIcon from '@mui/icons-material/ArrowUpward'
import ArrowDownwardIcon from '@mui/icons-material/ArrowDownward'
import RemoveIcon from '@mui/icons-material/Remove'

interface ComparisonItem {
  label: string
  current: number
  previous: number
  unit?: string
  tooltip?: string
  color?: string
  isHigherBetter?: boolean
}

interface StatsComparisonProps {
  title: string
  subtitle?: string
  items: ComparisonItem[]
  previousPeriodLabel: string
}

const StatsComparison: React.FC<StatsComparisonProps> = ({
  title,
  subtitle,
  items,
  previousPeriodLabel,
}) => {
  const theme = useTheme()

  const calculatePercentageChange = (current: number, previous: number) => {
    if (previous === 0) return current > 0 ? 100 : 0
    return ((current - previous) / previous) * 100
  }

  const getChangeColor = (
    current: number,
    previous: number,
    isHigherBetter: boolean = true
  ) => {
    if (current === previous) return theme.palette.text.secondary
    const isHigher = current > previous
    return isHigher === isHigherBetter
      ? theme.palette.success.main
      : theme.palette.error.main
  }

  const getChangeIcon = (current: number, previous: number) => {
    if (current > previous) return <ArrowUpwardIcon fontSize="small" />
    if (current < previous) return <ArrowDownwardIcon fontSize="small" />
    return <RemoveIcon fontSize="small" />
  }

  // Calculate the maximum value for the progress bar
  const maxValue =
    Math.max(...items.flatMap((item) => [item.current, item.previous])) * 1.2

  return (
    <Paper
      sx={{ p: 2, height: '100%', display: 'flex', flexDirection: 'column' }}
    >
      <Typography variant="h6" component="h3" gutterBottom>
        {title}
      </Typography>
      {subtitle && (
        <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
          {subtitle}
        </Typography>
      )}

      <List sx={{ width: '100%', flexGrow: 1 }}>
        {items.map((item, index) => {
          const percentChange = calculatePercentageChange(
            item.current,
            item.previous
          )
          const changeColor =
            item.color ||
            getChangeColor(item.current, item.previous, item.isHigherBetter)

          return (
            <React.Fragment key={index}>
              {index > 0 && <Divider component="li" />}
              <ListItem
                alignItems="flex-start"
                sx={{ flexDirection: 'column', gap: 1 }}
              >
                <Box
                  sx={{
                    width: '100%',
                    display: 'flex',
                    justifyContent: 'space-between',
                    alignItems: 'center',
                  }}
                >
                  <Tooltip title={item.tooltip || ''} arrow placement="top">
                    <Typography variant="subtitle2" component="span">
                      {item.label}
                    </Typography>
                  </Tooltip>

                  <Box sx={{ display: 'flex', alignItems: 'center' }}>
                    <Typography
                      variant="body2"
                      component="span"
                      sx={{
                        display: 'flex',
                        alignItems: 'center',
                        color: changeColor,
                      }}
                    >
                      {getChangeIcon(item.current, item.previous)}
                      {Math.abs(percentChange).toFixed(1)}%
                    </Typography>
                  </Box>
                </Box>

                <Box sx={{ width: '100%', mt: 0.5 }}>
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 0.5 }}>
                    <Typography
                      variant="body1"
                      component="span"
                      sx={{ fontWeight: 'bold', mr: 1 }}
                    >
                      {item.current}
                      {item.unit || ''}
                    </Typography>
                    <Typography variant="caption" color="text.secondary">
                      vs {item.previous}
                      {item.unit || ''} {previousPeriodLabel}
                    </Typography>
                  </Box>
                  <Box sx={{ width: '100%', display: 'flex' }}>
                    <LinearProgress
                      variant="determinate"
                      value={(item.current / maxValue) * 100}
                      sx={{
                        height: 8,
                        width: '100%',
                        borderRadius: 4,
                        backgroundColor: theme.palette.grey[200],
                        '& .MuiLinearProgress-bar': {
                          backgroundColor:
                            item.color || theme.palette.primary.main,
                        },
                      }}
                    />
                  </Box>
                </Box>
              </ListItem>
            </React.Fragment>
          )
        })}
      </List>
    </Paper>
  )
}

export default StatsComparison
----------------------------------------

FILE: ./src/components/footer/Contact.tsx
----------------------------------------
import React from 'react'
import { Box } from '@mui/system'
import { Typography } from '@mui/material'

const Contact: React.FC = () => {
  return (
    <Box>
			<Box sx={{mb: 2}}>
				<Typography variant='h6' fontSize={16} gutterBottom>
					Adresse
				</Typography>
				<Typography variant='body2' color='text.secondary'>
					Eckstraße 3
				</Typography>
				<Typography variant='body2' color='text.secondary'>
					66424 Homburg
				</Typography>
				<Typography variant='body2' color='text.secondary'>
					Deutschland
				</Typography>
			</Box>
			<Box>
				<Typography variant='h6' fontSize={16} gutterBottom>
					Kontakt
				</Typography>
				<Typography variant='body2' color='text.secondary'>
					06841 2229
				</Typography>
				<Typography variant='body2' color='text.secondary'>
					01522 6621236
				</Typography>
			</Box>
    </Box>
  )
}

export default Contact----------------------------------------

FILE: ./src/components/footer/Index.tsx
----------------------------------------
import React from 'react'
import { useRouter } from 'next/navigation'
import { Box, Container, Grid, Typography } from '@mui/material'
import { useTheme } from '@mui/material/styles'

import Wappen from '../icons/brand/Wappen'
import Heusser from '../icons/brand/Heusser'
import Menu from './Menu'
import Contact from './Contact'
import Openings from './Openings'
import Link from './Link'
import Socials from '../Socials'

const Footer: React.FC = () => {
  const theme = useTheme()

  return (
    <Box sx={styles.root}>
      <Container>
        <Grid sx={styles.header} container spacing={4}>
          <Grid item xs={12} sm={6} md={3} sx={styles.about}>
            <Box>
              <Heusser color={theme.palette.primary.main} />
              <Typography variant="body2" color="text.secondary" mb={2}>
                Wir backen mit Herz, nach Tradition und nur für euch.
              </Typography>
            </Box>
            <Socials />
          </Grid>
          <Grid item xs={12} sm={6} md={3}>
            <Menu />
          </Grid>
          <Grid item xs={12} sm={6} md={3}>
            <Contact />
          </Grid>
          <Grid item xs={12} sm={6} md={3}>
            <Openings />
          </Grid>
        </Grid>
        <Box sx={styles.footer}>
          <Typography variant="body2" color="text.disabled">
            © Bäckerei Heusser 2025
          </Typography>
          <Box>
            <Link label="Impressum" path="/imprint" />
          </Box>
          <Box>
            <Link label="Login" path="/login" />
          </Box>
        </Box>
        <Box sx={styles.image}>
          <Wappen />
        </Box>
      </Container>
    </Box>
  )
}

const styles = {
  root: {
    position: 'relative',
    overflow: 'hidden',
    display: 'flex',
    flexDirection: 'column',
    m: 2,
    mt: 6,
    p: 2,
    bgcolor: 'background.paper',
    boxShadow: 1,
    borderRadius: '8px',
  },
  header: {
    position: 'relative',
    display: 'flex',
    zIndex: 1,
  },
  about: {
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'space-between',

    '& svg': {
      maxHeight: 50,
      width: 'auto',
    },
  },
  footer: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between',
    borderTop: '1px solid',
    borderColor: 'grey.300',
    pt: 2,
  },
  image: {
    position: 'absolute',
    top: 0,
    left: 0,
    opacity: 0.05,
    backgroundPosition: 'center',
    backgroundSize: 'cover',
  },
}

export default Footer
----------------------------------------

FILE: ./src/components/footer/Link.tsx
----------------------------------------
import React from 'react'
import { useRouter } from 'next/navigation'
import NextLink from 'next/link'
import { Box } from '@mui/material'
import { usePathname } from 'next/navigation'

interface Props {
  path: string
  label: string
}

const Link: React.FC<Props> = (props) => {
  const { path, label } = props
  const router = useRouter()
  const pathname = usePathname()

  return (
    <Box
      sx={styles.root}
      className={`link ${pathname === path ? 'active' : ''}`}
    >
      <NextLink href={path}>{label}</NextLink>
    </Box>
  )
}

const styles = {
  root: {
    mb: 1,

    '& a': {
      textDecoration: 'none',
      color: 'text.secondary',
      transition: 'all ease-in-out 120ms',
      fontSize: 14,
    },

    '&.active, &:hover': {
      '& a': {
        fontWeight: 'bold',
        color: 'primary.main',
      },
    },
  },
}

export default Link
----------------------------------------

FILE: ./src/components/footer/Menu.tsx
----------------------------------------
import React from 'react'
import { useRouter } from 'next/navigation'
import { Box, Typography } from '@mui/material'

import { MENU } from './data'
import Link from './Link'

const Menu: React.FC = () => {
  const router = useRouter()

  return (
    <Box sx={styles.root}>
      <Typography variant="h6" fontSize={16} gutterBottom>
        Menu
      </Typography>
      {MENU.map((item) => (
        <Link key={item.label} {...item} />
      ))}
    </Box>
  )
}

const styles = {
  root: {
    display: 'flex',
    flexDirection: 'column',
  },
}

export default Menu
----------------------------------------

FILE: ./src/components/footer/Openings.tsx
----------------------------------------
import { Box, Typography } from '@mui/material'
import React from 'react'

const Openings: React.FC = () => {
  return (
    <Box>
      <Typography variant="h6" fontSize={16} gutterBottom>
        Öffnungszeiten
      </Typography>
      <Box sx={{ mb: 2 }}>
        <Typography variant="body2" color="text.disabled">
          Di, Mi, Do, Fr
        </Typography>
        <Typography variant="body2" color="text.secondary">
          06:00 - 15:00 Uhr
        </Typography>
      </Box>
      <Box sx={{ mb: 2 }}>
        <Typography variant="body2" color="text.disabled">
          Sa
        </Typography>
        <Typography variant="body2" color="text.secondary">
          06:00 - 12:30 Uhr
        </Typography>
      </Box>
      <Box sx={{ mb: 2 }}>
        <Typography variant="body2" color="text.disabled">
          So und Feiertage
        </Typography>
        <Typography variant="body2" color="text.secondary">
          08:00 - 11:00 Uhr
        </Typography>
      </Box>
      <Box sx={{ mb: 2 }}>
        <Typography variant="body2" color="text.disabled">
          Monttag
        </Typography>
        <Typography variant="body2" color="text.secondary">
          ist Ruhetag
        </Typography>
      </Box>
    </Box>
  )
}

export default Openings
----------------------------------------

FILE: ./src/components/footer/data.ts
----------------------------------------
export const MENU = [
    {
      label: 'Home',
      path: '/'
    },{
      label: 'Sortiment',
      path: '/products'
    },{
      label: 'Neuigkeiten',
      path: '/news'
    },{
      label: 'Über uns',
      path: '/about'
    },{
      label: 'Bestellen',
      path: '/bestellen'
    },
]----------------------------------------

FILE: ./src/components/header/Hamburger.tsx
----------------------------------------
import React from 'react'
import { Box } from '@mui/material'

interface Props {
  open: boolean
  setOpen: (status: boolean) => void
}

const Hamburger: React.FC<Props> = (props) => {
  const { open, setOpen } = props

  return (
    <Box
      onClick={() => setOpen(!open)} 
      className={open ? 'open' : ''}
      sx={{
        width: 36,
        height: 28,
        position: 'relative',
        transform: 'rotate(0deg)',
        transition: '320ms ease-in-out',
        cursor: 'pointer',
        
        '& span': {
          display: 'block',
          position: 'absolute',
          height: 4,
          width: '100%',
          bgcolor: 'text.primary',
          borderRadius: '8px',
          opacity: 1,
          right: 0,
          transform: 'rotate(0deg)',
          transition: '320ms ease-in-out',

          '&:nth-child(1)': {
            top: 0,
            width: '100%'
          },
          
          '&:nth-child(2), &:nth-child(3)': {
            top: 12,
            width: '80%'
          },

          '&:nth-child(4)': {
            top: 24,
            width: '66%'
          },
        },
        '&.open': {
          '& span': {
            '&:nth-child(1)': {
              top: 18,
              width: '0%',
              right: '40%'
            },
            
            '&:nth-child(2)': {
              transform: 'rotate(45deg)',
              width: '100%',
              right: '-5%'
            },
            
            '&:nth-child(3)': {
              transform: 'rotate(-45deg)',
              width: '100%',
              right: '-5%'
            },
    
            '&:nth-child(4)': {
              top: 18,
              width: '0%',
              right: '40%'
            },
          }
        }
      }}>
      <span></span>
      <span></span>
      <span></span>
      <span></span>
    </Box>
  )
}

export default Hamburger----------------------------------------

FILE: ./src/components/header/Item.tsx
----------------------------------------
import React from 'react'
import Link from 'next/link'
import { Box, Typography } from '@mui/material'
import { usePathname } from 'next/navigation'

interface Props {
  label: string
  path: string
  cta?: boolean
}

const Item: React.FC<Props> = (props) => {
  const { label, path, cta = false } = props
  const pathname = usePathname()

  const isActive = pathname === path

  return (
    <Link style={{ textDecoration: 'none' }} href={path}>
      <Box
        sx={styles}
        className={`menu-item ${cta && 'cta'} ${isActive && 'active'}`}
      >
        <Typography variant="button">{label}</Typography>
      </Box>
    </Link>
  )
}

const styles = {
  bgcolor: 'grey.200',
  px: '12px',
  py: '8px',
  borderRadius: '8px',
  fontSize: '16px',
  boxShadow: 1,
  cursor: 'pointer',
  transition: 'all ease-in-out 200ms',

  '&:hover': {
    bgcolor: 'grey.300',
  },

  '&.active': {
    bgcolor: 'primary.main',
    color: 'common.white',
  },

  '&.cta': {
    color: 'common.white',
    bgcolor: 'primary.main',

    '&:hover': {
      bgcolor: 'primary.dark',
    },
  },
}

export default Item
----------------------------------------

FILE: ./src/components/header/MobileItem.tsx
----------------------------------------
import React from 'react'
import Link from 'next/link'
import { Box, Typography } from '@mui/material'
import { usePathname } from 'next/navigation'

interface Props {
  label: string
  path: string
  cta?: boolean
}

const MobileItem: React.FC<Props> = (props) => {
  const { label, path, cta = false } = props
  const pathname = usePathname()
  const isActive = pathname === path

  return (
    <Link href={path}>
      <Box
        sx={styles}
        className={`menu-item ${isActive && 'active'} ${cta && 'cta'}`}
      >
        <Typography variant="button" fontSize="8vw">
          {label}
        </Typography>
      </Box>
    </Link>
  )
}

const styles = {
  cursor: 'pointer',
  transition: 'all ease-in-out 200ms',
  textAlign: 'right',
  mb: '20px !important',

  '&.active': {
    color: 'primary.main',
  },
}

export default MobileItem
----------------------------------------

FILE: ./src/components/header/Modal.tsx
----------------------------------------
import React from 'react'
import { Box, BoxProps, Modal as MuiModal } from '@mui/material'

interface Props extends BoxProps {
  open: boolean
  setOpen: (status: boolean) => void
}

const Modal: React.FC<Props> = (props) => {
  const { open, setOpen, children } = props

  return (
    <MuiModal
      open={open}
      onClose={() => setOpen(false)}
      aria-labelledby='mobile-menu'
      aria-describedby='mobile-hamburger-menu'
      sx={{
        position: 'fixed',
        zIndex: '1000',
        bgcolor: 'rgba(255,255,255,0.66)',
        backdropFilter: 'blur(8px)',
        p: 2,
        pt: 13,
        '& .MuiBackdrop-root': {
          bgcolor: 'transparent'
        }
      }}
    >
      <Box sx={{
        outline: 'none'
      }}>
        {children}
      </Box>
    </MuiModal>
  )
}

export default Modal----------------------------------------

FILE: ./src/components/header/index.tsx
----------------------------------------
import React from 'react'
import { Box, useMediaQuery, useTheme } from '@mui/material'
import Link from 'next/link'
import Heusser from '../icons/brand/Heusser'
import Hamburger from './Hamburger'
import Item from './Item'
import Modal from './Modal'
import MobileItem from './MobileItem'

interface MenuItem {
  label: string
  path: string
  cta?: boolean
}

const items: MenuItem[] = [
  { label: 'Sortiment', path: '/products' },
  { label: 'Neuigkeiten', path: '/news' },
  { label: 'Über uns', path: '/about' },
]

const ctaItems: MenuItem[] = [
  { label: 'Bestellen', path: '/bestellen', cta: true },
]

const Header = () => {
  const theme = useTheme()
  const isMobile = useMediaQuery(theme.breakpoints.down('md'))
  const [open, setOpen] = React.useState(false)

  return (
    <Box
      sx={{
        position: 'relative',
      }}
    >
      <Box sx={styles.header}>
        <Link href="/">
          <Box sx={styles.logo}>
            {/* Pass the CI color to the Heusser logo component */}
            <Heusser color={theme.palette.primary.main} />
          </Box>
        </Link>
        {!isMobile && (
          <Box
            sx={{
              display: 'flex',
            }}
          >
            <Box sx={styles.menu}>
              {items.map((item) => (
                <Item key={item.label} {...item} />
              ))}
            </Box>
            <Box sx={styles.ctas}>
              {ctaItems.map((item) => (
                <Item key={item.label} {...item} />
              ))}
            </Box>
          </Box>
        )}
        {isMobile && <Hamburger setOpen={setOpen} open={open} />}
      </Box>
      {isMobile && (
        <Modal setOpen={setOpen} open={open}>
          <Box sx={styles.mobileMenu}>
            {items.map((item) => (
              <MobileItem key={item.label} {...item} />
            ))}
            {ctaItems.map((item) => (
              <MobileItem key={item.label} {...item} />
            ))}
          </Box>
        </Modal>
      )}
    </Box>
  )
}

const styles = {
  header: {
    position: 'fixed',
    zIndex: 10001,
    top: 16,
    left: 16,
    height: 70,
    width: 'calc(100% - 32px)',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between',
    bgcolor: 'background.paper',
    boxShadow: 1,
    borderRadius: '8px',
    p: 2,
  },
  logo: {
    cursor: 'pointer',
    '& svg': {
      maxHeight: 40,
      width: 'auto',
    },
  },
  menu: {
    display: 'flex',
    position: 'absolute',
    top: 16,
    left: '50%',
    transform: 'translateX(-50%)',

    '& .menu-item': {
      mx: 1,
    },
  },
  mobileMenu: {
    display: 'flex',
    flexDirection: 'column',

    '& .menu-item': {
      mb: 2,
    },
  },
  ctas: {
    display: 'flex',
    '& .menu-item': {
      ml: 1,
    },
  },
}

export { Header }
----------------------------------------

FILE: ./src/components/home/hero/Hero.tsx
----------------------------------------
import React from 'react'
import { Box } from '@mui/material'
import Baeckerei from '../../icons/brand/Baeckerei'
import Wappen from '../../icons/brand/Wappen'

const Hero: React.FC = () => {
  React.useEffect(() => {
    const video: HTMLVideoElement = document.getElementById(
      'background-video'
    ) as HTMLVideoElement
    video.play()
  }, [])

  return (
    <Box sx={styles.hero}>
      <Box sx={styles.logo}>
        <Wappen />
        <Baeckerei />
      </Box>
      <Box sx={styles.overlay} />
      <video
        className="video"
        id="background-video"
        playsInline
        preload="none"
        autoPlay
        muted={true}
        loop
      >
        <source src="/assets/images/stock/bg_video.mp4" type="video/mp4" />
        <source src="/assets/images/stock/bg_video.webm" type="video/webm" />
        Your browser does not support the video tag.
      </video>
    </Box>
  )
}

export default Hero

const styles = {
  hero: {
    height: '100vh',
    widht: '100%',
    overflow: 'hidden',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',

    '& .video': {
      position: 'absolute',
      width: '100%',
      height: '100vh',
      objectFit: 'cover',
      left: 0,
      right: 0,
      top: 0,
      bottom: 0,
      zIndex: 0,
    },
  },
  logo: {
    position: 'relative',
    zIndex: 10,
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    color: 'white',
    transform: { xs: 'scale(0.5)', sm: 'scale(0.6)', md: 'scale(1)' },
  },
  overlay: {
    position: 'absolute',
    zIndex: 1,
    top: 0,
    left: 0,
    width: '100%',
    height: '100vh',
    bgcolor: '#8e68116b',
  },
}
----------------------------------------

FILE: ./src/components/home/map/DynamicMap.tsx
----------------------------------------
'use client'
import dynamic from 'next/dynamic'

// Dynamically import the OpenStreetMap component with SSR disabled
const DynamicMap = dynamic(() => import('./OpenStreetMap'), {
  ssr: false,
  loading: () => (
    <div style={{ height: '100%', width: '100%', background: '#f0f0f0' }}>
      Loading map...
    </div>
  ),
})

export default DynamicMap
----------------------------------------

FILE: ./src/components/home/map/Info.tsx
----------------------------------------
import { Box, Typography } from '@mui/material'
import React from 'react'

interface Props {
  label: string
  value: string
}

const Info: React.FC<Props> = (props) => {
  const { label, value } = props

  return (
    <Box sx={styles.info}>
      <Typography
        fontWeight='bold'
        variant='body2'
        color='text.disabled'
      >
        {label}
      </Typography>
      <Typography>{value}</Typography>
    </Box>
  )
}

const styles = {
  info: {
    mb: 1
  }
}

export default Info----------------------------------------

FILE: ./src/components/home/map/Marker.tsx
----------------------------------------
import { Box } from '@mui/material'
import React from 'react'

const Marker = () => {
  return (
    <Box sx={{
      transform: 'translate(-20%, -120%)',
      width: 49,
    }}>
      <svg width="49" height="75" viewBox="0 0 49 75" fill="none" xmlns="http://www.w3.org/2000/svg">
      <g filter="url(#filter0_d_53_3103)">
      <path fillRule="evenodd" clipRule="evenodd" d="M44.0168 33.7034C45.9146 30.4045 47 26.579 47 22.5C47 10.0736 36.9264 0 24.5 0C12.0736 0 2 10.0736 2 22.5C2 27.0726 3.36403 31.3267 5.7074 34.8774L24.5496 70.2809L44.0168 33.7034Z" fill="#D038BA"/>
      <g filter="url(#filter1_d_53_3103)">
      <circle cx="24.5" cy="22.5" r="20.4775" fill="white"/>
      </g>
      <path d="M16.827 15.5467C16.827 16.1278 16.9702 16.6604 17.2566 17.1446C17.543 17.6046 17.6862 17.9799 17.6862 18.2704C17.6862 18.5367 17.6146 18.7788 17.4714 18.9967C17.352 19.2146 17.185 19.3236 16.9702 19.3236C16.5644 19.3236 16.2303 18.9725 15.9678 18.2704C15.7052 17.5683 15.574 16.8299 15.574 16.0551C15.574 14.893 15.9916 13.852 16.827 12.932C17.6862 12.012 18.7721 11.552 20.0848 11.552C20.9678 11.552 21.6242 11.9878 22.0538 12.8594C22.5072 13.7067 22.734 14.6751 22.734 15.7646C22.734 16.8541 22.6982 17.883 22.6266 18.8515C22.5788 19.7957 22.5311 20.5341 22.4834 21.0667C22.4356 21.5751 22.3402 22.3983 22.197 23.5362C22.0538 24.6499 21.9583 25.4246 21.9106 25.8604C23.8199 25.8604 25.8247 24.8799 27.9249 22.9188C28.2113 19.4325 28.6051 16.7088 29.1063 14.7478C29.6314 12.7625 30.1565 11.3704 30.6815 10.5715C31.2066 9.77252 31.7674 9.37305 32.3641 9.37305C32.9846 9.37305 33.4858 9.65147 33.8677 10.2083C34.2734 10.7651 34.4763 11.4309 34.4763 12.2057C34.4763 15.0625 33.2233 18.1493 30.7173 21.4662C30.5741 23.3788 30.5025 25.1462 30.5025 26.7683C30.5025 28.3662 30.7293 29.9277 31.1827 31.453C31.6601 32.9541 31.8987 33.7893 31.8987 33.9588C31.8987 34.1525 31.7675 34.2977 31.5049 34.3946C31.2424 34.5156 30.956 34.5762 30.6457 34.5762C29.8104 34.5762 29.1302 34.3583 28.6051 33.9225C28.3426 33.7046 28.1278 32.9662 27.9607 31.7072C27.7937 30.4483 27.7101 29.2741 27.7101 28.1846C27.7101 27.0709 27.7459 25.8725 27.8175 24.5893C25.6934 26.4293 23.6767 27.3856 21.7674 27.4583C21.7435 27.7972 21.7196 28.3662 21.6958 29.1651C21.6719 29.9399 21.6361 30.5209 21.5884 30.9083C21.5406 31.2714 21.4452 31.6951 21.302 32.1793C21.0633 33.0751 20.4905 33.523 19.5836 33.523C19.0346 33.523 18.7602 33.0509 18.7602 32.1067C18.7602 31.1383 18.9034 29.4677 19.1898 27.0951C18.1158 26.6351 17.5788 25.8241 17.5788 24.662C17.5788 23.8146 17.7936 23.1004 18.2232 22.5193C18.6528 21.9141 19.1778 21.6114 19.7984 21.6114C20.0132 19.3841 20.1206 17.6651 20.1206 16.4546C20.1206 14.2757 19.7864 13.1862 19.1182 13.1862C17.5907 13.1862 16.827 13.973 16.827 15.5467ZM33.3307 12.823C33.3307 12.4599 33.271 12.133 33.1517 11.8425C33.0562 11.5278 32.925 11.3704 32.7579 11.3704C32.0897 11.3704 31.4811 13.9972 30.9321 19.2509C32.5312 16.7815 33.3307 14.6388 33.3307 12.823ZM19.691 22.7736C19.3568 23.0157 19.1898 23.3425 19.1898 23.7541C19.1898 24.1657 19.2852 24.5046 19.4762 24.7709L19.691 22.7736Z" fill="#131F37"/>
      </g>
      <defs>
      <filter id="filter0_d_53_3103" x="0" y="0" width="49" height="74.2808" filterUnits="userSpaceOnUse" colorInterpolationFilters="sRGB">
      <feFlood floodOpacity="0" result="BackgroundImageFix"/>
      <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
      <feOffset dy="2"/>
      <feGaussianBlur stdDeviation="1"/>
      <feComposite in2="hardAlpha" operator="out"/>
      <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.16 0"/>
      <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_53_3103"/>
      <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_53_3103" result="shape"/>
      </filter>
      <filter id="filter1_d_53_3103" x="2.02246" y="2.02246" width="44.9551" height="44.9551" filterUnits="userSpaceOnUse" colorInterpolationFilters="sRGB">
      <feFlood floodOpacity="0" result="BackgroundImageFix"/>
      <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
      <feOffset dy="2"/>
      <feGaussianBlur stdDeviation="1"/>
      <feComposite in2="hardAlpha" operator="out"/>
      <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.16 0"/>
      <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_53_3103"/>
      <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_53_3103" result="shape"/>
      </filter>
      </defs>
    </svg>
    </Box>
  )
}

export default Marker----------------------------------------

FILE: ./src/components/home/map/OpenStreetMap.tsx
----------------------------------------
'use client'
import React, { useEffect } from 'react'
import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'
import 'leaflet/dist/leaflet.css'
import { Box, Button, Typography } from '@mui/material'
import DirectionsIcon from '@mui/icons-material/Directions'

// Fix for Leaflet marker icons in Next.js
import L from 'leaflet'
import markerIcon2x from 'leaflet/dist/images/marker-icon-2x.png'
import markerIcon from 'leaflet/dist/images/marker-icon.png'
import markerShadow from 'leaflet/dist/images/marker-shadow.png'

interface MapProps {
  position: [number, number] // [latitude, longitude]
  name: string
  address: string
}

export default function Map({ position, name, address }: MapProps) {
  // Fix Leaflet icons - using bracket notation for _getIconUrl
  useEffect(() => {
    // @ts-ignore - TypeScript doesn't like accessing private properties
    delete L.Icon.Default.prototype['_getIconUrl']

    L.Icon.Default.mergeOptions({
      iconUrl: markerIcon.src || markerIcon,
      iconRetinaUrl: markerIcon2x.src || markerIcon2x,
      shadowUrl: markerShadow.src || markerShadow,
    })
  }, [])

  // Create Google Maps direction URL
  const googleMapsUrl = `https://www.google.com/maps/dir/?api=1&destination=${position[0]},${position[1]}&travelmode=driving`

  return (
    <Box sx={{ height: '100%', width: '100%', position: 'relative' }}>
      <MapContainer
        center={position}
        zoom={15}
        style={{ height: '100%', width: '100%' }}
        scrollWheelZoom={false}
      >
        <TileLayer
          attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
        />
        <Marker position={position}>
          <Popup>
            <Typography variant="subtitle1">{name}</Typography>
            <Typography variant="body2">{address}</Typography>
          </Popup>
        </Marker>
      </MapContainer>

      {/* Google Maps Direction Button - already in parent component */}
    </Box>
  )
}
----------------------------------------

FILE: ./src/components/home/map/index.tsx
----------------------------------------
// website/src/components/home/map/index.tsx
import React from 'react'
import {
  Box,
  Typography,
  Divider,
  useTheme,
  useMediaQuery,
  Container,
} from '@mui/material'
import Info from './Info'
import { ZEITEN } from './zeiten'
import Button from '../../button/Index'
import DynamicMap from './DynamicMap'
import DirectionsIcon from '@mui/icons-material/Directions'

const Map: React.FC = () => {
  const theme = useTheme()
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'))

  // Position for map marker [latitude, longitude]
  const position: [number, number] = [49.301429495245586, 7.369493502873482]

  // Create Google Maps direction URL
  const googleMapsUrl = `https://www.google.com/maps/dir/?api=1&destination=${position[0]},${position[1]}&travelmode=driving`

  const map = (
    <Box sx={styles.map}>
      <DynamicMap
        position={position}
        name="Böckerei Heusser"
        address="Eckstraße 3, 66424 Homburg, Deutschland"
      />
    </Box>
  )

  return (
    <Box sx={styles.section}>
      {!isMobile && map}
      <Container>
        <Box sx={styles.info}>
          <Typography variant="h6" gutterBottom>
            Öffnungszeiten
          </Typography>
          {ZEITEN.map((item) => (
            <Info key={item.label} {...item} />
          ))}
          <Divider sx={{ my: 2 }} />
          <Typography variant="h6" gutterBottom>
            Adresse
          </Typography>
          {isMobile && map}
          <Typography fontWeight="bold">Eckstraße 3</Typography>
          <Typography color="text.secondary">66424 Homburg</Typography>
          <Typography color="text.secondary">Deutschland</Typography>
          <Button
            sx={{ mt: 2 }}
            fullWidth
            startIcon={<DirectionsIcon />}
            href={googleMapsUrl}
            target="_blank"
            rel="noopener noreferrer"
          >
            Route starten
          </Button>
          <Divider sx={{ my: 2 }} />
          <Typography variant="h6" gutterBottom>
            Kontakt
          </Typography>
          <Typography>06841 2229</Typography>
          <Typography>01522 6621236</Typography>
          <Button sx={{ mt: 2 }} fullWidth>
            Anrufen
          </Button>
          <Button sx={{ mt: 2 }} fullWidth>
            Bestellen
          </Button>
        </Box>
      </Container>
    </Box>
  )
}

const styles = {
  section: {
    minHeight: '100vh',
    width: '100%',
    bgcolor: 'grey.300',
    position: 'relative',
    py: { xs: 3, sm: 0 },
  },
  map: {
    position: { xs: 'relative', sm: 'absolute' },
    zIndex: 1,
    top: 0,
    left: 0,
    height: { xs: '240px', sm: '100vh' },
    borderRadius: { xs: '8px', sm: '0' },
    mb: { xs: 2, sm: '0' },
    overflow: 'hidden',
    width: '100%',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
  },
  info: {
    position: { xs: 'relative', sm: 'absolute' },
    zIndex: 2,
    bgcolor: 'background.paper',
    borderRadius: '8px',
    boxShadow: 1,
    p: 3,
  },
}

export default Map
----------------------------------------

FILE: ./src/components/home/map/zeiten.ts
----------------------------------------
export const ZEITEN = [
  {
    label: 'Di, Mi, Do, Fr',
    value: '6:00 - 15:00 Uhr',
  },
  {
    label: 'Sa',
    value: '06:00 - 12:30 Uhr',
  },
  {
    label: 'So und Feiertage',
    value: '08:00 - 11:00 Uhr',
  },
  {
    label: 'Mo',
    value: 'Ruhetag (geschlossen)',
  },
]
----------------------------------------

FILE: ./src/components/home/news/Card.tsx
----------------------------------------
import React from 'react'
import { Box, Chip, Typography } from '@mui/material'
import { useRouter } from 'next/navigation'

export interface NewsType {
  id: number
  name: string
  category: string
  image: string
  text: string
  shortDescription: string
  slug: string
}

const Card: React.FC<NewsType> = (props) => {
  const { id, name, category, image, shortDescription, slug } = props
  const router = useRouter()

  return (
    <Box
      key={id}
      sx={styles.card}
      onClick={() => router.push(`/news/${slug}`)}
      className="news-card"
    >
      <Box
        sx={{
          ...styles.image,
          backgroundImage: `url(${image})`,
        }}
        className="image"
      ></Box>
      <Typography sx={styles.name}>{name}</Typography>
      <Typography variant="body2" color="text.secondary">
        {shortDescription}
      </Typography>
      <Box sx={styles.footer}>
        <Chip size="small" label={category} />
      </Box>
    </Box>
  )
}

const styles = {
  card: {
    bgcolor: 'background.paper',
    borderRadius: '8px',
    boxShadow: 1,
    display: 'flex',
    flexDirection: 'column',
    p: 1,
    transition: 'all ease-in-out 200ms',
    cursor: 'pointer',

    '&:hover': {
      transform: 'translateY(-4px)',
      bgcolor: 'grey.300',
      '& .image': {
        bgcolor: 'grey.50',
      },
    },
  },
  image: {
    mb: 1,
    minHeight: 160,
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    bgcolor: 'grey.200',
    backgroundPosition: 'center',
    backgroundSize: 'cover',
    borderRadius: '8px',
    transition: 'all ease-in-out 300ms',
    '& img': {
      maxHeight: 120,
    },
  },
  name: {
    fontWeight: 'bold',
  },
  footer: {
    mt: 1,
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
}

export default Card
----------------------------------------

FILE: ./src/components/home/news/index.tsx
----------------------------------------
import React from 'react'
import { Box, BoxProps, Container, Grid } from '@mui/material'

import Card from './Card'
import { NEWS } from '../../../mocks/news'

interface Props extends BoxProps {
  header?: React.ReactNode
}

const News: React.FC<Props> = (props) => {
  const { header, sx } = props

  return (
    <Box sx={sx}>
      <Container>
        {header}
        <Grid container spacing={2}>
          {NEWS.map((item) => (
            <Grid key={item.id} item xs={12} sm={6} md={4} lg={3}>
              <Card {...item} />
            </Grid>
          ))}
        </Grid>
      </Container>
    </Box>
  )
}

export default News
----------------------------------------

FILE: ./src/components/home/products/ProductCard.tsx
----------------------------------------
import React from 'react'
import { useRouter } from 'next/navigation'
import {
  Box,
  Chip,
  Typography,
  Card,
  CardContent,
  CardActionArea,
  CardMedia,
} from '@mui/material'
import AccessibilityNewIcon from '@mui/icons-material/AccessibilityNew'

import { formatter } from '../../../utils/formatPrice'

interface Props {
  id: number
  name: string
  category: string
  image: string
  price: number
  description?: string
}

const ProductCard: React.FC<Props> = (props) => {
  const { id, name, category, image, price, description } = props
  const router = useRouter()

  const handleCardClick = () => {
    router.push(`products/${id}`)
  }

  const handleKeyPress = (event: React.KeyboardEvent) => {
    if (event.key === 'Enter' || event.key === ' ') {
      event.preventDefault()
      handleCardClick()
    }
  }

  return (
    <Card
      elevation={2}
      sx={styles.card}
      onClick={handleCardClick}
      onKeyDown={handleKeyPress}
      tabIndex={0}
      role="button"
      aria-label={`Produkt anzeigen: ${name}, Preis: ${formatter.format(
        price
      )}`}
    >
      <CardActionArea>
        <CardMedia component="div" sx={styles.imageContainer}>
          {/* Using alt text for better accessibility */}
          <img
            src={image}
            alt={`Bild von ${name}`}
            style={{
              maxWidth: '85%',
              maxHeight: '85%',
              objectFit: 'contain' as const, // Use type assertion here
              transition: 'transform 0.3s ease',
            }}
          />
        </CardMedia>

        <CardContent sx={styles.content}>
          <Box sx={styles.nameContainer}>
            <Typography variant="h6" component="h3" sx={styles.name}>
              {name}
            </Typography>

            {/* Optional description with truncation */}
            {description && (
              <Typography
                variant="body2"
                color="text.secondary"
                sx={styles.description}
              >
                {description}
              </Typography>
            )}
          </Box>

          <Box sx={styles.footer}>
            <Chip
              size="small"
              label={category}
              color="primary"
              variant="outlined"
              sx={styles.categoryChip}
            />
            <Typography
              variant="button"
              fontWeight="bold"
              fontSize="16px"
              aria-label={`Preis: ${formatter.format(price)}`}
            >
              {formatter.format(price)}
            </Typography>
          </Box>
        </CardContent>
      </CardActionArea>
    </Card>
  )
}

const styles = {
  card: {
    display: 'flex',
    flexDirection: 'column',
    height: '100%',
    transition: 'transform 0.2s ease, box-shadow 0.2s ease',
    '&:hover, &:focus': {
      transform: 'translateY(-8px)',
      boxShadow: 6,
    },
    outline: 'none',
  },
  imageContainer: {
    backgroundColor: 'grey.100',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 2,
    height: 160,
    position: 'relative',
    overflow: 'hidden',
  },
  // We're not using this anymore, applying styles directly to the img element
  // productImage: {
  //   maxWidth: '85%',
  //   maxHeight: '85%',
  //   objectFit: 'contain',
  //   transition: 'transform 0.3s ease',
  // },
  content: {
    display: 'flex',
    flexDirection: 'column',
    flexGrow: 1,
    justifyContent: 'space-between',
  },
  nameContainer: {
    marginBottom: 1,
  },
  name: {
    fontWeight: 'bold',
    fontSize: '1.1rem',
    lineHeight: 1.2,
    marginBottom: 0.5,
    // Ensure long names don't break layout
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    display: '-webkit-box',
    WebkitLineClamp: 2,
    WebkitBoxOrient: 'vertical',
  },
  description: {
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    display: '-webkit-box',
    WebkitLineClamp: 2,
    WebkitBoxOrient: 'vertical',
    fontSize: '0.875rem',
  },
  footer: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginTop: 'auto',
    paddingTop: 1,
  },
  categoryChip: {
    maxWidth: '60%',
    '& .MuiChip-label': {
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      whiteSpace: 'nowrap',
    },
  },
}

export default ProductCard
----------------------------------------

FILE: ./src/components/home/products/index.tsx
----------------------------------------
import React from 'react'
import {
  Box,
  BoxProps,
  Container,
  Grid,
  Typography,
  Pagination,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  InputAdornment,
  TextField,
  Divider,
} from '@mui/material'
import SearchIcon from '@mui/icons-material/Search'
import SortIcon from '@mui/icons-material/Sort'
import ProductCard from './ProductCard'
import { Product } from '../../products/types'

interface Props extends BoxProps {
  header?: React.ReactNode
  items: Product[]
  showControls?: boolean
  title?: string
}

const Products: React.FC<Props> = (props) => {
  const { items, header, showControls = false, title, sx } = props
  const [page, setPage] = React.useState(1)
  const [sortBy, setSortBy] = React.useState('')
  const [searchTerm, setSearchTerm] = React.useState('')

  // Items per page
  const itemsPerPage = 8

  // Filter and sort products
  const filteredItems = React.useMemo(() => {
    let result = [...items]

    // Apply search filter if search term exists
    if (searchTerm) {
      const lowerSearch = searchTerm.toLowerCase()
      result = result.filter(
        (item) =>
          item.name.toLowerCase().includes(lowerSearch) ||
          item.category.toLowerCase().includes(lowerSearch)
      )
    }

    // Apply sorting
    if (sortBy === 'price-asc') {
      result.sort((a, b) => a.price - b.price)
    } else if (sortBy === 'price-desc') {
      result.sort((a, b) => b.price - a.price)
    } else if (sortBy === 'name') {
      result.sort((a, b) => a.name.localeCompare(b.name))
    }

    return result
  }, [items, searchTerm, sortBy])

  // Calculate pagination
  const totalPages = Math.ceil(filteredItems.length / itemsPerPage)
  const displayedItems = filteredItems.slice(
    (page - 1) * itemsPerPage,
    page * itemsPerPage
  )

  // Reset to page 1 when search or sort changes
  React.useEffect(() => {
    setPage(1)
  }, [searchTerm, sortBy])

  return (
    <Box
      sx={{
        py: 4,
        ...sx,
      }}
      component="section"
      aria-label="Produkt Liste"
    >
      <Container>
        {header ||
          (title && (
            <Box sx={{ mb: 3 }}>
              <Typography
                variant="h4"
                component="h2"
                fontWeight="bold"
                gutterBottom
              >
                {title}
              </Typography>
              <Divider sx={{ mb: 2 }} />
            </Box>
          ))}

        {/* Search and Filter Controls */}
        {showControls && filteredItems.length > 0 && (
          <Box
            sx={{
              display: 'flex',
              flexDirection: { xs: 'column', sm: 'row' },
              justifyContent: 'space-between',
              alignItems: { xs: 'stretch', sm: 'center' },
              mb: 3,
              gap: 2,
            }}
          >
            <TextField
              label="Produkte suchen"
              variant="outlined"
              size="small"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              sx={{ flexGrow: 1, maxWidth: { sm: 300 } }}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <SearchIcon />
                  </InputAdornment>
                ),
              }}
            />

            <FormControl size="small" sx={{ minWidth: 200 }}>
              <InputLabel id="sort-select-label">Sortieren nach</InputLabel>
              <Select
                labelId="sort-select-label"
                value={sortBy}
                label="Sortieren nach"
                onChange={(e) => setSortBy(e.target.value)}
                startAdornment={
                  <InputAdornment position="start">
                    <SortIcon />
                  </InputAdornment>
                }
              >
                <MenuItem value="">
                  <em>Standard</em>
                </MenuItem>
                <MenuItem value="price-asc">Preis aufsteigend</MenuItem>
                <MenuItem value="price-desc">Preis absteigend</MenuItem>
                <MenuItem value="name">Name</MenuItem>
              </Select>
            </FormControl>
          </Box>
        )}

        {/* Product Grid */}
        {displayedItems.length > 0 ? (
          <Grid container spacing={3} aria-live="polite">
            {displayedItems.map((item) => (
              <Grid key={item.id} item xs={12} sm={6} md={4} lg={3}>
                <ProductCard {...item} />
              </Grid>
            ))}
          </Grid>
        ) : (
          <Box
            sx={{
              textAlign: 'center',
              py: 8,
            }}
          >
            <Typography variant="h6" color="text.secondary">
              Keine Produkte gefunden
            </Typography>
          </Box>
        )}

        {/* Pagination */}
        {totalPages > 1 && (
          <Box
            sx={{
              display: 'flex',
              justifyContent: 'center',
              mt: 4,
            }}
          >
            <Pagination
              count={totalPages}
              page={page}
              onChange={(_, newPage) => setPage(newPage)}
              color="primary"
              size="large"
              showFirstButton
              showLastButton
              aria-label="Produkt-Seitennavigation"
            />
          </Box>
        )}
      </Container>
    </Box>
  )
}

export default Products
----------------------------------------

FILE: ./src/components/home/testimonial/Card.tsx
----------------------------------------
import React from 'react'
import { Typography, Box, Paper, Rating, Avatar, Divider } from '@mui/material'
import FormatQuoteIcon from '@mui/icons-material/FormatQuote'

interface Props {
  name: string
  stars: number
  text: string
  avatar?: string
  date?: string
}

const TestimonialCard: React.FC<Props> = (props) => {
  const { name, stars, text, avatar, date } = props

  return (
    <Paper
      elevation={2}
      sx={{
        p: 3,
        height: '100%',
        display: 'flex',
        flexDirection: 'column',
        position: 'relative',
        borderRadius: 2,
        transition: 'transform 0.2s ease, box-shadow 0.2s ease',
        '&:hover': {
          transform: 'translateY(-4px)',
          boxShadow: 4,
        },
      }}
    >
      {/* Decorative quote mark */}
      <FormatQuoteIcon
        sx={{
          position: 'absolute',
          top: 12,
          right: 12,
          fontSize: 40,
          color: 'primary.light',
          opacity: 0.2,
        }}
        aria-hidden="true"
      />

      {/* Accessible star rating */}
      <Box sx={{ mb: 2 }}>
        <Rating
          value={stars}
          readOnly
          precision={0.5}
          aria-label={`Bewertung: ${stars} von 5 Sternen`}
        />
      </Box>

      {/* Testimonial content - Fixed unescaped quotes */}
      <Typography
        variant="body1"
        color="text.primary"
        paragraph
        sx={{
          mb: 'auto',
          fontStyle: 'italic',
          lineHeight: 1.6,
          position: 'relative',
          zIndex: 1,
        }}
      >
        &ldquo;{text}&rdquo;
      </Typography>

      <Divider sx={{ my: 2 }} />

      {/* Customer information */}
      <Box sx={{ display: 'flex', alignItems: 'center' }}>
        <Avatar
          src={avatar}
          alt={name}
          sx={{
            width: 48,
            height: 48,
            mr: 2,
            bgcolor: avatar ? 'transparent' : 'primary.main',
          }}
        >
          {!avatar && name.charAt(0)}
        </Avatar>

        <Box>
          <Typography variant="subtitle1" fontWeight="bold" component="p">
            {name}
          </Typography>
          {date && (
            <Typography variant="caption" color="text.secondary" component="p">
              {date}
            </Typography>
          )}
        </Box>
      </Box>
    </Paper>
  )
}

export default TestimonialCard
----------------------------------------

FILE: ./src/components/home/testimonial/index.tsx
----------------------------------------
import React from 'react'
import { Box, Container, Grid, Typography, Divider } from '@mui/material'
import { TESTIMONIALS } from '../../../mocks/testimonials'
import Card from './Card'

const Testimonial = () => {
  return (
    <Box
      sx={{
        bgcolor: 'background.paper',
        py: 6,
      }}
    >
      <Container>
        <Box
          sx={{
            mb: 5,
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
          }}
        >
          <Typography
            sx={{ fontSize: { xs: '9vw' } }}
            variant="h3"
            gutterBottom
          ></Typography>
          <Typography
            variant="h3"
            align="center"
            sx={{
              fontSize: { xs: '9vw', sm: '2.5rem' },
              fontWeight: 'bold',
              mb: 1,
            }}
          >
            Kundenmeinungen
          </Typography>
          <Divider
            sx={{
              width: '80px',
              borderWidth: 2,
              borderColor: 'primary.main',
              mb: 2,
            }}
          />
          <Typography
            variant="subtitle1"
            align="center"
            color="text.secondary"
            sx={{ maxWidth: '800px' }}
          >
            Entdecken Sie, was unsere Kunden über uns sagen. Diese authentischen
            Bewertungen spiegeln unsere Hingabe zur Qualität und den herzlichen
            Service wider, den wir jeden Tag bieten.
          </Typography>
        </Box>
        <Grid container spacing={4}>
          {TESTIMONIALS.map((item) => (
            <Grid key={item.name} item xs={12} md={4}>
              <Card {...item} />
            </Grid>
          ))}
        </Grid>
      </Container>
    </Box>
  )
}

export default Testimonial
----------------------------------------

FILE: ./src/components/home/wochenanfebote/Card.tsx
----------------------------------------
import React from 'react'
import { Typography, Box, Paper, Chip, Divider } from '@mui/material'
import BakeryDiningIcon from '@mui/icons-material/BakeryDining'
import RestaurantIcon from '@mui/icons-material/Restaurant'
import CakeIcon from '@mui/icons-material/Cake'

// Export this interface so it can be imported in the index file
export interface SpecialOffer {
  type: 'bread' | 'meal' | 'pastry'
  name: string
  description?: string
  price?: string
}

export interface DailyOffer {
  name: string
  date: string
  specialOffers: SpecialOffer[]
}

const Card: React.FC<DailyOffer> = (props) => {
  const { name, date, specialOffers } = props

  // Get icon based on offer type
  const getIcon = (type: 'bread' | 'meal' | 'pastry') => {
    switch (type) {
      case 'bread':
        return <BakeryDiningIcon fontSize="small" />
      case 'meal':
        return <RestaurantIcon fontSize="small" />
      case 'pastry':
        return <CakeIcon fontSize="small" />
      default:
        return <BakeryDiningIcon fontSize="small" />
    }
  }

  // Get color based on offer type
  const getColor = (type: 'bread' | 'meal' | 'pastry') => {
    switch (type) {
      case 'bread':
        return 'primary'
      case 'meal':
        return 'secondary'
      case 'pastry':
        return 'success'
      default:
        return 'default'
    }
  }

  return (
    <Paper
      elevation={2}
      sx={{
        p: 2.5,
        height: '100%',
        transition: 'transform 0.2s',
        '&:hover': {
          transform: 'translateY(-5px)',
          boxShadow: 4,
        },
      }}
    >
      <Box
        sx={{
          mb: 2,
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between',
        }}
      >
        <Typography variant="h5" fontWeight="bold" color="primary.main">
          {name}
        </Typography>
        <Chip label={date} size="small" color="primary" variant="outlined" />
      </Box>

      <Divider sx={{ mb: 2 }} />

      {specialOffers && specialOffers.length > 0 ? (
        specialOffers.map((offer, index) => (
          <Box key={index} sx={{ mb: 1.5 }}>
            <Box sx={{ display: 'flex', alignItems: 'center', mb: 0.5 }}>
              <Chip
                icon={getIcon(offer.type)}
                label={offer.type.charAt(0).toUpperCase() + offer.type.slice(1)}
                size="small"
                color={getColor(offer.type) as any}
                sx={{ mr: 1 }}
              />
              <Typography variant="subtitle1" fontWeight="medium">
                {offer.name}
                {offer.price && ` - ${offer.price}`}
              </Typography>
            </Box>
            {offer.description && (
              <Typography variant="body2" color="text.secondary" sx={{ ml: 1 }}>
                {offer.description}
              </Typography>
            )}
          </Box>
        ))
      ) : (
        <Typography variant="body1" color="text.secondary" align="center">
          Geschlossen
        </Typography>
      )}
    </Paper>
  )
}

export default Card
----------------------------------------

FILE: ./src/components/home/wochenanfebote/index.tsx
----------------------------------------
import React from 'react'
import {
  Box,
  Container,
  Grid,
  Typography,
  Button,
  Divider,
} from '@mui/material'
import Card, { DailyOffer } from './Card'

import { ANGEBOTE } from './offers'

const Wochenangebote = () => {
  // Properly typed data with explicit type annotations

  return (
    <Box
      sx={{
        bgcolor: 'background.paper',
        py: 6,
      }}
    >
      <Container>
        <Box
          sx={{
            mb: 5,
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
          }}
        >
          <Typography
            variant="h3"
            align="center"
            sx={{
              fontSize: { xs: '9vw', sm: '2.5rem' },
              fontWeight: 'bold',
              mb: 1,
            }}
          >
            Unsere Wochenangebote
          </Typography>
          <Divider
            sx={{
              width: '80px',
              borderWidth: 2,
              borderColor: 'primary.main',
              mb: 2,
            }}
          />
          <Typography
            variant="subtitle1"
            align="center"
            color="text.secondary"
            sx={{ maxWidth: '800px' }}
          >
            Entdecken Sie unsere täglichen Spezialitäten - von knusprigen Broten
            über herzhafte Mittagsgerichte bis hin zu süßen Leckereien. Jeder
            Tag bringt neue Geschmackserlebnisse!
          </Typography>
        </Box>

        <Grid container spacing={3}>
          {ANGEBOTE.map((item) => (
            <Grid key={item.name} item xs={12} sm={6} md={4}>
              <Card {...item} />
            </Grid>
          ))}
        </Grid>

        <Box sx={{ mt: 4, textAlign: 'center' }}>
          <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
            Die Angebote können nach Verfügbarkeit variieren. Bitte fragen Sie
            bei Interesse nach.
          </Typography>
          <Button variant="outlined" color="primary" href="/products">
            Unser komplettes Sortiment entdecken
          </Button>
        </Box>
      </Container>
    </Box>
  )
}

export default Wochenangebote
----------------------------------------

FILE: ./src/components/home/wochenanfebote/offers.ts
----------------------------------------
import { DailyOffer } from './Card'

export const ANGEBOTE: DailyOffer[] = [
  {
    name: 'Dienstag',
    date: 'Täglich frisch',
    specialOffers: [
      {
        type: 'bread' as const,
        name: 'Mischbrot',
        description: 'Klassisches Mischbrot aus Roggen und Weizen',
      },
      {
        type: 'bread' as const,
        name: 'Haferbrot',
        description: 'Saftiges Brot mit knusprigen Haferflocken',
      },
    ],
  },
  {
    name: 'Mittwoch',
    date: 'Täglich frisch',
    specialOffers: [
      {
        type: 'bread' as const,
        name: 'Vollgut',
        description: 'Vollkornbrot mit besonders vielen Ballaststoffen',
      },
      {
        type: 'bread' as const,
        name: 'Walnuss',
        description: 'Mit gerösteten Walnussstücken',
      },
      {
        type: 'bread' as const,
        name: 'Buttermilchbrot',
        description: 'Besonders saftig durch Buttermilch',
      },
      {
        type: 'pastry' as const,
        name: 'Schnittentag',
        description:
          'Verschiedene Schnitten wie Sahneschnitten zum Sonderpreis',
      },
      {
        type: 'meal' as const,
        name: 'Schnitzelsandwich',
        description: 'Ab 11 Uhr, knuspriges Schnitzel im Brötchen',
      },
    ],
  },
  {
    name: 'Donnerstag',
    date: 'Täglich frisch',
    specialOffers: [
      {
        type: 'bread' as const,
        name: 'Dinkelmalz',
        description: 'Dinkelmalzbrot mit besonderem Aroma',
      },
      {
        type: 'bread' as const,
        name: 'Dinkelvollkorn',
        description: 'Herzhaftes Vollkornbrot aus 100% Dinkelmehl',
      },
      {
        type: 'meal' as const,
        name: 'Pizza & Flammkuchen',
        description: 'Ab 11 Uhr, selbstgemacht aus unserem Steinbackofen',
      },
    ],
  },
  {
    name: 'Freitag',
    date: 'Täglich frisch',
    specialOffers: [
      {
        type: 'bread' as const,
        name: 'Hildegard',
        description: 'Nach Hildegard von Bingen Rezeptur',
      },
      {
        type: 'bread' as const,
        name: 'Urkorn',
        description: 'Mit alten Getreidesorten gebacken',
      },
      {
        type: 'meal' as const,
        name: 'Mittagstisch',
        description: 'Ab 11 Uhr, wechselnde Mittagsgerichte der Woche',
      },
    ],
  },
  {
    name: 'Samstag',
    date: 'Kuchentag',
    specialOffers: [
      {
        type: 'bread' as const,
        name: 'Mischbrot',
        description: 'Klassisches Mischbrot aus Roggen und Weizen',
      },
      {
        type: 'bread' as const,
        name: 'Vitalbrot',
        description: 'Mit vielen gesunden Körnern und Saaten',
      },
      {
        type: 'bread' as const,
        name: 'Kerrbricher "Knorze"',
        description: 'Unsere regionale Spezialität mit knuspriger Kruste',
      },
      {
        type: 'pastry' as const,
        name: 'Hefezöpfe',
        description: 'Traditionell geflochten, gefüllt oder ungefüllt',
      },
      {
        type: 'pastry' as const,
        name: 'Kuchen des Tages',
        description: 'Verschiedene hausgemachte Kuchenspezialitäten',
      },
    ],
  },
  {
    name: 'Sonntag',
    date: '8:00 - 11:00 Uhr',
    specialOffers: [
      {
        type: 'bread' as const,
        name: 'Frische Brötchen',
        description: 'Klassisch, Mehrkorn, Laugen und Dinkel',
      },
      {
        type: 'pastry' as const,
        name: 'Kaffeestückchen',
        description: 'Verschiedene Gebäcke zum Sonntagskaffee',
      },
    ],
  },
]
----------------------------------------

FILE: ./src/components/icons/Message.tsx
----------------------------------------
import React from 'react'

const Message = () => {
  return (
    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M13.1143 1.84055C12.2689 1.13775 11.287 0.617489 10.2304 0.312554C9.1738 0.00762001 8.06545 -0.0753789 6.97517 0.0687875C4.9582 0.330565 3.11655 1.3494 1.82417 2.91841C0.531784 4.48743 -0.114455 6.48901 0.0166676 8.51674C0.14779 10.5445 1.04645 12.4463 2.53016 13.8362C4.01388 15.226 5.97144 15.9997 8.00536 16H12.6639C13.5484 15.9989 14.3963 15.6475 15.0217 15.0226C15.6471 14.3978 15.9989 13.5507 16 12.6671V7.54046V7.49846C15.9294 6.40891 15.637 5.34519 15.1409 4.37236C14.6447 3.39953 13.9551 2.53803 13.1143 1.84055ZM5.32446 4.66817H7.99335C8.1703 4.66817 8.34001 4.7384 8.46514 4.86341C8.59027 4.98842 8.66057 5.15797 8.66057 5.33475C8.66057 5.51154 8.59027 5.68109 8.46514 5.80609C8.34001 5.9311 8.1703 6.00133 7.99335 6.00133H5.32446C5.1475 6.00133 4.97779 5.9311 4.85267 5.80609C4.72754 5.68109 4.65724 5.51154 4.65724 5.33475C4.65724 5.15797 4.72754 4.98842 4.85267 4.86341C4.97779 4.7384 5.1475 4.66817 5.32446 4.66817ZM10.6622 11.334H5.32446C5.1475 11.334 4.97779 11.2637 4.85267 11.1387C4.72754 11.0137 4.65724 10.8442 4.65724 10.6674C4.65724 10.4906 4.72754 10.321 4.85267 10.196C4.97779 10.071 5.1475 10.0008 5.32446 10.0008H10.6622C10.8392 10.0008 11.0089 10.071 11.134 10.196C11.2592 10.321 11.3295 10.4906 11.3295 10.6674C11.3295 10.8442 11.2592 11.0137 11.134 11.1387C11.0089 11.2637 10.8392 11.334 10.6622 11.334ZM10.6622 8.66764H5.32446C5.1475 8.66764 4.97779 8.59741 4.85267 8.47241C4.72754 8.3474 4.65724 8.17785 4.65724 8.00106C4.65724 7.82428 4.72754 7.65473 4.85267 7.52972C4.97779 7.40472 5.1475 7.33449 5.32446 7.33449H10.6622C10.8392 7.33449 11.0089 7.40472 11.134 7.52972C11.2592 7.65473 11.3295 7.82428 11.3295 8.00106C11.3295 8.17785 11.2592 8.3474 11.134 8.47241C11.0089 8.59741 10.8392 8.66764 10.6622 8.66764Z" fill="currentColor"/>
    </svg>
  )
}

export default Message----------------------------------------

FILE: ./src/components/icons/Phone.tsx
----------------------------------------
import React from 'react'

const Phone = () => {
  return (
    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
      <g clipPath="url(#clip0_31_3539)">
        <path d="M15.5804 11.7424L13.3429 9.50953C12.5438 8.71208 11.1853 9.03109 10.8656 10.0677C10.6259 10.7855 9.82675 11.1842 9.10754 11.0247C7.50929 10.626 5.35166 8.55259 4.95209 6.87796C4.71236 6.16023 5.19183 5.36278 5.91104 5.12358C6.9499 4.8046 7.26955 3.44895 6.47043 2.6515L4.23288 0.418658C3.59358 -0.139553 2.63464 -0.139553 2.07525 0.418658L0.556915 1.9338C-0.96142 3.52869 0.71674 7.75515 4.47262 11.5031C8.2285 15.2511 12.4639 17.0055 14.0621 15.4106L15.5804 13.8955C16.1399 13.2575 16.1399 12.3006 15.5804 11.7424Z" fill="currentColor"/>
      </g>
      <defs>
        <clipPath id="clip0_31_3539">
          <rect width="16" height="16" fill="currentColor"/>
        </clipPath>
      </defs>
    </svg>

  )
}

export default Phone----------------------------------------

FILE: ./src/components/icons/User.tsx
----------------------------------------
import React from 'react'

const User = () => {
  return (
    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
      <g clipPath="url(#clip0_37_2127)">
        <path d="M5.38603 9.45454H10.6133C11.4629 9.45558 12.2774 9.79776 12.8782 10.406C13.4789 11.0143 13.8168 11.8389 13.8179 12.6991V16H2.1815V12.6991C2.18253 11.8389 2.52048 11.0143 3.12122 10.406C3.72196 9.79776 4.53645 9.45558 5.38603 9.45454V9.45454Z" fill="currentColor"/>
        <path d="M8 8C5.79086 8 4 6.20914 4 4C4 1.79086 5.79086 0 8 0C10.2091 0 12 1.79086 12 4C12 6.20914 10.2091 8 8 8Z" fill="currentColor"/>
      </g>
      <defs>
        <clipPath id="clip0_37_2127">
          <rect width="16" height="16" fill="white"/>
        </clipPath>
      </defs>
    </svg>
  )
}

export default User----------------------------------------

FILE: ./src/components/icons/brand/Baeckerei.tsx
----------------------------------------
import React from 'react'

const Baeckerei: React.FC = () => {
  return (
    <svg width="621" height="149" viewBox="0 0 621 149" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M32.6829 79.6439C37.1896 79.6439 41.1539 78.0582 44.5757 74.8868C48.0809 71.7154 49.8335 68.085 49.8335 63.9955C49.8335 59.8226 48.5399 55.9836 45.9527 52.4783C43.1152 53.8971 40.3193 54.6065 37.5652 54.6065C31.1389 54.6065 27.9258 52.6035 27.9258 48.5975C27.9258 47.4291 28.7187 46.3859 30.3044 45.4679C31.8901 44.4664 34.1434 43.9656 37.0645 43.9656C40.0689 43.9656 43.3238 44.8419 46.829 46.5945C50.1674 43.0058 51.8365 38.9581 51.8365 34.4514C51.8365 28.8597 49.3745 24.4365 44.4505 21.1816C39.6099 17.8433 34.3938 16.1741 28.8021 16.1741C27.6337 16.1741 26.7574 16.2159 26.1732 16.2993C26.0897 18.7196 25.8811 22.6004 25.5473 27.9417C25.0465 35.9537 24.7961 48.1802 24.7961 64.6215C24.7961 70.9643 24.3371 74.1357 23.4191 74.1357C19.8304 74.1357 17.5353 73.6349 16.5338 72.6334C15.5323 71.6319 15.0316 68.7526 15.0316 63.9955C15.0316 62.8271 15.2402 58.0283 15.6575 49.599C16.1582 41.1698 16.4086 34.368 16.4086 29.1936C16.4086 24.0192 16.5755 20.2218 16.9094 17.8016C12.4861 19.3038 10.1075 21.7241 9.77371 25.0624C9.43988 27.8165 8.81394 29.736 7.89591 30.821C7.06133 31.9059 5.89292 32.4484 4.39067 32.4484C2.97189 32.4484 2.01212 32.0729 1.51138 31.3217C1.01063 30.4872 0.760254 29.6526 0.760254 28.818C0.760254 21.5572 6.39366 16.5497 17.6605 13.7956C19.0793 8.12044 21.3326 5.28287 24.4206 5.28287C25.6724 5.28287 26.2984 7.61969 26.2984 12.2933C28.4683 12.043 31.1389 11.9178 34.3103 11.9178C37.5652 11.9178 41.2791 12.5437 45.452 13.7956C49.6249 14.964 53.2553 17.0922 56.3432 20.1801C59.4312 23.1846 60.9752 26.5646 60.9752 30.3202C60.9752 37.3307 57.5951 43.6318 50.835 49.2235C55.5087 52.8956 57.8455 57.2772 57.8455 62.3681C57.8455 67.459 56.2598 71.6737 53.0884 75.012C47.1629 81.1044 39.2344 84.1506 29.3029 84.1506C22.5428 84.1506 17.7022 83.6916 14.7812 82.7736C14.197 82.6066 13.571 82.1894 12.9034 81.5217C12.3192 80.7706 12.0271 79.8525 12.0271 78.7676C12.0271 77.015 13.738 76.1386 17.1597 76.1386C18.2447 76.1386 20.6232 76.7228 24.2954 77.8913C27.9675 79.0597 30.7634 79.6439 32.6829 79.6439ZM43.3238 49.7242C40.8201 47.6378 38.4415 46.5945 36.1881 46.5945C34.0182 46.5945 32.9333 47.0536 32.9333 47.9716C32.9333 49.8911 34.978 50.8509 39.0674 50.8509C40.5697 50.8509 41.9885 50.4753 43.3238 49.7242Z" fill="currentColor"/>
      <path d="M99.2647 83.5247C96.0099 83.5247 93.5479 82.857 91.8787 81.5217C91.2945 80.9375 91.0024 79.477 91.0024 77.1401C91.0024 74.7199 91.0859 71.5067 91.2528 67.5007C89.0829 72.9255 86.913 76.9732 84.7431 79.6439C82.6566 82.2311 79.9442 83.5247 76.6059 83.5247C73.2676 83.5247 70.3466 81.9807 67.8428 78.8928C65.3391 75.7214 64.0872 70.7973 64.0872 64.1207C64.0872 57.3606 65.965 51.3934 69.7206 46.219C73.5597 41.0446 78.5672 38.4574 84.7431 38.4574C87.4137 38.4574 90.4182 40.21 93.7565 43.7152C94.4242 42.7972 95.5926 41.7123 97.2617 40.4604C99.0144 39.1251 100.475 38.4574 101.643 38.4574C102.895 38.4574 103.521 40.0431 103.521 43.2145C103.521 44.0491 103.271 45.6765 102.77 48.0968C102.353 50.5171 101.852 52.2697 101.268 53.3546C100.517 55.2742 100.141 62.076 100.141 73.7601C100.141 76.0135 100.391 77.1401 100.892 77.1401C102.311 77.0567 104.272 75.3041 106.776 71.8823C109.28 68.3771 111.742 63.9121 114.162 58.4873C116.666 53.0625 118.168 50.3501 118.669 50.3501C119.253 50.3501 119.545 50.684 119.545 51.3517C119.545 53.6885 118.335 57.4023 115.915 62.4933C109.321 76.5142 103.771 83.5247 99.2647 83.5247ZM83.9919 43.4649C81.6551 43.4649 79.1514 45.2175 76.4807 48.7227C73.8935 52.1445 72.5999 56.1922 72.5999 60.8658C72.5999 65.5395 73.2676 69.3785 74.6029 72.383C76.0217 75.3875 77.8578 76.8898 80.1111 76.8898C82.8652 76.8898 86.913 70.0045 92.2543 56.2339C92.3377 55.5663 92.4212 54.4396 92.5046 52.8539C92.6716 51.1847 92.7967 49.9329 92.8802 49.0983C92.1291 47.763 90.7938 46.5111 88.8742 45.3427C87.0381 44.0908 85.4107 43.4649 83.9919 43.4649ZM79.6104 26.815C78.5254 26.815 77.3988 26.4395 76.2303 25.6883C75.1454 24.9372 74.6029 23.7271 74.6029 22.0579C74.6029 20.3888 75.354 19.0534 76.8563 18.0519C78.442 17.0504 79.9025 16.5497 81.2378 16.5497C82.5732 16.5497 83.6998 16.9252 84.6179 17.6764C85.5359 18.4275 85.9949 19.3455 85.9949 20.4305C85.9949 24.6868 83.8667 26.815 79.6104 26.815ZM97.7625 26.815C96.5941 26.815 95.4257 26.4395 94.2573 25.6883C93.1723 24.9372 92.6298 23.7271 92.6298 22.0579C92.6298 20.3888 93.4227 19.0534 95.0084 18.0519C96.5941 17.0504 98.0546 16.5497 99.3899 16.5497C100.725 16.5497 101.81 16.9252 102.645 17.6764C103.563 18.4275 104.022 19.3455 104.022 20.4305C104.022 24.6868 101.935 26.815 97.7625 26.815Z" fill="currentColor"/>
      <path d="M134.419 52.4783L135.42 46.0938C135.42 45.1758 135.128 44.3412 134.544 43.5901C133.96 42.8389 133.209 42.4634 132.291 42.4634C129.203 42.4634 126.532 44.8002 124.279 49.4738C122.025 54.064 120.899 58.4873 120.899 62.7436C120.899 67 121.775 70.4635 123.528 73.1342C125.28 75.7214 127.408 77.015 129.912 77.015C132.499 77.015 134.794 76.4307 136.797 75.2623C138.8 74.0939 140.636 72.4248 142.306 70.2549C145.811 65.6647 148.815 60.4486 151.319 54.6065C151.987 53.1043 152.487 52.0193 152.821 51.3517C153.239 50.684 153.656 50.3501 154.073 50.3501C154.574 50.3501 154.824 50.684 154.824 51.3517C154.824 54.1058 153.864 57.4023 151.945 61.2414C150.025 65.0805 148.398 68.0432 147.063 70.1297C145.811 72.1327 144.183 74.2608 142.18 76.5142C138.007 81.1879 132.791 83.5247 126.532 83.5247C121.775 83.5247 118.144 81.8555 115.641 78.5172C113.22 75.0954 112.01 71.465 112.01 67.6259C112.01 58.1117 114.055 50.8926 118.144 45.9686C122.317 40.9611 127.575 38.4574 133.918 38.4574C136.589 38.4574 138.675 39.1668 140.177 40.5856C141.763 41.9209 142.556 43.4649 142.556 45.2175C142.556 48.4723 141.972 50.8926 140.803 52.4783C139.635 54.064 138.216 54.8569 136.547 54.8569C135.128 54.8569 134.419 54.064 134.419 52.4783Z" fill="currentColor"/>
      <path d="M188.141 87.2803L191.521 86.9047C192.188 86.9047 192.522 87.2386 192.522 87.9062C192.522 89.0746 191.729 89.9509 190.144 90.5351C188.558 91.1193 186.764 91.4114 184.761 91.4114C181.005 91.4114 177.834 89.9092 175.246 86.9047C172.743 83.9002 169.237 78.3503 164.731 70.2549C163.646 68.5022 163.103 67.1669 163.103 66.2489C163.103 64.997 164.856 63.5365 168.361 61.8673C174.036 58.9463 176.874 55.2742 176.874 50.8509C176.874 49.599 176.415 48.5558 175.497 47.7212C174.662 46.8032 173.535 46.3442 172.117 46.3442C170.114 46.3442 167.735 48.7227 164.981 53.4798C162.227 58.1535 160.349 62.5767 159.348 66.7496C158.43 70.8391 157.971 75.2623 157.971 80.0194C157.971 82.3563 157.303 83.5247 155.968 83.5247C154.048 83.5247 152.212 83.2743 150.459 82.7736C148.707 82.1893 147.83 81.4799 147.83 80.6454C147.83 79.7273 148.164 75.7631 148.832 68.7526C149.5 61.6587 149.875 56.5678 149.959 53.4798C150.292 36.4544 151.294 23.435 152.963 14.4215C153.213 13.6704 154.34 12.3768 156.343 10.5407C158.43 8.70464 160.099 7.78661 161.351 7.78661C162.602 7.78661 163.187 9.37231 163.103 12.5437C163.103 15.6316 162.436 22.3083 161.1 32.5736C159.765 42.8389 158.93 52.228 158.596 60.7407C160.099 55.3993 162.477 50.3501 165.732 45.593C169.07 40.8359 172.409 38.4574 175.747 38.4574C181.422 38.4574 184.26 41.2115 184.26 46.7197C184.26 50.3919 183.175 53.7302 181.005 56.7347C178.835 59.6557 175.914 62.0343 172.242 63.8703C171.491 64.2042 171.115 64.5797 171.115 64.997C171.115 65.4143 171.24 65.8316 171.491 66.2489C176.749 75.5127 181.214 82.0224 184.886 85.778C185.887 86.7795 186.972 87.2803 188.141 87.2803Z" fill="currentColor"/>
      <path d="M206.014 83.5247C201.34 83.5247 197.626 81.7721 194.872 78.2668C192.118 74.6781 190.741 70.6304 190.741 66.1237C190.741 57.0268 192.661 50.1415 196.5 45.4679C200.339 40.7942 205.305 38.4574 211.397 38.4574C214.235 38.4574 216.571 39.2502 218.407 40.8359C220.244 42.3382 221.162 44.4246 221.162 47.0953C221.162 52.1028 219.033 56.3174 214.777 59.7392C210.604 63.0775 205.471 64.8301 199.379 64.997C199.713 68.2519 200.798 71.0894 202.634 73.5097C204.553 75.8465 206.765 77.015 209.269 77.015C211.773 77.015 214.026 76.4307 216.029 75.2623C218.032 74.0939 219.868 72.4248 221.537 70.2549C225.042 65.6647 228.047 60.4486 230.551 54.6065C231.218 53.1043 231.719 52.0193 232.053 51.3517C232.47 50.684 232.887 50.3501 233.305 50.3501C233.805 50.3501 234.056 50.684 234.056 51.3517C234.056 55.5245 231.51 61.7839 226.419 70.1297C220.911 79.0597 214.109 83.5247 206.014 83.5247ZM199.379 61.9925C204.303 61.158 207.892 59.5723 210.145 57.2354C212.482 54.8986 213.65 51.8524 213.65 48.0968C213.65 44.3412 212.44 42.4634 210.02 42.4634C207.099 42.4634 204.637 44.5081 202.634 48.5975C200.631 52.6035 199.546 57.0685 199.379 61.9925Z" fill="currentColor"/>
      <path d="M238.308 50.225L245.194 49.4738C245.861 49.4738 246.445 49.8494 246.946 50.6005C247.447 51.3516 247.697 52.1445 247.697 52.9791C247.697 53.8137 247.405 56.6512 246.821 61.4918C246.32 66.3323 246.07 70.1714 246.07 73.009C246.07 75.7631 246.32 77.1401 246.821 77.1401C248.24 77.0567 250.201 75.3041 252.705 71.8823C255.208 68.3771 257.67 63.9121 260.091 58.4873C262.595 53.0625 264.097 50.3501 264.598 50.3501C265.182 50.3501 265.474 50.684 265.474 51.3517C265.474 53.6885 264.264 57.4023 261.843 62.4933C255.25 76.5142 249.7 83.5247 245.194 83.5247C241.939 83.5247 239.477 82.857 237.807 81.5217C237.223 80.9375 236.931 77.3071 236.931 70.6304C236.931 63.9538 237.641 58.2369 239.059 53.4798C234.219 53.4798 230.839 51.9358 228.919 48.8479C227.918 47.2622 227.417 45.4679 227.417 43.4649C227.417 41.4619 227.834 39.7093 228.669 38.207C229.503 36.7048 230.672 35.9537 232.174 35.9537C233.76 35.9537 235.179 36.7882 236.43 38.4574C237.766 40.0431 238.433 41.8374 238.433 43.8404C238.433 45.8434 237.849 47.8464 236.681 49.8494C237.015 50.0998 237.557 50.225 238.308 50.225Z" fill="currentColor"/>
      <path d="M274.598 83.5247C269.924 83.5247 266.21 81.7721 263.456 78.2668C260.702 74.6781 259.325 70.6304 259.325 66.1237C259.325 57.0268 261.245 50.1415 265.084 45.4679C268.923 40.7942 273.888 38.4574 279.981 38.4574C282.818 38.4574 285.155 39.2502 286.991 40.8359C288.827 42.3382 289.745 44.4246 289.745 47.0953C289.745 52.1028 287.617 56.3174 283.361 59.7392C279.188 63.0775 274.055 64.8301 267.963 64.997C268.297 68.2519 269.382 71.0894 271.218 73.5097C273.137 75.8465 275.349 77.015 277.853 77.015C280.356 77.015 282.61 76.4307 284.613 75.2623C286.616 74.0939 288.452 72.4248 290.121 70.2549C293.626 65.6647 296.631 60.4486 299.134 54.6065C299.802 53.1043 300.303 52.0193 300.637 51.3517C301.054 50.684 301.471 50.3501 301.889 50.3501C302.389 50.3501 302.64 50.684 302.64 51.3517C302.64 55.5245 300.094 61.7839 295.003 70.1297C289.495 79.0597 282.693 83.5247 274.598 83.5247ZM267.963 61.9925C272.887 61.158 276.476 59.5723 278.729 57.2354C281.066 54.8986 282.234 51.8524 282.234 48.0968C282.234 44.3412 281.024 42.4634 278.604 42.4634C275.683 42.4634 273.221 44.5081 271.218 48.5975C269.215 52.6035 268.13 57.0685 267.963 61.9925Z" fill="currentColor"/>
      <path d="M300.633 21.6823C300.633 20.1801 301.426 18.8865 303.011 17.8016C304.597 16.7166 306.016 16.1741 307.268 16.1741C309.521 16.1741 310.648 17.4677 310.648 20.0549C310.648 22.6421 309.98 24.8955 308.645 26.815C307.309 28.6511 305.432 29.5691 303.011 29.5691C301.426 29.5691 300.633 26.9402 300.633 21.6823ZM304.263 83.5247C301.008 83.5247 298.546 82.857 296.877 81.5217C296.293 80.9375 296.001 78.851 296.001 75.2623C296.001 71.6736 296.251 65.7064 296.752 57.3606C297.336 48.9314 297.837 44.3829 298.254 43.7152C298.671 43.0476 299.965 41.7957 302.135 39.9596C304.305 38.1236 305.974 37.2055 307.142 37.2055C308.394 37.2055 309.02 38.7912 309.02 41.9626C309.02 42.7972 308.77 44.4246 308.269 46.8449C307.852 49.2652 307.351 51.0178 306.767 52.1028C305.682 54.8569 305.139 62.076 305.139 73.7601C305.139 76.0135 305.39 77.1401 305.891 77.1401C307.309 77.0567 309.271 75.3041 311.774 71.8823C314.278 68.3771 316.74 63.9121 319.16 58.4873C321.664 53.0625 323.166 50.3501 323.667 50.3501C324.251 50.3501 324.543 50.684 324.543 51.3517C324.543 53.6885 323.333 57.4023 320.913 62.4933C314.32 76.5142 308.77 83.5247 304.263 83.5247Z" fill="currentColor"/>
      <path d="M351.211 21.5572C351.211 23.5602 351.712 25.3962 352.713 27.0654C353.715 28.6511 354.216 29.9447 354.216 30.9462C354.216 31.8642 353.965 32.6988 353.465 33.4499C353.047 34.201 352.463 34.5766 351.712 34.5766C350.293 34.5766 349.125 33.3665 348.207 30.9462C347.289 28.5259 346.83 25.9804 346.83 23.3098C346.83 19.3038 348.29 15.7151 351.211 12.5437C354.216 9.37231 358.013 7.78661 362.603 7.78661C365.691 7.78661 367.986 9.28885 369.488 12.2933C371.074 15.2144 371.867 18.5527 371.867 22.3083C371.867 26.0639 371.742 29.6109 371.491 32.9492C371.325 36.204 371.158 38.7495 370.991 40.5856C370.824 42.3382 370.49 45.1758 369.989 49.0983C369.488 52.9373 369.155 55.608 368.988 57.1102C375.664 57.1102 382.675 53.7302 390.019 46.9701C391.021 34.9522 392.398 25.5631 394.15 18.8031C395.986 11.9595 397.822 7.16067 399.658 4.40656C401.495 1.65245 403.456 0.275391 405.542 0.275391C407.712 0.275391 409.465 1.23516 410.8 3.15469C412.219 5.07422 412.928 7.36932 412.928 10.04C412.928 19.888 408.547 30.5289 399.784 41.9626C399.283 48.5558 399.033 54.6482 399.033 60.2399C399.033 65.7481 399.825 71.1312 401.411 76.389C403.08 81.5634 403.915 84.4427 403.915 85.0269C403.915 85.6946 403.456 86.1953 402.538 86.5292C401.62 86.9464 400.618 87.1551 399.533 87.1551C396.612 87.1551 394.234 86.404 392.398 84.9017C391.48 84.1506 390.729 81.6051 390.144 77.2653C389.56 72.9255 389.268 68.8778 389.268 65.1222C389.268 61.2831 389.393 57.152 389.644 52.7287C382.216 59.0715 375.164 62.3681 368.487 62.6185C368.404 63.7869 368.32 65.7481 368.237 68.5023C368.153 71.1729 368.028 73.1759 367.861 74.5112C367.694 75.7631 367.36 77.2236 366.86 78.8928C366.025 81.9807 364.022 83.5247 360.851 83.5247C358.931 83.5247 357.971 81.8972 357.971 78.6424C357.971 75.3041 358.472 69.5455 359.474 61.3666C355.718 59.7809 353.84 56.9851 353.84 52.9791C353.84 50.058 354.591 47.596 356.093 45.593C357.596 43.5066 359.432 42.4634 361.602 42.4634C362.353 34.7852 362.728 28.8597 362.728 24.6868C362.728 17.1756 361.56 13.42 359.223 13.42C353.882 13.42 351.211 16.1324 351.211 21.5572ZM408.922 12.1681C408.922 10.9163 408.714 9.78959 408.296 8.7881C407.963 7.70315 407.504 7.16067 406.919 7.16067C404.583 7.16067 402.454 16.2159 400.535 34.3262C406.126 25.8135 408.922 18.4275 408.922 12.1681ZM361.226 46.4694C360.058 47.3039 359.474 48.4306 359.474 49.8494C359.474 51.2682 359.807 52.4366 360.475 53.3546L361.226 46.4694Z" fill="currentColor"/>
      <path d="M426.925 83.5247C422.251 83.5247 418.537 81.7721 415.783 78.2668C413.029 74.6781 411.652 70.6304 411.652 66.1237C411.652 57.0268 413.572 50.1415 417.411 45.4679C421.25 40.7942 426.215 38.4574 432.308 38.4574C435.145 38.4574 437.482 39.2502 439.318 40.8359C441.154 42.3382 442.072 44.4246 442.072 47.0953C442.072 52.1028 439.944 56.3174 435.688 59.7392C431.515 63.0775 426.382 64.8301 420.29 64.997C420.624 68.2519 421.709 71.0894 423.545 73.5097C425.464 75.8465 427.676 77.015 430.18 77.015C432.683 77.015 434.937 76.4307 436.94 75.2623C438.943 74.0939 440.779 72.4248 442.448 70.2549C445.953 65.6647 448.958 60.4486 451.461 54.6065C452.129 53.1043 452.63 52.0193 452.964 51.3517C453.381 50.684 453.798 50.3501 454.216 50.3501C454.716 50.3501 454.967 50.684 454.967 51.3517C454.967 55.5245 452.421 61.7839 447.33 70.1297C441.822 79.0597 435.02 83.5247 426.925 83.5247ZM420.29 61.9925C425.214 61.158 428.803 59.5723 431.056 57.2354C433.393 54.8986 434.561 51.8524 434.561 48.0968C434.561 44.3412 433.351 42.4634 430.931 42.4634C428.01 42.4634 425.548 44.5081 423.545 48.5975C421.542 52.6035 420.457 57.0685 420.29 61.9925Z" fill="currentColor"/>
      <path d="M448.328 72.0075L449.079 57.9865C449.079 49.0565 449.496 44.1743 450.331 43.3397C451.165 42.5051 452.626 41.295 454.712 39.7093C456.882 38.0401 458.426 37.2055 459.344 37.2055C460.346 37.2055 460.972 37.3724 461.222 37.7063C461.472 38.0401 461.598 38.7078 461.598 39.7093C461.598 43.298 460.805 46.9284 459.219 50.6005C457.967 58.2787 457.341 64.5797 457.341 69.5037C457.341 74.4278 458.134 76.8898 459.72 76.8898C461.639 76.8898 463.893 75.2206 466.48 71.8823C469.067 68.544 471.654 63.5782 474.242 56.9851C474.993 48.6393 475.577 44.1325 475.994 43.4649C476.495 42.7972 477.663 41.5871 479.499 39.8344C481.335 38.0818 482.838 37.2055 484.006 37.2055C485.258 37.2055 485.884 38.7912 485.884 41.9626C485.884 42.7972 485.634 44.4246 485.133 46.8449C484.715 49.2652 484.215 51.0178 483.631 52.1028C482.712 54.4396 482.253 61.6587 482.253 73.7601C482.253 76.0135 482.504 77.1401 483.005 77.1401C484.423 77.0567 486.385 75.3041 488.888 71.8823C491.392 68.3771 493.854 63.9121 496.274 58.4873C498.778 53.0625 500.28 50.3501 500.781 50.3501C501.365 50.3501 501.657 50.684 501.657 51.3517C501.657 53.6885 500.447 57.4023 498.027 62.4933C491.434 76.5142 485.884 83.5247 481.377 83.5247C478.122 83.5247 475.66 82.857 473.991 81.5217C473.407 80.9375 473.115 79.1431 473.115 76.1386C473.115 73.1342 473.24 69.7958 473.49 66.1237C470.82 71.7988 468.149 76.1386 465.478 79.1431C462.808 82.0642 459.803 83.5247 456.465 83.5247C453.21 83.5247 451.04 82.6484 449.955 80.8958C448.87 79.1431 448.328 76.1804 448.328 72.0075Z" fill="currentColor"/>
      <path d="M512.578 44.5916L512.828 42.7137C512.828 41.2115 511.952 40.4604 510.2 40.4604C508.53 40.4604 506.903 41.5871 505.317 43.8404C503.732 46.0103 502.939 47.8047 502.939 49.2235C502.939 50.6422 503.022 51.7689 503.189 52.6035C503.356 53.4381 503.523 54.1475 503.69 54.7317C503.94 55.2324 504.316 55.8584 504.816 56.6095C505.317 57.3606 505.693 57.9031 505.943 58.2369L507.32 59.9895C507.904 60.8241 508.322 61.3666 508.572 61.617C512.912 58.0283 518.086 54.0223 524.095 49.599C524.429 49.3487 524.805 49.2235 525.222 49.2235C526.057 49.2235 526.474 49.6825 526.474 50.6005C526.474 51.5186 526.098 52.228 525.347 52.7287C520.006 56.1505 514.957 59.8643 510.2 63.8703C512.036 66.541 512.954 69.462 512.954 72.6334C512.954 75.8048 511.743 78.5172 509.323 80.7706C506.903 83.0239 503.815 84.1506 500.059 84.1506C496.304 84.1506 494.426 82.3563 494.426 78.7676C494.426 76.1804 497.18 72.2161 502.688 66.8748C502.271 66.3741 501.52 65.5812 500.435 64.4963C499.35 63.3279 498.515 62.4098 497.931 61.7422C497.43 61.0745 496.805 60.1982 496.053 59.1132C494.718 57.0268 494.05 54.7734 494.05 52.3531C494.05 47.4291 495.636 43.4649 498.807 40.4604C501.979 37.3724 505.359 35.8285 508.948 35.8285C511.201 35.8285 512.954 36.4544 514.206 37.7063C515.457 38.8747 516.083 40.0848 516.083 41.3367C516.083 44.1743 515.416 45.593 514.08 45.593C513.079 45.593 512.578 45.2592 512.578 44.5916ZM504.566 69.2534C501.228 72.5917 499.559 75.3041 499.559 77.3905C499.559 79.3935 500.602 80.395 502.688 80.395C503.94 80.395 504.983 79.8942 505.818 78.8928C507.654 76.389 507.237 73.1759 504.566 69.2534Z" fill="currentColor"/>
      <path d="M538.618 44.5916L538.868 42.7137C538.868 41.2115 537.992 40.4604 536.239 40.4604C534.57 40.4604 532.943 41.5871 531.357 43.8404C529.771 46.0103 528.979 47.8047 528.979 49.2235C528.979 50.6422 529.062 51.7689 529.229 52.6035C529.396 53.4381 529.563 54.1475 529.73 54.7317C529.98 55.2324 530.356 55.8584 530.856 56.6095C531.357 57.3606 531.733 57.9031 531.983 58.2369L533.36 59.9895C533.944 60.8241 534.362 61.3666 534.612 61.617C538.952 58.0283 544.126 54.0223 550.135 49.599C550.469 49.3487 550.844 49.2235 551.262 49.2235C552.096 49.2235 552.514 49.6825 552.514 50.6005C552.514 51.5186 552.138 52.228 551.387 52.7287C546.046 56.1505 540.996 59.8643 536.239 63.8703C538.075 66.541 538.993 69.462 538.993 72.6334C538.993 75.8048 537.783 78.5172 535.363 80.7706C532.943 83.0239 529.855 84.1506 526.099 84.1506C522.344 84.1506 520.466 82.3563 520.466 78.7676C520.466 76.1804 523.22 72.2161 528.728 66.8748C528.311 66.3741 527.56 65.5812 526.475 64.4963C525.39 63.3279 524.555 62.4098 523.971 61.7422C523.47 61.0745 522.844 60.1982 522.093 59.1132C520.758 57.0268 520.09 54.7734 520.09 52.3531C520.09 47.4291 521.676 43.4649 524.847 40.4604C528.019 37.3724 531.399 35.8285 534.987 35.8285C537.241 35.8285 538.993 36.4544 540.245 37.7063C541.497 38.8747 542.123 40.0848 542.123 41.3367C542.123 44.1743 541.456 45.593 540.12 45.593C539.119 45.593 538.618 45.2592 538.618 44.5916ZM530.606 69.2534C527.268 72.5917 525.598 75.3041 525.598 77.3905C525.598 79.3935 526.642 80.395 528.728 80.395C529.98 80.395 531.023 79.8942 531.858 78.8928C533.694 76.389 533.277 73.1759 530.606 69.2534Z" fill="currentColor"/>
      <path d="M561.403 83.5247C556.729 83.5247 553.015 81.7721 550.261 78.2668C547.507 74.6781 546.13 70.6304 546.13 66.1237C546.13 57.0268 548.05 50.1415 551.889 45.4679C555.728 40.7942 560.694 38.4574 566.786 38.4574C569.624 38.4574 571.96 39.2502 573.796 40.8359C575.632 42.3382 576.551 44.4246 576.551 47.0953C576.551 52.1028 574.422 56.3174 570.166 59.7392C565.993 63.0775 560.86 64.8301 554.768 64.997C555.102 68.2519 556.187 71.0894 558.023 73.5097C559.942 75.8465 562.154 77.015 564.658 77.015C567.161 77.015 569.415 76.4307 571.418 75.2623C573.421 74.0939 575.257 72.4248 576.926 70.2549C580.431 65.6647 583.436 60.4486 585.94 54.6065C586.607 53.1043 587.108 52.0193 587.442 51.3517C587.859 50.684 588.276 50.3501 588.694 50.3501C589.194 50.3501 589.445 50.684 589.445 51.3517C589.445 55.5245 586.899 61.7839 581.808 70.1297C576.3 79.0597 569.498 83.5247 561.403 83.5247ZM554.768 61.9925C559.692 61.158 563.281 59.5723 565.534 57.2354C567.871 54.8986 569.039 51.8524 569.039 48.0968C569.039 44.3412 567.829 42.4634 565.409 42.4634C562.488 42.4634 560.026 44.5081 558.023 48.5975C556.02 52.6035 554.935 57.0685 554.768 61.9925Z" fill="currentColor"/>
      <path d="M593.697 50.225L600.582 49.4738C601.25 49.4738 601.834 49.8494 602.335 50.6005C602.836 51.3516 603.086 52.1445 603.086 52.9791C603.086 53.8137 602.794 56.6512 602.21 61.4918C601.709 66.3323 601.459 70.1714 601.459 73.009C601.459 75.7631 601.709 77.1401 602.21 77.1401C603.629 77.0567 605.59 75.3041 608.094 71.8823C610.597 68.3771 613.059 63.9121 615.48 58.4873C617.983 53.0625 619.486 50.3501 619.986 50.3501C620.571 50.3501 620.863 50.684 620.863 51.3517C620.863 53.6885 619.653 57.4023 617.232 62.4933C610.639 76.5142 605.089 83.5247 600.582 83.5247C597.328 83.5247 594.866 82.857 593.196 81.5217C592.612 80.9375 592.32 77.3071 592.32 70.6304C592.32 63.9538 593.03 58.2369 594.448 53.4798C589.608 53.4798 586.228 51.9358 584.308 48.8479C583.307 47.2622 582.806 45.4679 582.806 43.4649C582.806 41.4619 583.223 39.7093 584.058 38.207C584.892 36.7048 586.061 35.9537 587.563 35.9537C589.149 35.9537 590.568 36.7882 591.819 38.4574C593.155 40.0431 593.822 41.8374 593.822 43.8404C593.822 45.8434 593.238 47.8464 592.07 49.8494C592.404 50.0998 592.946 50.225 593.697 50.225Z" fill="currentColor"/>
      <path d="M204.718 118.282C207.617 118.282 209.903 119.235 211.577 121.141C213.25 123.047 214.087 125.68 214.087 129.039C214.087 132.397 213.37 135.453 211.935 138.207C210.531 140.96 208.558 142.988 206.018 144.289C207.303 145.439 208.215 146.014 208.753 146.014C210.336 146.014 211.622 145.272 212.608 143.79C213.116 143.033 213.519 142.655 213.818 142.655C214.117 142.655 214.266 142.806 214.266 143.109C214.266 143.835 214.012 144.591 213.504 145.378C212.01 147.738 209.933 148.918 207.273 148.918C206.108 148.918 204.524 147.738 202.522 145.378C201.685 145.529 200.923 145.605 200.235 145.605C197.516 145.605 195.289 144.607 193.556 142.61C191.853 140.612 191.001 138.177 191.001 135.302C191.001 130.884 192.077 127.026 194.229 123.728C195.275 122.064 196.694 120.748 198.487 119.779C200.31 118.781 202.387 118.282 204.718 118.282ZM203.508 120.369C200.31 120.369 197.949 121.565 196.425 123.955C194.931 126.345 194.184 129.508 194.184 133.441C194.184 135.075 194.512 136.603 195.17 138.025C195.827 139.447 196.679 140.628 197.725 141.566C198.592 140.688 199.488 140.249 200.415 140.249C201.341 140.249 202.731 141.127 204.584 142.882C206.526 142.246 208.005 140.945 209.022 138.978C210.038 136.981 210.546 134.455 210.546 131.399C210.546 128.343 209.888 125.74 208.573 123.592C207.258 121.444 205.57 120.369 203.508 120.369Z" fill="currentColor"/>
      <path d="M216.222 141.202L216.491 136.119C216.491 132.881 216.641 131.111 216.94 130.809C217.238 130.506 217.761 130.067 218.508 129.492C219.285 128.887 219.838 128.585 220.167 128.585C220.526 128.585 220.75 128.645 220.839 128.766C220.929 128.887 220.974 129.129 220.974 129.492C220.974 130.794 220.69 132.11 220.122 133.441C219.674 136.225 219.45 138.509 219.45 140.295C219.45 142.08 219.734 142.973 220.302 142.973C220.989 142.973 221.796 142.367 222.722 141.157C223.649 139.947 224.575 138.146 225.502 135.756C225.77 132.73 225.98 131.096 226.129 130.854C226.308 130.612 226.727 130.173 227.384 129.538C228.042 128.902 228.58 128.585 228.998 128.585C229.446 128.585 229.67 129.16 229.67 130.309C229.67 130.612 229.581 131.202 229.401 132.08C229.252 132.957 229.073 133.592 228.864 133.986C228.535 134.833 228.37 137.45 228.37 141.838C228.37 142.655 228.46 143.063 228.639 143.063C229.147 143.033 229.85 142.398 230.746 141.157C231.643 139.886 232.524 138.267 233.391 136.301C234.288 134.334 234.826 133.35 235.005 133.35C235.214 133.35 235.319 133.471 235.319 133.713C235.319 134.561 234.885 135.907 234.019 137.753C231.658 142.836 229.67 145.378 228.057 145.378C226.891 145.378 226.01 145.136 225.412 144.652C225.203 144.44 225.098 143.79 225.098 142.7C225.098 141.611 225.143 140.401 225.233 139.069C224.276 141.127 223.32 142.7 222.364 143.79C221.407 144.849 220.331 145.378 219.136 145.378C217.971 145.378 217.194 145.06 216.805 144.425C216.417 143.79 216.222 142.715 216.222 141.202Z" fill="currentColor"/>
      <path d="M245.191 145.378C244.026 145.378 243.144 145.136 242.546 144.652C242.337 144.44 242.233 143.911 242.233 143.063C242.233 142.186 242.262 141.021 242.322 139.569C241.545 141.535 240.768 143.003 239.991 143.971C239.244 144.909 238.273 145.378 237.077 145.378C235.882 145.378 234.836 144.818 233.94 143.699C233.043 142.549 232.595 140.764 232.595 138.343C232.595 135.892 233.267 133.729 234.612 131.853C235.987 129.977 237.78 129.039 239.991 129.039C240.948 129.039 242.023 129.674 243.219 130.945C243.458 130.612 243.876 130.219 244.474 129.765C245.102 129.281 245.625 129.039 246.043 129.039C246.491 129.039 246.715 129.613 246.715 130.763C246.715 131.066 246.626 131.656 246.446 132.533C246.297 133.411 246.118 134.046 245.908 134.44C245.639 135.136 245.505 137.602 245.505 141.838C245.505 142.655 245.595 143.063 245.774 143.063C246.282 143.033 246.984 142.398 247.881 141.157C248.777 139.886 249.659 138.267 250.526 136.301C251.422 134.334 251.96 133.35 252.139 133.35C252.349 133.35 252.453 133.471 252.453 133.713C252.453 134.561 252.02 135.907 251.153 137.753C248.792 142.836 246.805 145.378 245.191 145.378ZM239.722 130.854C238.885 130.854 237.989 131.489 237.033 132.76C236.106 134.001 235.643 135.468 235.643 137.163C235.643 138.857 235.882 140.249 236.36 141.339C236.868 142.428 237.526 142.973 238.333 142.973C239.319 142.973 240.768 140.476 242.681 135.484C242.711 135.242 242.741 134.833 242.771 134.258C242.83 133.653 242.875 133.199 242.905 132.896C242.636 132.412 242.158 131.958 241.471 131.535C240.813 131.081 240.23 130.854 239.722 130.854Z" fill="currentColor"/>
      <path d="M253.028 145.378C252.37 145.378 251.757 145.303 251.19 145.151C250.652 144.97 250.323 144.803 250.203 144.652C249.905 144.289 249.755 142.413 249.755 139.024C249.755 135.605 250.129 130.975 250.876 125.135C251.503 120.324 252.968 117.918 255.269 117.918C255.807 117.918 256.195 118.221 256.434 118.826C256.674 119.401 256.793 119.961 256.793 120.506C256.793 124.439 255.613 128.842 253.252 133.713C253.162 136.225 253.117 138.419 253.117 140.295C253.117 142.141 253.282 143.063 253.61 143.063C254.118 143.033 254.821 142.398 255.717 141.157C256.614 139.886 257.495 138.267 258.362 136.301C259.259 134.334 259.796 133.35 259.976 133.35C260.185 133.35 260.29 133.471 260.29 133.713C260.29 134.561 259.856 135.907 258.99 137.753C256.629 142.836 254.641 145.378 253.028 145.378ZM255.672 120.914C255.672 119.946 255.553 119.462 255.314 119.462C254.417 119.462 253.76 123.229 253.341 130.763C254.895 126.618 255.672 123.335 255.672 120.914Z" fill="currentColor"/>
      <path d="M259.25 122.957C259.25 122.412 259.534 121.943 260.102 121.549C260.669 121.156 261.177 120.959 261.626 120.959C262.433 120.959 262.836 121.428 262.836 122.366C262.836 123.304 262.597 124.121 262.119 124.817C261.641 125.483 260.968 125.816 260.102 125.816C259.534 125.816 259.25 124.863 259.25 122.957ZM260.55 145.378C259.384 145.378 258.503 145.136 257.905 144.652C257.696 144.44 257.591 143.684 257.591 142.383C257.591 141.081 257.681 138.918 257.86 135.892C258.069 132.836 258.249 131.187 258.398 130.945C258.548 130.703 259.011 130.249 259.788 129.583C260.565 128.917 261.162 128.585 261.581 128.585C262.029 128.585 262.253 129.16 262.253 130.309C262.253 130.612 262.164 131.202 261.984 132.08C261.835 132.957 261.656 133.592 261.446 133.986C261.058 134.984 260.864 137.602 260.864 141.838C260.864 142.655 260.953 143.063 261.133 143.063C261.641 143.033 262.343 142.398 263.239 141.157C264.136 139.886 265.018 138.267 265.884 136.301C266.781 134.334 267.319 133.35 267.498 133.35C267.707 133.35 267.812 133.471 267.812 133.713C267.812 134.561 267.378 135.907 266.512 137.753C264.151 142.836 262.164 145.378 260.55 145.378Z" fill="currentColor"/>
      <path d="M275.469 137.753C273.108 142.836 271.105 145.378 269.462 145.378C267.848 145.378 266.892 145.182 266.593 144.788C266.324 144.395 266.189 143.094 266.189 140.885C266.189 138.676 266.398 135.484 266.817 131.308C265.323 131.005 264.531 130.385 264.441 129.447C264.441 128.963 264.755 128.721 265.382 128.721C266.01 128.721 266.563 128.842 267.041 129.084C267.31 126.905 267.624 124.696 267.982 122.457C268.072 121.882 268.356 121.338 268.834 120.823C269.312 120.309 269.775 120.052 270.224 120.052C270.612 120.052 270.806 120.672 270.806 121.913C270.806 122.488 270.597 125.135 270.179 129.855C270.986 129.704 271.867 129.402 272.824 128.948C273.81 128.494 274.393 128.267 274.572 128.267C275.11 128.267 275.379 128.433 275.379 128.766C275.409 129.069 274.856 129.492 273.72 130.037C272.585 130.551 271.359 130.945 270.044 131.217C269.686 135.635 269.506 138.978 269.506 141.248C269.506 142.458 269.686 143.063 270.044 143.063C270.582 143.033 271.3 142.398 272.196 141.157C273.093 139.917 273.974 138.313 274.841 136.346C275.737 134.349 276.275 133.35 276.455 133.35C276.664 133.35 276.769 133.471 276.769 133.713C276.769 134.561 276.335 135.907 275.469 137.753Z" fill="currentColor"/>
      <path d="M287.042 145.378C285.876 145.378 284.995 145.136 284.397 144.652C284.188 144.44 284.083 143.911 284.083 143.063C284.083 142.186 284.113 141.021 284.173 139.569C283.396 141.535 282.619 143.003 281.842 143.971C281.095 144.909 280.123 145.378 278.928 145.378C277.733 145.378 276.687 144.818 275.79 143.699C274.893 142.549 274.445 140.764 274.445 138.343C274.445 135.892 275.118 133.729 276.462 131.853C277.837 129.977 279.63 129.039 281.842 129.039C282.798 129.039 283.874 129.674 285.069 130.945C285.308 130.612 285.727 130.219 286.324 129.765C286.952 129.281 287.475 129.039 287.893 129.039C288.342 129.039 288.566 129.613 288.566 130.763C288.566 131.066 288.476 131.656 288.297 132.533C288.147 133.411 287.968 134.046 287.759 134.44C287.49 135.136 287.355 137.602 287.355 141.838C287.355 142.655 287.445 143.063 287.624 143.063C288.132 143.033 288.835 142.398 289.731 141.157C290.628 139.886 291.509 138.267 292.376 136.301C293.273 134.334 293.811 133.35 293.99 133.35C294.199 133.35 294.304 133.471 294.304 133.713C294.304 134.561 293.87 135.907 293.004 137.753C290.643 142.836 288.655 145.378 287.042 145.378ZM281.573 130.854C280.736 130.854 279.839 131.489 278.883 132.76C277.957 134.001 277.493 135.468 277.493 137.163C277.493 138.857 277.733 140.249 278.211 141.339C278.719 142.428 279.376 142.973 280.183 142.973C281.169 142.973 282.619 140.476 284.531 135.484C284.561 135.242 284.591 134.833 284.621 134.258C284.681 133.653 284.726 133.199 284.755 132.896C284.487 132.412 284.008 131.958 283.321 131.535C282.664 131.081 282.081 130.854 281.573 130.854ZM280.004 124.817C279.615 124.817 279.212 124.681 278.793 124.409C278.405 124.137 278.211 123.698 278.211 123.093C278.211 122.488 278.48 122.003 279.018 121.64C279.585 121.277 280.108 121.096 280.587 121.096C281.065 121.096 281.468 121.232 281.797 121.504C282.126 121.776 282.29 122.109 282.29 122.503C282.29 124.046 281.528 124.817 280.004 124.817ZM286.504 124.817C286.085 124.817 285.667 124.681 285.249 124.409C284.86 124.137 284.666 123.698 284.666 123.093C284.666 122.488 284.95 122.003 285.518 121.64C286.085 121.277 286.608 121.096 287.087 121.096C287.565 121.096 287.953 121.232 288.252 121.504C288.581 121.776 288.745 122.109 288.745 122.503C288.745 124.046 287.998 124.817 286.504 124.817Z" fill="currentColor"/>
      <path d="M301.647 137.753C299.286 142.836 297.284 145.378 295.64 145.378C294.026 145.378 293.07 145.182 292.771 144.788C292.502 144.395 292.368 143.094 292.368 140.885C292.368 138.676 292.577 135.484 292.995 131.308C291.501 131.005 290.709 130.385 290.619 129.447C290.619 128.963 290.933 128.721 291.561 128.721C292.188 128.721 292.741 128.842 293.219 129.084C293.488 126.905 293.802 124.696 294.161 122.457C294.25 121.882 294.534 121.338 295.013 120.823C295.491 120.309 295.954 120.052 296.402 120.052C296.791 120.052 296.985 120.672 296.985 121.913C296.985 122.488 296.776 125.135 296.357 129.855C297.164 129.704 298.046 129.402 299.002 128.948C299.988 128.494 300.571 128.267 300.75 128.267C301.288 128.267 301.557 128.433 301.557 128.766C301.587 129.069 301.034 129.492 299.899 130.037C298.763 130.551 297.538 130.945 296.223 131.217C295.864 135.635 295.685 138.978 295.685 141.248C295.685 142.458 295.864 143.063 296.223 143.063C296.761 143.033 297.478 142.398 298.375 141.157C299.271 139.917 300.153 138.313 301.019 136.346C301.916 134.349 302.454 133.35 302.633 133.35C302.842 133.35 302.947 133.471 302.947 133.713C302.947 134.561 302.514 135.907 301.647 137.753Z" fill="currentColor"/>
      <path d="M316.189 131.263L316.278 130.582C316.278 130.037 315.964 129.765 315.337 129.765C314.739 129.765 314.156 130.173 313.589 130.99C313.021 131.777 312.737 132.427 312.737 132.942C312.737 133.456 312.767 133.865 312.826 134.167C312.886 134.47 312.946 134.727 313.006 134.939C313.095 135.121 313.23 135.347 313.409 135.62C313.589 135.892 313.723 136.089 313.813 136.21L314.306 136.845C314.515 137.148 314.664 137.345 314.754 137.435C316.308 136.134 318.161 134.682 320.313 133.078C320.432 132.987 320.567 132.942 320.716 132.942C321.015 132.942 321.164 133.108 321.164 133.441C321.164 133.774 321.03 134.031 320.761 134.213C318.848 135.453 317.04 136.8 315.337 138.252C315.994 139.221 316.323 140.28 316.323 141.429C316.323 142.579 315.89 143.563 315.023 144.38C314.156 145.197 313.051 145.605 311.706 145.605C310.361 145.605 309.689 144.955 309.689 143.653C309.689 142.715 310.675 141.278 312.647 139.342C312.498 139.16 312.229 138.873 311.84 138.479C311.452 138.056 311.153 137.723 310.944 137.481C310.764 137.239 310.54 136.921 310.271 136.528C309.793 135.771 309.554 134.954 309.554 134.077C309.554 132.291 310.122 130.854 311.258 129.765C312.393 128.645 313.603 128.085 314.889 128.085C315.695 128.085 316.323 128.312 316.771 128.766C317.22 129.19 317.444 129.629 317.444 130.082C317.444 131.111 317.205 131.626 316.726 131.626C316.368 131.626 316.189 131.505 316.189 131.263ZM313.32 140.204C312.124 141.414 311.526 142.398 311.526 143.154C311.526 143.88 311.9 144.243 312.647 144.243C313.095 144.243 313.469 144.062 313.768 143.699C314.425 142.791 314.276 141.626 313.32 140.204Z" fill="currentColor"/>
      <path d="M324.347 145.378C322.674 145.378 321.344 144.743 320.358 143.472C319.372 142.171 318.878 140.703 318.878 139.069C318.878 135.771 319.566 133.275 320.941 131.58C322.315 129.886 324.093 129.039 326.275 129.039C327.291 129.039 328.128 129.326 328.785 129.901C329.443 130.446 329.772 131.202 329.772 132.17C329.772 133.986 329.009 135.514 327.485 136.754C325.991 137.965 324.153 138.6 321.972 138.661C322.091 139.841 322.48 140.87 323.137 141.747C323.824 142.594 324.616 143.018 325.513 143.018C326.409 143.018 327.216 142.806 327.934 142.383C328.651 141.959 329.308 141.354 329.906 140.567C331.161 138.903 332.237 137.012 333.134 134.894C333.373 134.349 333.552 133.956 333.671 133.713C333.821 133.471 333.97 133.35 334.12 133.35C334.299 133.35 334.389 133.471 334.389 133.713C334.389 135.226 333.477 137.496 331.654 140.522C329.682 143.759 327.246 145.378 324.347 145.378ZM321.972 137.571C323.735 137.269 325.02 136.694 325.827 135.847C326.663 134.999 327.082 133.895 327.082 132.533C327.082 131.172 326.649 130.491 325.782 130.491C324.736 130.491 323.854 131.232 323.137 132.715C322.42 134.167 322.031 135.786 321.972 137.571Z" fill="currentColor"/>
      <path d="M333.67 122.957C333.67 122.412 333.954 121.943 334.522 121.549C335.09 121.156 335.598 120.959 336.046 120.959C336.853 120.959 337.256 121.428 337.256 122.366C337.256 123.304 337.017 124.121 336.539 124.817C336.061 125.483 335.388 125.816 334.522 125.816C333.954 125.816 333.67 124.863 333.67 122.957ZM334.97 145.378C333.805 145.378 332.923 145.136 332.325 144.652C332.116 144.44 332.011 143.684 332.011 142.383C332.011 141.081 332.101 138.918 332.28 135.892C332.49 132.836 332.669 131.187 332.818 130.945C332.968 130.703 333.431 130.249 334.208 129.583C334.985 128.917 335.583 128.585 336.001 128.585C336.449 128.585 336.674 129.16 336.674 130.309C336.674 130.612 336.584 131.202 336.405 132.08C336.255 132.957 336.076 133.592 335.867 133.986C335.478 134.984 335.284 137.602 335.284 141.838C335.284 142.655 335.374 143.063 335.553 143.063C336.061 143.033 336.763 142.398 337.66 141.157C338.556 139.886 339.438 138.267 340.305 136.301C341.201 134.334 341.739 133.35 341.918 133.35C342.128 133.35 342.232 133.471 342.232 133.713C342.232 134.561 341.799 135.907 340.932 137.753C338.571 142.836 336.584 145.378 334.97 145.378Z" fill="currentColor"/>
      <path d="M349.889 137.753C347.528 142.836 345.526 145.378 343.882 145.378C342.268 145.378 341.312 145.182 341.013 144.788C340.744 144.395 340.61 143.094 340.61 140.885C340.61 138.676 340.819 135.484 341.237 131.308C339.743 131.005 338.951 130.385 338.861 129.447C338.861 128.963 339.175 128.721 339.803 128.721C340.43 128.721 340.983 128.842 341.461 129.084C341.73 126.905 342.044 124.696 342.403 122.457C342.492 121.882 342.776 121.338 343.254 120.823C343.733 120.309 344.196 120.052 344.644 120.052C345.033 120.052 345.227 120.672 345.227 121.913C345.227 122.488 345.018 125.135 344.599 129.855C345.406 129.704 346.288 129.402 347.244 128.948C348.23 128.494 348.813 128.267 348.992 128.267C349.53 128.267 349.799 128.433 349.799 128.766C349.829 129.069 349.276 129.492 348.141 130.037C347.005 130.551 345.78 130.945 344.465 131.217C344.106 135.635 343.927 138.978 343.927 141.248C343.927 142.458 344.106 143.063 344.465 143.063C345.003 143.033 345.72 142.398 346.616 141.157C347.513 139.917 348.395 138.313 349.261 136.346C350.158 134.349 350.696 133.35 350.875 133.35C351.084 133.35 351.189 133.471 351.189 133.713C351.189 134.561 350.755 135.907 349.889 137.753Z" fill="currentColor"/>
      <path d="M365.372 122.321C366.388 120.596 367.404 119.734 368.42 119.734C369.436 119.734 369.944 121.761 369.944 125.816C369.944 126.996 369.84 128.554 369.63 130.491C369.451 132.427 369.331 133.819 369.272 134.667C369.272 136.936 369.182 138.918 369.003 140.612C368.853 142.277 368.749 143.26 368.689 143.563C368.629 143.865 368.51 144.213 368.33 144.607C368.031 145.272 367.284 145.605 366.089 145.605C365.432 145.605 365.103 144.879 365.103 143.427C365.103 141.974 365.372 139.342 365.91 135.529C366.477 131.686 366.761 128.751 366.761 126.724C366.761 124.696 366.642 123.683 366.403 123.683C366.194 123.683 365.596 124.666 364.61 126.633C363.623 128.6 362.891 130.128 362.413 131.217C361.965 132.306 361.636 133.305 361.427 134.213C361.218 135.09 361.009 135.741 360.799 136.164C360.59 136.588 360.306 136.8 359.948 136.8C359.38 136.8 359.096 136.497 359.096 135.892C359.096 135.257 359.768 133.456 361.113 130.491C362.488 127.526 363.907 124.802 365.372 122.321Z" fill="currentColor"/>
      <path d="M379.648 143.926C380.903 143.926 381.964 143.472 382.831 142.564C383.727 141.656 384.37 140.461 384.758 138.978C385.476 136.437 385.834 133.744 385.834 130.899C385.834 124.485 384.415 121.277 381.576 121.277C380.35 121.277 379.26 121.973 378.303 123.365C377.377 124.727 376.914 126.255 376.914 127.949C376.914 130.098 377.317 131.716 378.124 132.806C378.662 133.471 379.394 133.804 380.321 133.804C381.277 133.804 382.218 133.592 383.145 133.169C384.101 132.745 384.654 132.533 384.803 132.533C384.983 132.533 385.072 132.654 385.072 132.896C385.072 133.471 384.564 134.046 383.548 134.621C382.532 135.196 381.187 135.484 379.514 135.484C377.84 135.484 376.51 134.773 375.524 133.35C374.568 131.928 374.09 130.325 374.09 128.539C374.09 126.209 374.852 124.167 376.376 122.412C377.93 120.627 379.768 119.734 381.89 119.734C383.055 119.734 384.086 119.961 384.983 120.415C385.879 120.869 386.581 121.444 387.09 122.14C387.627 122.835 388.076 123.668 388.434 124.636C389.002 126.27 389.286 128.146 389.286 130.264C389.286 140.491 385.804 145.605 378.841 145.605C377.556 145.605 376.391 145.227 375.345 144.47C374.329 143.684 373.806 142.821 373.776 141.883C373.776 140.915 374.075 140.431 374.672 140.431C375.27 140.431 375.778 140.612 376.196 140.976C376.615 141.339 376.929 141.747 377.138 142.201C377.347 142.625 377.661 143.018 378.079 143.381C378.527 143.744 379.05 143.926 379.648 143.926Z" fill="currentColor"/>
      <path d="M395.236 122.82L395.46 123.955C395.46 124.197 395.266 124.318 394.878 124.318C394.519 124.318 394.205 124.046 393.936 123.501C393.697 122.926 393.578 122.306 393.578 121.64C393.578 120.975 393.802 120.369 394.25 119.825C394.698 119.28 395.251 119.008 395.909 119.008C396.566 119.008 397.776 119.31 399.54 119.916C401.303 120.521 402.842 120.838 404.157 120.869C404.784 120.112 405.412 119.734 406.04 119.734C407.265 119.734 407.877 120.642 407.877 122.457C407.877 123.032 407.504 123.501 406.757 123.864C406.01 124.227 405.277 124.409 404.56 124.409C404.112 124.954 403.44 125.725 402.543 126.724C401.676 127.692 400.884 128.615 400.167 129.492C400.884 129.371 401.602 129.311 402.319 129.311C404.022 129.311 405.367 130.037 406.353 131.489C407.34 132.912 407.833 134.425 407.833 136.028C407.833 139.054 406.742 141.414 404.56 143.109C402.379 144.773 399.809 145.605 396.85 145.605C395.625 145.605 394.429 145.182 393.264 144.334C392.128 143.487 391.56 142.64 391.56 141.793C391.56 141.399 391.65 141.081 391.829 140.839C392.038 140.567 392.352 140.431 392.771 140.431C393.219 140.431 393.667 140.612 394.115 140.976C394.564 141.339 394.907 141.747 395.147 142.201C395.386 142.625 395.729 143.018 396.178 143.381C396.656 143.744 397.194 143.926 397.791 143.926C399.823 143.926 401.422 143.184 402.588 141.702C403.783 140.189 404.381 138.434 404.381 136.437C404.381 135.287 403.992 134.122 403.215 132.942C402.438 131.762 401.452 131.172 400.257 131.172C399.779 131.172 399.241 131.232 398.643 131.353C398.045 131.474 397.567 131.535 397.209 131.535C396.88 131.535 396.715 131.399 396.715 131.126C396.715 130.854 396.835 130.597 397.074 130.355C399.286 128.237 401.079 126.179 402.453 124.182C401.378 123.94 400.137 123.486 398.733 122.82C397.328 122.155 396.506 121.822 396.267 121.822C395.58 121.822 395.236 122.155 395.236 122.82Z" fill="currentColor"/>
      <path d="M413.36 122.82L413.584 123.955C413.584 124.197 413.39 124.318 413.001 124.318C412.642 124.318 412.329 124.046 412.06 123.501C411.821 122.926 411.701 122.306 411.701 121.64C411.701 120.975 411.925 120.369 412.373 119.825C412.822 119.28 413.375 119.008 414.032 119.008C414.69 119.008 415.9 119.31 417.663 119.916C419.426 120.521 420.965 120.838 422.28 120.869C422.908 120.112 423.535 119.734 424.163 119.734C425.388 119.734 426.001 120.642 426.001 122.457C426.001 123.032 425.627 123.501 424.88 123.864C424.133 124.227 423.401 124.409 422.684 124.409C422.236 124.954 421.563 125.725 420.667 126.724C419.8 127.692 419.008 128.615 418.291 129.492C419.008 129.371 419.725 129.311 420.442 129.311C422.146 129.311 423.491 130.037 424.477 131.489C425.463 132.912 425.956 134.425 425.956 136.028C425.956 139.054 424.865 141.414 422.684 143.109C420.502 144.773 417.932 145.605 414.973 145.605C413.748 145.605 412.553 145.182 411.387 144.334C410.252 143.487 409.684 142.64 409.684 141.793C409.684 141.399 409.774 141.081 409.953 140.839C410.162 140.567 410.476 140.431 410.894 140.431C411.342 140.431 411.791 140.612 412.239 140.976C412.687 141.339 413.031 141.747 413.27 142.201C413.509 142.625 413.853 143.018 414.301 143.381C414.779 143.744 415.317 143.926 415.915 143.926C417.947 143.926 419.546 143.184 420.711 141.702C421.907 140.189 422.504 138.434 422.504 136.437C422.504 135.287 422.116 134.122 421.339 132.942C420.562 131.762 419.576 131.172 418.38 131.172C417.902 131.172 417.364 131.232 416.767 131.353C416.169 131.474 415.691 131.535 415.332 131.535C415.003 131.535 414.839 131.399 414.839 131.126C414.839 130.854 414.959 130.597 415.198 130.355C417.409 128.237 419.202 126.179 420.577 124.182C419.501 123.94 418.261 123.486 416.856 122.82C415.452 122.155 414.63 121.822 414.391 121.822C413.703 121.822 413.36 122.155 413.36 122.82Z" fill="currentColor"/>
      </svg>

  )
}

export default Baeckerei----------------------------------------

FILE: ./src/components/icons/brand/Divider.tsx
----------------------------------------
import React from 'react'

const Divider = () => {
  return (
    <svg width="520" height="36" viewBox="0 0 520 36" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M504.134 6.86379C500.302 6.91449 496.439 11.7267 494.976 14.3911C494.734 14.9349 495.129 15.5486 495.724 15.5526L507.303 15.6309C507.551 15.6326 507.791 15.5418 507.976 15.3764L515.911 8.28058C516.587 7.67628 516.174 6.56188 515.267 6.55568C509.863 6.51869 507.292 6.822 504.134 6.86379Z" fill="#B0BFD9"/>
    <path d="M504.134 28.2231C500.302 28.1724 496.439 23.3602 494.976 20.6958C494.734 20.152 495.129 19.5384 495.724 19.5343L507.303 19.456C507.551 19.4543 507.791 19.5451 507.976 19.7106L515.911 26.8063C516.587 27.4106 516.174 28.525 515.267 28.5312C509.863 28.5682 507.292 28.2649 504.134 28.2231Z" fill="#B0BFD9"/>
    <path fillRule="evenodd" clipRule="evenodd" d="M509.516 16.7948C509.126 17.1853 509.126 17.8185 509.516 18.209L513.759 22.4517C514.149 22.8422 514.782 22.8422 515.173 22.4517L519.416 18.209C519.806 17.8185 519.806 17.1853 519.416 16.7948L515.173 12.5522C514.782 12.1616 514.149 12.1616 513.759 12.5522L509.516 16.7948ZM512.33 16.7948C511.939 17.1853 511.939 17.8185 512.33 18.209L513.758 19.638C514.149 20.0285 514.782 20.0285 515.173 19.638L516.602 18.209C516.992 17.8185 516.992 17.1853 516.602 16.7948L515.173 15.3659C514.782 14.9754 514.149 14.9754 513.758 15.3659L512.33 16.7948Z" fill="#909FBE"/>
    <path d="M15.2178 28.2231C19.0494 28.1724 22.9121 23.3602 24.3757 20.6958C24.618 20.152 24.2226 19.5384 23.6273 19.5343L12.0489 19.456C11.8007 19.4543 11.5606 19.5451 11.3756 19.7106L3.4405 26.8063C2.76472 27.4106 3.17782 28.525 4.08437 28.5312C9.4884 28.5682 12.0596 28.2649 15.2178 28.2231Z" fill="#B0BFD9"/>
    <path d="M15.2178 6.86379C19.0494 6.91449 22.9122 11.7267 24.3757 14.3911C24.618 14.9349 24.2226 15.5486 23.6273 15.5526L12.0489 15.6309C11.8007 15.6326 11.5607 15.5418 11.3756 15.3764L3.4405 8.28058C2.76472 7.67628 3.17783 6.56188 4.08437 6.55568C9.4884 6.51869 12.0596 6.822 15.2178 6.86379Z" fill="#B0BFD9"/>
    <path fillRule="evenodd" clipRule="evenodd" d="M266.646 18.002L354.739 18.002L507.739 18.002C508.015 18.002 508.239 17.7781 508.239 17.502C508.239 17.2258 508.015 17.002 507.739 17.002L354.745 17.002L354.739 17.002L266.646 17.002C266.824 17.3104 266.824 17.6936 266.646 18.002ZM253.224 17.002L12.7393 17.002V18.002L253.224 18.002C253.045 17.6936 253.045 17.3104 253.224 17.002Z" fill="#909FBE"/>
    <path fillRule="evenodd" clipRule="evenodd" d="M254.985 16.7948C254.595 17.1853 254.595 17.8185 254.985 18.209L259.228 22.4517C259.618 22.8422 260.252 22.8422 260.642 22.4517L264.885 18.209C265.275 17.8185 265.275 17.1853 264.885 16.7948L260.642 12.5522C260.252 12.1616 259.618 12.1616 259.228 12.5522L254.985 16.7948ZM257.799 16.7948C257.408 17.1853 257.408 17.8185 257.799 18.209L259.228 19.638C259.618 20.0285 260.251 20.0285 260.642 19.638L262.071 18.209C262.461 17.8185 262.461 17.1853 262.071 16.7948L260.642 15.3659C260.251 14.9754 259.618 14.9754 259.228 15.3659L257.799 16.7948Z" fill="#909FBE"/>
    <path fillRule="evenodd" clipRule="evenodd" d="M0.584397 16.7948C0.193873 17.1853 0.193873 17.8185 0.584397 18.209L4.82704 22.4517C5.21756 22.8422 5.85073 22.8422 6.24125 22.4517L10.4839 18.209C10.8744 17.8185 10.8744 17.1853 10.4839 16.7948L6.24125 12.5522C5.85073 12.1616 5.21756 12.1616 4.82704 12.5522L0.584397 16.7948ZM3.39787 16.7948C3.00735 17.1853 3.00735 17.8185 3.39787 18.209L4.82681 19.638C5.21733 20.0285 5.8505 20.0285 6.24102 19.638L7.66995 18.209C8.06048 17.8185 8.06048 17.1853 7.66995 16.7948L6.24102 15.3659C5.85049 14.9754 5.21733 14.9754 4.82681 15.3659L3.39787 16.7948Z" fill="#909FBE"/>
    </svg>
    
  )
}

export default Divider----------------------------------------

FILE: ./src/components/icons/brand/H.tsx
----------------------------------------
import React from 'react'

const H: React.FC = () => {
  return (
    <svg width="158" height="206" viewBox="0 0 158 206" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M10.4089 50.4611C10.4089 55.2104 11.5985 59.5639 13.9777 63.5216C16.3568 67.2815 17.5464 70.3487 17.5464 72.7233C17.5464 74.9001 16.9516 76.879 15.762 78.6599C14.7707 80.4409 13.3829 81.3314 11.5985 81.3314C8.22799 81.3314 5.45228 78.4621 3.27137 72.7233C1.09046 66.9846 0 60.9491 0 54.6167C0 45.1181 3.46963 36.609 10.4089 29.0893C17.5464 21.5696 26.5675 17.8098 37.472 17.8098C44.8078 17.8098 50.2601 21.3718 53.8289 28.4957C57.5959 35.4217 59.4794 43.3372 59.4794 52.2421C59.4794 61.147 59.182 69.5572 58.5872 77.4726C58.1907 85.1902 57.7942 91.2258 57.3976 95.5793C57.0011 99.7349 56.2081 106.463 55.0185 115.764C53.8289 124.866 53.0358 131.199 52.6393 134.761C68.5005 134.761 85.1547 126.746 102.602 110.718C104.981 82.2219 108.253 59.9596 112.416 43.9308C116.778 27.7041 121.14 16.3256 125.502 9.79538C129.863 3.26512 134.523 0 139.479 0C144.634 0 148.798 2.27569 151.97 6.82709C155.34 11.3785 157.026 16.8204 157.026 23.1527C157.026 46.5034 146.617 71.7339 125.799 98.8444C124.609 114.477 124.015 128.923 124.015 142.182C124.015 155.242 125.898 168.006 129.665 180.473C133.63 192.742 135.613 199.569 135.613 200.954C135.613 202.537 134.523 203.724 132.342 204.516C130.161 205.505 127.782 206 125.204 206C118.265 206 112.614 204.219 108.253 200.657C106.072 198.876 104.287 192.841 102.899 182.55C101.512 172.26 100.818 162.663 100.818 153.758C100.818 144.655 101.115 134.86 101.71 124.372C84.0643 139.411 67.3109 147.228 51.4497 147.821C51.2514 150.592 51.0532 155.242 50.8549 161.772C50.6566 168.105 50.3592 172.854 49.9627 176.02C49.5662 178.988 48.7731 182.451 47.5835 186.409C45.6009 193.731 40.8425 197.392 33.3085 197.392C28.7484 197.392 26.4683 193.533 26.4683 185.816C26.4683 177.9 27.6579 164.246 30.0371 144.853C21.1152 141.093 16.6542 134.464 16.6542 124.965C16.6542 118.039 18.4386 112.202 22.0074 107.452C25.5762 102.505 29.938 100.032 35.0929 100.032C36.8772 81.8261 37.7694 67.7762 37.7694 57.8818C37.7694 40.072 34.9937 31.1671 29.4423 31.1671C16.7534 31.1671 10.4089 37.5985 10.4089 50.4611ZM147.509 28.1989C147.509 25.2305 147.013 22.5591 146.022 20.1844C145.229 17.6119 144.138 16.3256 142.751 16.3256C137.199 16.3256 132.143 37.7964 127.583 80.7378C140.867 60.5533 147.509 43.0403 147.509 28.1989ZM34.2007 109.53C31.425 111.509 30.0371 114.181 30.0371 117.545C30.0371 120.909 30.8302 123.679 32.4163 125.856L34.2007 109.53Z" fill="#131F37"/>
    </svg>
  )
}

export default H----------------------------------------

FILE: ./src/components/icons/brand/Heusser.tsx
----------------------------------------
import React from 'react'

interface HeusserProps {
  color?: string
}

const Heusser: React.FC<HeusserProps> = ({ color = '#7B341E' }) => {
  return (
    <svg
      width="127"
      height="40"
      viewBox="0 0 127 40"
      fill={color}
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M2.02115 9.79827C2.02115 10.7205 2.25213 11.5658 2.71411 12.3343C3.17609 13.0644 3.40707 13.6599 3.40707 14.121C3.40707 14.5437 3.29158 14.928 3.06059 15.2738C2.8681 15.6196 2.59862 15.7925 2.25213 15.7925C1.59767 15.7925 1.0587 15.2354 0.635217 14.121C0.211739 13.0067 0 11.8348 0 10.6052C0 8.7608 0.673715 7.10855 2.02115 5.64841C3.40707 4.18828 5.15873 3.45821 7.27612 3.45821C8.70055 3.45821 9.75925 4.14986 10.4522 5.53314C11.1837 6.878 11.5494 8.41498 11.5494 10.1441C11.5494 11.8732 11.4917 13.5062 11.3762 15.0432C11.2992 16.5418 11.2222 17.7137 11.1452 18.5591C11.0682 19.366 10.9142 20.6724 10.6832 22.4784C10.4522 24.2459 10.2982 25.4755 10.2212 26.1671C13.3011 26.1671 16.5349 24.611 19.9227 21.4986C20.3847 15.9654 21.0199 11.6426 21.8284 8.53026C22.6753 5.37944 23.5223 3.17003 24.3692 1.90202C25.2162 0.634005 26.1209 0 27.0834 0C28.0843 0 28.8928 0.441882 29.5087 1.32565C30.1632 2.20941 30.4904 3.26609 30.4904 4.49568C30.4904 9.02978 28.4693 13.9289 24.427 19.1931C24.196 22.2286 24.0805 25.0336 24.0805 27.6081C24.0805 30.1441 24.4462 32.6225 25.1777 35.0432C25.9477 37.4256 26.3326 38.7512 26.3326 39.0202C26.3326 39.3276 26.1209 39.5581 25.6974 39.7118C25.2739 39.9039 24.812 40 24.3115 40C22.9641 40 21.8669 39.6542 21.0199 38.9625C20.5964 38.6167 20.25 37.4448 19.9805 35.4467C19.711 33.4486 19.5762 31.585 19.5762 29.8559C19.5762 28.0884 19.634 26.1864 19.7495 24.1499C16.3232 27.0701 13.0701 28.5879 9.99023 28.7032C9.95174 29.2411 9.91324 30.1441 9.87474 31.4121C9.83624 32.6417 9.77849 33.5639 9.7015 34.1787C9.6245 34.755 9.47051 35.4275 9.23952 36.196C8.85454 37.6177 7.93059 38.3285 6.46767 38.3285C5.58221 38.3285 5.13948 37.5792 5.13948 36.0807C5.13948 34.5437 5.37047 31.8924 5.83245 28.1268C4.10004 27.3967 3.23383 26.1095 3.23383 24.2651C3.23383 22.9203 3.58032 21.7867 4.27328 20.8646C4.96624 19.9039 5.8132 19.4236 6.81415 19.4236C7.16063 15.8886 7.33387 13.1604 7.33387 11.2392C7.33387 7.78098 6.7949 6.05187 5.71696 6.05187C3.25308 6.05187 2.02115 7.30067 2.02115 9.79827ZM28.6425 5.4755C28.6425 4.89913 28.5463 4.3804 28.3538 3.91931C28.1998 3.41979 27.9881 3.17003 27.7186 3.17003C26.6406 3.17003 25.6589 7.3391 24.7735 15.6772C27.3528 11.7579 28.6425 8.35735 28.6425 5.4755ZM6.64091 21.268C6.10193 21.6523 5.83245 22.171 5.83245 22.8242C5.83245 23.4774 5.98644 24.0154 6.29443 24.438L6.64091 21.268Z"
        fill={color}
      />
      <path
        d="M36.9468 38.3285C34.7909 38.3285 33.0778 37.5216 31.8073 35.9078C30.5369 34.2555 29.9017 32.3919 29.9017 30.317C29.9017 26.1287 30.7871 22.9587 32.558 20.8069C34.3289 18.6551 36.6196 17.5793 39.4299 17.5793C40.7389 17.5793 41.8168 17.9443 42.6638 18.6744C43.5107 19.366 43.9342 20.3266 43.9342 21.5562C43.9342 23.8617 42.9525 25.8021 40.9891 27.3775C39.0642 28.9145 36.6966 29.7214 33.8862 29.7983C34.0402 31.2968 34.5407 32.6033 35.3876 33.7176C36.2731 34.7935 37.2933 35.3314 38.4482 35.3314C39.6032 35.3314 40.6426 35.0624 41.5666 34.5245C42.4905 33.9865 43.3375 33.2181 44.1074 32.219C45.7244 30.1057 47.1103 27.7041 48.2652 25.0144C48.5732 24.3228 48.8042 23.8232 48.9582 23.5159C49.1507 23.2085 49.3432 23.0548 49.5357 23.0548C49.7667 23.0548 49.8821 23.2085 49.8821 23.5159C49.8821 25.4371 48.708 28.3189 46.3596 32.1614C43.8187 36.2728 40.6811 38.3285 36.9468 38.3285ZM33.8862 28.415C36.1576 28.0307 37.813 27.3007 38.8525 26.2248C39.9304 25.1489 40.4694 23.7464 40.4694 22.0173C40.4694 20.2882 39.9112 19.4236 38.7947 19.4236C37.4473 19.4236 36.3116 20.365 35.3876 22.2478C34.4637 24.0922 33.9632 26.1479 33.8862 28.415Z"
        fill={color}
      />
      <path
        d="M46.8197 33.0259L47.1662 26.5706C47.1662 22.4592 47.3587 20.2113 47.7437 19.8271C48.1287 19.4428 48.8024 18.8857 49.7648 18.1556C50.7658 17.3871 51.478 17.0029 51.9015 17.0029C52.3635 17.0029 52.6522 17.0797 52.7677 17.2334C52.8832 17.3871 52.9409 17.6945 52.9409 18.1556C52.9409 19.8079 52.5752 21.4793 51.8437 23.17C51.2663 26.7051 50.9775 29.6061 50.9775 31.8732C50.9775 34.1402 51.3433 35.2738 52.0747 35.2738C52.9602 35.2738 53.9996 34.5053 55.1931 32.9683C56.3865 31.4313 57.5799 29.1451 58.7734 26.1095C59.1199 22.267 59.3894 20.1921 59.5818 19.8847C59.8128 19.5773 60.3518 19.0202 61.1987 18.2133C62.0457 17.4063 62.7387 17.0029 63.2776 17.0029C63.8551 17.0029 64.1439 17.7329 64.1439 19.1931C64.1439 19.5773 64.0284 20.3266 63.7974 21.4409C63.6049 22.5552 63.3739 23.3622 63.1044 23.8617C62.6809 24.9376 62.4692 28.2613 62.4692 33.8329C62.4692 34.8703 62.5847 35.389 62.8157 35.389C63.4701 35.3506 64.3748 34.5437 65.5298 32.9683C66.6847 31.3545 67.8204 29.2987 68.9369 26.8011C70.0918 24.3036 70.7848 23.0548 71.0158 23.0548C71.2852 23.0548 71.42 23.2085 71.42 23.5159C71.42 24.5917 70.8618 26.3016 69.7453 28.6455C66.704 35.1009 64.1439 38.3285 62.065 38.3285C60.5635 38.3285 59.4278 38.0211 58.6579 37.4063C58.3884 37.1374 58.2537 36.3112 58.2537 34.928C58.2537 33.5447 58.3114 32.0077 58.4269 30.317C57.195 32.9299 55.963 34.928 54.7311 36.3112C53.4991 37.6561 52.1132 38.3285 50.5733 38.3285C49.0719 38.3285 48.0709 37.9251 47.5705 37.1182C47.07 36.3112 46.8197 34.9472 46.8197 33.0259Z"
        fill={color}
      />
      <path
        d="M76.4575 20.4035L76.573 19.5389C76.573 18.8473 76.1688 18.5014 75.3603 18.5014C74.5903 18.5014 73.8396 19.0202 73.1082 20.0576C72.3767 21.0567 72.011 21.8828 72.011 22.536C72.011 23.1892 72.0495 23.708 72.1265 24.0922C72.2035 24.4765 72.2805 24.8031 72.3575 25.072C72.473 25.3026 72.6462 25.5908 72.8772 25.9366C73.1082 26.2824 73.2814 26.5322 73.3969 26.6859L74.0321 27.4928C74.3016 27.877 74.4941 28.1268 74.6096 28.2421C76.6115 26.5898 78.9984 24.7454 81.7702 22.7089C81.9242 22.5937 82.0975 22.536 82.2899 22.536C82.6749 22.536 82.8674 22.7474 82.8674 23.17C82.8674 23.5927 82.6942 23.9193 82.3477 24.1499C79.8838 25.7253 77.5547 27.4352 75.3603 29.2795C76.2073 30.5091 76.6307 31.854 76.6307 33.3141C76.6307 34.7743 76.0725 36.0231 74.9561 37.0605C73.8396 38.098 72.4152 38.6167 70.6828 38.6167C68.9504 38.6167 68.0842 37.7906 68.0842 36.1383C68.0842 34.9472 69.3546 33.122 71.8955 30.6628C71.703 30.4323 71.3565 30.0672 70.856 29.5677C70.3556 29.0298 69.9706 28.6071 69.7011 28.2997C69.4701 27.9923 69.1814 27.5889 68.8349 27.0893C68.2189 26.1287 67.9109 25.0913 67.9109 23.9769C67.9109 21.7099 68.6424 19.8847 70.1053 18.5014C71.5683 17.0797 73.1274 16.3689 74.7828 16.3689C75.8223 16.3689 76.6307 16.6571 77.2082 17.2334C77.7857 17.7714 78.0744 18.3285 78.0744 18.9049C78.0744 20.2113 77.7664 20.8646 77.1505 20.8646C76.6885 20.8646 76.4575 20.7109 76.4575 20.4035ZM72.7617 31.7579C71.2218 33.2949 70.4518 34.5437 70.4518 35.5043C70.4518 36.4265 70.933 36.8876 71.8955 36.8876C72.473 36.8876 72.9542 36.6571 73.3392 36.196C74.1861 35.0432 73.9936 33.5639 72.7617 31.7579Z"
        fill={color}
      />
      <path
        d="M88.4693 20.4035L88.5848 19.5389C88.5848 18.8473 88.1806 18.5014 87.3721 18.5014C86.6022 18.5014 85.8515 19.0202 85.12 20.0576C84.3885 21.0567 84.0228 21.8828 84.0228 22.536C84.0228 23.1892 84.0613 23.708 84.1383 24.0922C84.2153 24.4765 84.2923 24.8031 84.3693 25.072C84.4848 25.3026 84.658 25.5908 84.889 25.9366C85.12 26.2824 85.2932 26.5322 85.4087 26.6859L86.044 27.4928C86.3134 27.877 86.5059 28.1268 86.6214 28.2421C88.6233 26.5898 91.0102 24.7454 93.7821 22.7089C93.9361 22.5937 94.1093 22.536 94.3018 22.536C94.6868 22.536 94.8792 22.7474 94.8792 23.17C94.8792 23.5927 94.706 23.9193 94.3595 24.1499C91.8957 25.7253 89.5665 27.4352 87.3721 29.2795C88.2191 30.5091 88.6426 31.854 88.6426 33.3141C88.6426 34.7743 88.0844 36.0231 86.9679 37.0605C85.8515 38.098 84.427 38.6167 82.6946 38.6167C80.9622 38.6167 80.096 37.7906 80.096 36.1383C80.096 34.9472 81.3665 33.122 83.9073 30.6628C83.7148 30.4323 83.3683 30.0672 82.8679 29.5677C82.3674 29.0298 81.9824 28.6071 81.7129 28.2997C81.4819 27.9923 81.1932 27.5889 80.8467 27.0893C80.2308 26.1287 79.9228 25.0913 79.9228 23.9769C79.9228 21.7099 80.6542 19.8847 82.1172 18.5014C83.5801 17.0797 85.1393 16.3689 86.7947 16.3689C87.8341 16.3689 88.6426 16.6571 89.22 17.2334C89.7975 17.7714 90.0863 18.3285 90.0863 18.9049C90.0863 20.2113 89.7783 20.8646 89.1623 20.8646C88.7003 20.8646 88.4693 20.7109 88.4693 20.4035ZM84.7735 31.7579C83.2336 33.2949 82.4636 34.5437 82.4636 35.5043C82.4636 36.4265 82.9449 36.8876 83.9073 36.8876C84.4848 36.8876 84.966 36.6571 85.351 36.196C86.1979 35.0432 86.0055 33.5639 84.7735 31.7579Z"
        fill={color}
      />
      <path
        d="M98.9797 38.3285C96.8238 38.3285 95.1107 37.5216 93.8403 35.9078C92.5698 34.2555 91.9346 32.3919 91.9346 30.317C91.9346 26.1287 92.8201 22.9587 94.591 20.8069C96.3619 18.6551 98.6525 17.5793 101.463 17.5793C102.772 17.5793 103.85 17.9443 104.697 18.6744C105.544 19.366 105.967 20.3266 105.967 21.5562C105.967 23.8617 104.985 25.8021 103.022 27.3775C101.097 28.9145 98.7295 29.7214 95.9192 29.7983C96.0731 31.2968 96.5736 32.6033 97.4206 33.7176C98.306 34.7935 99.3262 35.3314 100.481 35.3314C101.636 35.3314 102.676 35.0624 103.6 34.5245C104.523 33.9865 105.37 33.2181 106.14 32.219C107.757 30.1057 109.143 27.7041 110.298 25.0144C110.606 24.3228 110.837 23.8232 110.991 23.5159C111.184 23.2085 111.376 23.0548 111.569 23.0548C111.8 23.0548 111.915 23.2085 111.915 23.5159C111.915 25.4371 110.741 28.3189 108.393 32.1614C105.852 36.2728 102.714 38.3285 98.9797 38.3285ZM95.9192 28.415C98.1905 28.0307 99.8459 27.3007 100.885 26.2248C101.963 25.1489 102.502 23.7464 102.502 22.0173C102.502 20.2882 101.944 19.4236 100.828 19.4236C99.4802 19.4236 98.3445 20.365 97.4206 22.2478C96.4966 24.0922 95.9961 26.1479 95.9192 28.415Z"
        fill={color}
      />
      <path
        d="M113.877 22.9971L117.053 22.6513C117.361 22.6513 117.63 22.8242 117.861 23.17C118.092 23.5159 118.208 23.8809 118.208 24.2651C118.208 24.6494 118.073 25.9558 117.803 28.1844C117.572 30.4131 117.457 32.1806 117.457 33.487C117.457 34.755 117.572 35.389 117.803 35.389C118.458 35.3506 119.363 34.5437 120.518 32.9683C121.673 31.3545 122.808 29.2987 123.925 26.8011C125.08 24.3036 125.773 23.0548 126.004 23.0548C126.273 23.0548 126.408 23.2085 126.408 23.5159C126.408 24.5917 125.85 26.3016 124.733 28.6455C121.692 35.1009 119.132 38.3285 117.053 38.3285C115.551 38.3285 114.416 38.0211 113.646 37.4063C113.376 37.1374 113.241 35.4659 113.241 32.3919C113.241 29.318 113.569 26.6859 114.223 24.4957C111.99 24.4957 110.431 23.7848 109.546 22.3631C109.084 21.633 108.853 20.8069 108.853 19.8847C108.853 18.9625 109.045 18.1556 109.43 17.464C109.815 16.7723 110.354 16.4265 111.047 16.4265C111.779 16.4265 112.433 16.8108 113.01 17.5793C113.626 18.3093 113.934 19.1354 113.934 20.0576C113.934 20.9798 113.665 21.902 113.126 22.8242C113.28 22.9395 113.53 22.9971 113.877 22.9971Z"
        fill={color}
      />
    </svg>
  )
}

export default Heusser
----------------------------------------

FILE: ./src/components/icons/brand/Wappen.tsx
----------------------------------------
import React from 'react'

const Wappen: React.FC = () => {
  return (
    <svg width="407" height="308" viewBox="0 0 407 308" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path fillRule="evenodd" clipPath="evenodd" d="M322.147 236.334C321.004 234.523 320.146 230.616 320.718 228.615C321.503 225.866 324.72 221.467 331.582 220.609C337.761 219.837 343.476 221.151 347.266 223.508C347.858 223.877 347.835 224.738 347.296 225.181C344.328 227.62 338.805 233.587 339.301 238.049C339.873 243.195 325.578 242.909 322.147 236.334ZM327.293 228.043C328.341 228.424 330.896 228.729 332.725 226.899C333.223 226.401 333.667 225.944 334.072 225.527C335.524 224.03 336.467 223.058 337.585 222.611C339.015 222.039 339.873 222.325 338.729 223.469C338.459 223.738 338.109 224.04 337.74 224.359C336.546 225.39 335.147 226.597 335.584 227.471C335.924 228.151 337.071 228.224 338.126 228.292C338.847 228.339 339.525 228.383 339.873 228.615C340.73 229.186 340.159 230.33 338.729 230.044C338.616 230.022 338.493 229.995 338.36 229.967C336.815 229.641 334.064 229.059 333.011 230.902C331.868 232.903 329.866 233.761 329.009 233.761C328.151 233.761 328.151 233.189 329.009 232.331C329.293 232.047 329.829 231.762 330.346 231.488C331.386 230.936 332.347 230.426 331.01 230.044C330.501 229.899 329.825 229.772 329.147 229.644C327.162 229.271 325.162 228.895 327.293 228.043Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M300.419 259.206C301.486 255.577 304.463 254.322 306.094 254.093L294.997 295.154L295.549 295.303L306.78 253.749C307.67 253.084 308.588 253.199 309.737 253.343C310.107 253.39 310.502 253.439 310.927 253.466L305.282 298.91L305.849 298.98L311.5 253.487L311.569 253.488C312.809 252.496 316.415 251.934 317.909 252.922L316.787 298.933L317.787 298.958L318.908 253.01C320.405 251.749 323.046 251.381 325.945 252.438L327.079 299.243L328.079 299.219L326.946 252.481C330.139 251.685 332.678 253.545 333.583 254.631L333.656 254.667L336.801 299.266L337.799 299.196L334.695 255.176L341.686 258.603L345.952 296.428L346.945 296.316L342.751 259.125L346.818 261.119C346.818 261.119 347.878 261.493 348.164 262.065C348.373 262.483 348.406 262.638 348.459 262.884C348.478 262.974 348.5 263.076 348.534 263.208C351.763 275.698 357.401 298.285 356.741 298.945C355.883 299.803 354.739 300.375 353.596 300.947C353.008 301.24 352.647 301.157 352.163 301.045C351.706 300.939 351.138 300.807 350.165 300.947C349.082 301.101 348.418 301.674 347.584 302.394C346.876 303.005 346.045 303.721 344.733 304.377C343.182 305.153 342.725 305.087 342.129 305.001C341.627 304.929 341.026 304.842 339.587 305.235C337.588 305.78 336.628 305.632 335.46 305.452C334.791 305.349 334.053 305.235 333.011 305.235H329.009C327.519 305.235 326.676 305.666 325.356 306.342C325.157 306.444 324.946 306.552 324.72 306.664C323.66 307.195 322.709 307.069 321.395 306.896C320.583 306.79 319.632 306.664 318.431 306.664C316.636 306.664 315.586 305.92 314.909 305.44C314.4 305.078 314.102 304.867 313.856 305.235C313.284 306.093 310.14 306.664 308.138 306.664C306.999 306.664 305.952 305.923 305.05 305.284C304.369 304.801 303.77 304.377 303.278 304.377C302.932 304.377 302.481 304.456 301.988 304.542C300.854 304.739 299.501 304.975 298.704 304.377C297.56 303.52 295.559 302.948 294.415 302.948C294.179 302.948 293.955 302.972 293.739 302.996C292.905 303.086 292.178 303.166 291.27 301.804C290.356 300.432 287.458 298.755 286.124 298.088C290.413 286.747 299.276 263.094 300.419 259.206Z" fill="currentColor"/>
      <path d="M250.387 256.919C249.472 256.461 249.339 255.584 248.958 254.917C252.102 253.202 252.388 250.343 251.817 248.628C252.674 247.484 254.676 246.055 256.391 244.911C257.534 252.344 252.102 255.489 250.387 256.919Z" fill="currentColor"/>
      <path d="M244.955 240.623C245.87 239.022 248.576 236.906 249.815 236.048C242.382 230.33 231.232 230.33 221.226 235.19C211.219 240.051 208.074 250.343 207.217 254.917C206.359 259.492 209.504 271.213 222.369 268.069C235.235 264.924 237.808 250.629 238.951 247.198C240.095 243.767 240.381 240.051 240.095 238.335C239.809 236.62 238.379 236.048 237.236 237.478C236.092 238.907 235.806 241.766 235.235 244.911C234.663 248.056 228.087 263.494 220.082 262.351C212.077 261.207 215.508 250.629 220.368 247.198C220.848 246.851 221.325 246.519 221.797 246.201C222.669 245.616 218.367 241.844 221.226 239.765C224.371 237.478 227.229 242.338 227.801 243.196C230.336 242.007 232.659 240.821 234.663 240.337C234.663 237.49 236.378 235.19 238.665 235.19C242.382 235.19 240.946 239.693 241.81 239.765C243.654 239.918 244.348 240.275 244.955 240.623Z" fill="currentColor"/>
      <path d="M222.083 243.196C221.397 241.366 222.655 240.908 223.513 240.908C224.371 240.908 224.656 241.766 226.086 244.053C227.229 245.883 230.756 248.437 232.376 249.485L230.088 252.916C228.087 251.772 222.941 245.483 222.083 243.196Z" fill="currentColor"/>
      <path d="M237.236 256.347C237.693 255.66 238.379 253.773 238.665 252.916C239.523 253.106 241.124 253.602 240.667 254.059C240.209 254.517 240.667 256.347 240.953 257.204C239.523 257.204 236.778 257.033 237.236 256.347Z" fill="currentColor"/>
      <path d="M403.913 281.505L392.763 276.931L391.048 280.076L401.34 286.652C402.484 287.795 405.343 288.653 406.486 286.366C407.859 283.621 405.343 282.077 403.913 281.505Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M133.17 216.607C133.456 213.748 135.914 206.944 143.462 202.598C152.897 197.166 161.473 195.737 166.334 199.167C171.194 202.598 173.481 206.601 171.48 212.89C166.905 215.178 159.758 221.753 156.899 228.043C149.18 230.33 132.026 232.331 133.17 216.607ZM164.046 212.605L158.614 209.46C158.996 208.507 160.616 206.486 164.046 206.029C167.477 205.572 166.81 204.504 166.048 204.028C164.142 203.646 159.701 203.456 157.185 205.743C157.086 205.833 156.99 205.921 156.895 206.007C153.967 208.672 152.807 209.728 150.038 209.174C147.179 208.602 139.745 210.032 138.316 212.319C138.047 212.991 139.106 212.651 140.631 212.163C142.348 211.612 144.655 210.872 146.321 211.175C148.837 211.633 148.132 213.653 147.465 214.606C146.035 216.417 143.348 220.381 144.034 221.753C146.321 220.61 151.467 215.464 152.897 213.462C154.326 211.461 162.045 211.747 164.046 212.605Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M354.525 29.3326C355.184 29.8713 355.286 30.8414 354.752 31.5047L315.416 80.3593C314.877 81.0291 313.895 81.1317 313.229 80.5877V80.5877C312.57 80.049 312.468 79.0789 313.002 78.4156L352.338 29.5611C352.877 28.8912 353.859 28.7886 354.525 29.3326V29.3326Z" fill="currentColor"/>
      <path d="M332.612 46.2106C331.04 48.3189 332.049 52.432 332.889 54.3416C333.084 54.7007 333.583 54.7415 333.834 54.4189L338.636 48.2403C338.789 48.0443 338.863 47.7986 338.844 47.551L338.361 41.178C338.292 40.274 337.158 39.9256 336.608 40.6463C334.679 43.1733 333.812 44.6017 332.612 46.2106Z" fill="currentColor"/>
      <path d="M340.199 36.649C338.627 38.7573 339.463 42.4887 339.555 45.1991C339.578 45.856 340.408 46.1262 340.813 45.6081L346.222 38.6792C346.375 38.4829 346.449 38.2365 346.431 37.9882L345.947 31.6164C345.879 30.7124 344.745 30.3641 344.195 31.0847C342.266 33.6117 341.398 35.0401 340.199 36.649Z" fill="currentColor"/>
      <path d="M350.803 44.7117C349.121 46.7336 345.298 46.7944 342.641 47.3392C341.997 47.4713 341.54 46.7267 341.949 46.2121L347.419 39.3315C347.574 39.1366 347.796 39.0065 348.042 38.9667L354.35 37.9446C355.244 37.7996 355.849 38.8207 355.277 39.5241C353.272 41.9908 352.086 43.1687 350.803 44.7117Z" fill="currentColor"/>
      <path d="M342.728 54.3895C341.05 56.4147 336.815 56.4055 334.761 56.0397C334.367 55.9349 334.209 55.4592 334.463 55.1394L339.334 49.0145C339.488 48.8202 339.71 48.6903 339.955 48.6501L346.262 47.6154C347.156 47.4687 347.763 48.4886 347.192 49.1932C345.192 51.6638 344.008 52.844 342.728 54.3895Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M371.403 7.88034C371.527 7.97763 371.549 8.15732 371.452 8.28168L352.487 32.5227C352.39 32.647 352.21 32.669 352.086 32.5717V32.5717C351.962 32.4744 351.94 32.2947 352.037 32.1703L371.001 7.92936C371.099 7.80499 371.278 7.78305 371.403 7.88034V7.88034Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M373.237 9.36838C373.361 9.46567 373.383 9.64536 373.286 9.76972L354.321 34.0107C354.224 34.1351 354.044 34.157 353.92 34.0597V34.0597C353.795 33.9624 353.773 33.7827 353.871 33.6584L372.835 9.41739C372.932 9.29303 373.112 9.27109 373.237 9.36838V9.36838Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M369.027 6.41061C369.151 6.50791 369.173 6.68759 369.076 6.81195L350.111 31.0529C350.014 31.1773 349.834 31.1992 349.71 31.1019V31.1019C349.586 31.0047 349.564 30.825 349.661 30.7006L368.625 6.45963C368.723 6.33527 368.902 6.31332 369.027 6.41061V6.41061Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M375.225 10.8515C375.35 10.9488 375.372 11.1285 375.274 11.2529L356.31 35.4938C356.213 35.6182 356.033 35.6402 355.909 35.5429V35.5429C355.784 35.4456 355.762 35.2659 355.86 35.1415L374.824 10.9005C374.921 10.7762 375.101 10.7542 375.225 10.8515V10.8515Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M367.425 4.91452C367.55 5.01181 367.572 5.1915 367.474 5.31586L348.51 29.5568C348.413 29.6812 348.233 29.7031 348.108 29.6058V29.6058C347.984 29.5086 347.962 29.3289 348.059 29.2045L367.024 4.96354C367.121 4.83917 367.301 4.81723 367.425 4.91452V4.91452Z" fill="currentColor"/>
      <path d="M347.778 27.0875C346.206 29.1958 347.042 32.9272 347.134 35.6375C347.157 36.2945 347.988 36.5647 348.392 36.0465L353.801 29.1176C353.954 28.9214 354.029 28.675 354.01 28.4267L353.527 22.0549C353.458 21.1509 352.324 20.8025 351.774 21.5232C349.845 24.0502 348.978 25.4786 347.778 27.0875Z" fill="currentColor"/>
      <path d="M358.382 35.1502C356.7 37.1721 352.877 37.2329 350.22 37.7777C349.576 37.9098 349.119 37.1651 349.528 36.6506L354.998 29.77C355.153 29.5751 355.375 29.445 355.621 29.4052L361.929 28.383C362.824 28.238 363.428 29.2591 362.856 29.9626C360.851 32.4293 359.665 33.6072 358.382 35.1502Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M370.047 41.6169C370.661 42.2074 370.683 43.1825 370.096 43.8003L326.919 89.2942C326.327 89.918 325.34 89.9404 324.72 89.344V89.344C324.107 88.7535 324.084 87.7784 324.671 87.1607L367.848 41.6667C368.441 41.0429 369.427 41.0206 370.047 41.6169V41.6169Z" fill="currentColor"/>
      <path d="M353.778 71.7635C351.102 74.5059 344.953 73.9906 342.013 73.216C341.452 73.017 341.28 72.3076 341.687 71.8733L349.607 63.4268C349.776 63.2457 350.008 63.1342 350.255 63.1141L360.865 62.2508C361.769 62.1772 362.292 63.2444 361.672 63.9058C357.976 67.8483 355.984 69.5031 353.778 71.7635Z" fill="currentColor"/>
      <path d="M340.3 59.0968C337.748 61.9547 338.683 68.0542 339.657 70.9338C339.894 71.4799 340.614 71.6033 341.019 71.1673L348.903 62.6876C349.072 62.5057 349.167 62.2675 349.171 62.0193L349.305 51.3752C349.316 50.4687 348.216 50.0198 347.599 50.6837C343.919 54.6412 342.404 56.7411 340.3 59.0968Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M400.998 7.63438C401.115 7.74082 401.123 7.92165 401.016 8.03827L367.682 44.5596C367.576 44.6762 367.395 44.6845 367.278 44.578V44.578C367.162 44.4716 367.153 44.2908 367.26 44.1741L400.594 7.6528C400.701 7.53618 400.881 7.52793 400.998 7.63438V7.63438Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M402.935 9.57139C403.051 9.67871 403.058 9.8596 402.95 9.97542L369.389 46.1949C369.282 46.3107 369.101 46.3176 368.985 46.2103V46.2103C368.869 46.103 368.862 45.9221 368.97 45.8063L402.531 9.58678C402.638 9.47097 402.819 9.46408 402.935 9.57139V9.57139Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M399.061 6.47232C399.176 6.58008 399.183 6.76099 399.075 6.8764L365.434 42.9063C365.326 43.0218 365.145 43.028 365.03 42.9202V42.9202C364.914 42.8124 364.908 42.6315 365.016 42.5161L398.657 6.48618C398.765 6.37077 398.946 6.36456 399.061 6.47232V6.47232Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M404.872 11.1213C404.988 11.2286 404.995 11.4095 404.888 11.5253L371.25 47.8348C371.143 47.9506 370.962 47.9575 370.846 47.8502V47.8502C370.731 47.7429 370.724 47.562 370.831 47.4462L404.468 11.1367C404.575 11.0209 404.756 11.014 404.872 11.1213V11.1213Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M406.355 12.7363C406.471 12.8436 406.478 13.0245 406.37 13.1403L372.733 49.4498C372.626 49.5656 372.445 49.5725 372.329 49.4652V49.4652C372.213 49.3579 372.206 49.177 372.314 49.0612L405.951 12.7517C406.058 12.6359 406.239 12.629 406.355 12.7363V12.7363Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M397.124 4.9226C397.24 5.02969 397.247 5.21056 397.14 5.3266L363.959 41.2826C363.852 41.3986 363.671 41.4059 363.555 41.2988V41.2988C363.439 41.1917 363.432 41.0109 363.539 40.8948L396.72 4.93882C396.827 4.82278 397.008 4.81552 397.124 4.9226V4.9226Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M395.05 3.37304C395.166 3.48013 395.174 3.661 395.067 3.77704L361.886 39.733C361.779 39.8491 361.598 39.8563 361.482 39.7492V39.7492C361.366 39.6422 361.358 39.4613 361.466 39.3453L394.646 3.38926C394.753 3.27322 394.934 3.26596 395.05 3.37304V3.37304Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M382.8 56.5157C383.359 57.1577 383.296 58.1309 382.658 58.695L335.667 100.239C335.023 100.808 334.038 100.744 333.473 100.096V100.096C332.913 99.4542 332.977 98.4809 333.615 97.9169L380.605 56.3731C381.25 55.8034 382.235 55.8675 382.8 56.5157V56.5157Z" fill="currentColor"/>
      <path d="M358.361 69.4683C356.457 71.2822 356.759 75.5063 357.266 77.53C357.398 77.9168 357.884 78.041 358.185 77.7651L363.958 72.4821C364.141 72.3145 364.255 72.0848 364.279 71.8376L364.874 65.474C364.959 64.5714 363.899 64.0373 363.236 64.6552C360.91 66.8218 359.814 68.084 358.361 69.4683Z" fill="currentColor"/>
      <path d="M367.448 61.3185C365.543 63.1324 365.74 66.9513 365.375 69.6385C365.287 70.2899 366.061 70.696 366.546 70.2533L373.043 64.3326C373.227 64.1649 373.342 63.9346 373.365 63.6866L373.961 57.3243C374.045 56.4217 372.986 55.8875 372.322 56.5054C369.996 58.6721 368.901 59.9343 367.448 61.3185Z" fill="currentColor"/>
      <path d="M376.544 71.0495C374.547 72.7598 370.768 72.1767 368.057 72.267C367.4 72.2889 367.075 71.478 367.564 71.0396L374.114 65.1769C374.299 65.0108 374.54 64.9199 374.789 64.922L381.179 64.9752C382.085 64.9827 382.509 66.0909 381.827 66.6882C379.436 68.7826 378.069 69.7442 376.544 71.0495Z" fill="currentColor"/>
      <path d="M366.957 79.2317C364.963 80.946 360.79 80.2247 358.827 79.5187C358.455 79.3489 358.38 78.8536 358.684 78.5811L364.515 73.3625C364.7 73.1969 364.94 73.1061 365.189 73.1077L371.58 73.1484C372.486 73.1542 372.913 74.2615 372.232 74.8601C369.844 76.9592 368.479 77.9235 366.957 79.2317Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M403.045 38.207C403.151 38.3238 403.143 38.5046 403.026 38.6109L380.255 59.3174C380.138 59.4236 379.957 59.415 379.851 59.2982V59.2982C379.745 59.1814 379.753 59.0006 379.87 58.8943L402.641 38.1878C402.758 38.0816 402.939 38.0902 403.045 38.207V38.207Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M404.602 39.9824C404.709 40.0992 404.7 40.28 404.583 40.3862L381.812 61.0928C381.695 61.199 381.515 61.1904 381.408 61.0736V61.0736C381.302 60.9568 381.311 60.7759 381.428 60.6697L404.199 39.9632C404.315 39.857 404.496 39.8656 404.602 39.9824V39.9824Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M400.95 36.3588C401.056 36.4757 401.048 36.6565 400.931 36.7627L378.16 57.4692C378.043 57.5755 377.862 57.5669 377.756 57.45V57.45C377.65 57.3332 377.658 57.1524 377.775 57.0462L400.546 36.3397C400.663 36.2334 400.844 36.242 400.95 36.3588V36.3588Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M406.314 41.7788C406.42 41.8956 406.411 42.0764 406.294 42.1826L383.523 62.8891C383.407 62.9954 383.226 62.9868 383.12 62.87V62.87C383.013 62.7531 383.022 62.5723 383.139 62.4661L405.91 41.7596C406.027 41.6534 406.207 41.662 406.314 41.7788V41.7788Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M399.623 34.6147C399.729 34.7315 399.721 34.9123 399.604 35.0186L376.833 55.7251C376.716 55.8313 376.535 55.8227 376.429 55.7059V55.7059C376.323 55.5891 376.332 55.4083 376.448 55.302L399.219 34.5955C399.336 34.4893 399.517 34.4979 399.623 34.6147V34.6147Z" fill="currentColor"/>
      <path d="M376.527 53.1679C374.623 54.9818 374.819 58.8006 374.455 61.4879C374.366 62.1393 375.14 62.5454 375.626 62.1026L382.123 56.182C382.307 56.0143 382.422 55.7839 382.445 55.536L383.04 49.1737C383.125 48.2711 382.065 47.7369 381.402 48.3548C379.076 50.5215 377.98 51.7837 376.527 53.1679Z" fill="currentColor"/>
      <path d="M385.624 62.8991C383.626 64.6094 379.847 64.0263 377.137 64.1166C376.48 64.1385 376.154 63.3276 376.644 62.8892L383.193 57.0265C383.379 56.8604 383.619 56.7695 383.868 56.7716L390.258 56.8248C391.165 56.8323 391.589 57.9405 390.907 58.5378C388.515 60.6322 387.148 61.5938 385.624 62.8991Z" fill="currentColor"/>
      <path d="M365.412 59.1708C362.938 61.6531 357.855 61.2756 354.264 61.6804C353.382 61.7798 352.853 60.7289 353.457 60.0793L360.076 52.9634C360.249 52.7779 360.485 52.6648 360.738 52.647L370.194 51.9782C371.098 51.9143 371.61 52.9905 370.986 53.6481C368.055 56.7378 367.404 57.1726 365.412 59.1708Z" fill="currentColor"/>
      <path d="M375.346 48.4489C372.872 50.9312 367.789 50.5536 364.198 50.9585C363.316 51.0578 362.787 50.007 363.391 49.3574L370.011 42.2415C370.183 42.056 370.419 41.9429 370.672 41.9251L380.128 41.2563C381.032 41.1924 381.544 42.2685 380.92 42.9262C377.989 46.0158 377.338 46.4507 375.346 48.4489Z" fill="currentColor"/>
      <path d="M362.746 36.306C360.441 38.9469 361.171 43.9906 361.017 47.6016C360.979 48.488 362.064 48.9434 362.67 48.2954L369.309 41.1973C369.482 41.0124 369.578 40.7686 369.578 40.5153L369.588 31.036C369.589 30.1294 368.48 29.6936 367.868 30.3618C364.989 33.5006 364.601 34.18 362.746 36.306Z" fill="currentColor"/>
      <path d="M352.675 47.1537C350.371 49.7946 351.101 54.8383 350.946 58.4492C350.909 59.3356 351.994 59.791 352.6 59.143L359.238 52.045C359.411 51.86 359.508 51.6163 359.508 51.363L359.518 41.8836C359.519 40.9771 358.41 40.5413 357.797 41.2094C354.919 44.3483 354.53 45.0277 352.675 47.1537Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M52.4755 29.3326C51.8158 29.8713 51.7145 30.8414 52.2486 31.5047L91.5838 80.3593C92.1231 81.0291 93.1048 81.1317 93.771 80.5877V80.5877C94.4306 80.049 94.5319 79.0789 93.9978 78.4156L54.6627 29.5611C54.1233 28.8912 53.1416 28.7886 52.4755 29.3326V29.3326Z" fill="currentColor"/>
      <path d="M74.3882 46.2106C75.9602 48.3189 74.9517 52.432 74.1114 54.3416C73.9163 54.7007 73.4169 54.7415 73.1662 54.4189L68.3639 48.2403C68.2116 48.0443 68.1376 47.7986 68.1563 47.551L68.6395 41.178C68.7081 40.274 69.8423 39.9256 70.3923 40.6463C72.321 43.1733 73.1885 44.6017 74.3882 46.2106Z" fill="currentColor"/>
      <path d="M66.8014 36.649C68.3735 38.7573 67.5374 42.4887 67.4451 45.1991C67.4227 45.856 66.5917 46.1262 66.1873 45.6081L60.7786 38.6792C60.6253 38.4829 60.5509 38.2365 60.5697 37.9882L61.0528 31.6164C61.1213 30.7124 62.2555 30.3641 62.8055 31.0847C64.7342 33.6117 65.6017 35.0401 66.8014 36.649Z" fill="currentColor"/>
      <path d="M56.1976 44.7117C57.8793 46.7336 61.7027 46.7944 64.3593 47.3392C65.0032 47.4713 65.4605 46.7267 65.0514 46.2121L59.5814 39.3315C59.4264 39.1366 59.2044 39.0065 58.9586 38.9667L52.6507 37.9446C51.7558 37.7996 51.1516 38.8207 51.7234 39.5241C53.7287 41.9908 54.9143 43.1687 56.1976 44.7117Z" fill="currentColor"/>
      <path d="M64.2722 54.3895C65.9498 56.4147 70.1848 56.4055 72.2388 56.0397C72.6337 55.9349 72.7912 55.4592 72.5369 55.1394L67.6664 49.0145C67.5118 48.8202 67.2905 48.6903 67.0455 48.6501L60.7385 47.6154C59.8439 47.4687 59.2377 48.4886 59.8082 49.1932C61.8085 51.6638 62.9919 52.844 64.2722 54.3895Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M35.5975 7.88034C35.4731 7.97763 35.4511 8.15732 35.5484 8.28168L54.5129 32.5227C54.6102 32.647 54.7899 32.669 54.9142 32.5717V32.5717C55.0386 32.4744 55.0605 32.2947 54.9632 32.1703L35.9988 7.92936C35.9015 7.80499 35.7218 7.78305 35.5975 7.88034V7.88034Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M33.7637 9.36838C33.6394 9.46567 33.6174 9.64536 33.7147 9.76972L52.6792 34.0107C52.7764 34.1351 52.9561 34.157 53.0805 34.0597V34.0597C53.2048 33.9624 53.2268 33.7827 53.1295 33.6584L34.165 9.41739C34.0678 9.29303 33.8881 9.27109 33.7637 9.36838V9.36838Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M37.9734 6.41061C37.8491 6.50791 37.8271 6.68759 37.9244 6.81195L56.8889 31.0529C56.9862 31.1773 57.1658 31.1992 57.2902 31.1019V31.1019C57.4146 31.0047 57.4365 30.825 57.3392 30.7006L38.3748 6.45963C38.2775 6.33527 38.0978 6.31332 37.9734 6.41061V6.41061Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M31.7749 10.8515C31.6506 10.9488 31.6286 11.1285 31.7259 11.2529L50.6904 35.4938C50.7877 35.6182 50.9674 35.6402 51.0917 35.5429V35.5429C51.2161 35.4456 51.238 35.2659 51.1407 35.1415L32.1763 10.9005C32.079 10.7762 31.8993 10.7542 31.7749 10.8515V10.8515Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M39.575 4.91452C39.4506 5.01181 39.4287 5.1915 39.526 5.31586L58.4904 29.5568C58.5877 29.6812 58.7674 29.7031 58.8918 29.6058V29.6058C59.0161 29.5086 59.0381 29.3289 58.9408 29.2045L39.9763 4.96354C39.879 4.83917 39.6994 4.81723 39.575 4.91452V4.91452Z" fill="currentColor"/>
      <path d="M59.2218 27.0875C60.7939 29.1958 59.9578 32.9272 59.8655 35.6375C59.8431 36.2945 59.0122 36.5647 58.6077 36.0465L53.199 29.1176C53.0458 28.9214 52.9713 28.675 52.9901 28.4267L53.4732 22.0549C53.5417 21.1509 54.6759 20.8025 55.2259 21.5232C57.1546 24.0502 58.0222 25.4786 59.2218 27.0875Z" fill="currentColor"/>
      <path d="M48.6183 35.1502C50.2999 37.1721 54.1233 37.2329 56.7799 37.7777C57.4239 37.9098 57.8812 37.1651 57.4721 36.6506L52.002 29.77C51.8471 29.5751 51.625 29.445 51.3792 29.4052L45.0714 28.383C44.1765 28.238 43.5723 29.2591 44.1441 29.9626C46.1493 32.4293 47.335 33.6072 48.6183 35.1502Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M36.9532 41.6169C36.3396 42.2074 36.3175 43.1825 36.9038 43.8003L80.0815 89.2942C80.6736 89.918 81.6604 89.9404 82.2801 89.344V89.344C82.8937 88.7535 82.9158 87.7784 82.3295 87.1607L39.1518 41.6667C38.5597 41.0429 37.5729 41.0206 36.9532 41.6169V41.6169Z" fill="currentColor"/>
      <path d="M53.2218 71.7635C55.8982 74.5059 62.0474 73.9906 64.987 73.216C65.5481 73.017 65.7205 72.3076 65.3133 71.8733L57.3936 63.4268C57.2238 63.2457 56.9927 63.1342 56.7452 63.1141L46.1353 62.2508C45.2317 62.1772 44.7086 63.2444 45.3286 63.9058C49.0247 67.8483 51.0159 69.5031 53.2218 71.7635Z" fill="currentColor"/>
      <path d="M66.7004 59.0968C69.253 61.9547 68.3177 68.0542 67.3434 70.9338C67.1065 71.4799 66.3869 71.6033 65.9815 71.1673L58.0975 62.6876C57.9284 62.5057 57.8331 62.2675 57.8299 62.0193L57.6955 51.3752C57.684 50.4687 58.7845 50.0198 59.4019 50.6837C63.082 54.6412 64.5965 56.7411 66.7004 59.0968Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M6.00226 7.63438C5.88564 7.74082 5.87739 7.92165 5.98383 8.03827L39.3181 44.5596C39.4245 44.6762 39.6053 44.6845 39.722 44.578V44.578C39.8386 44.4716 39.8468 44.2908 39.7404 44.1741L6.40616 7.6528C6.29971 7.53618 6.11888 7.52793 6.00226 7.63438V7.63438Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M4.06524 9.57139C3.94943 9.67871 3.94254 9.8596 4.04986 9.97542L37.6113 46.1949C37.7186 46.3107 37.8995 46.3176 38.0153 46.2103V46.2103C38.1311 46.103 38.138 45.9221 38.0307 45.8063L4.46927 9.58678C4.36195 9.47097 4.18106 9.46408 4.06524 9.57139V9.57139Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M7.93952 6.47232C7.82411 6.58008 7.81791 6.76099 7.92567 6.8764L41.5666 42.9063C41.6743 43.0218 41.8552 43.028 41.9707 42.9202V42.9202C42.0861 42.8124 42.0923 42.6315 41.9845 42.5161L8.3436 6.48618C8.23585 6.37077 8.05493 6.36456 7.93952 6.47232V6.47232Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M2.12813 11.1213C2.0123 11.2286 2.00539 11.4095 2.11269 11.5253L35.7498 47.8348C35.8571 47.9506 36.038 47.9575 36.1538 47.8502V47.8502C36.2696 47.7429 36.2765 47.562 36.1692 47.4462L2.53215 11.1367C2.42485 11.0209 2.24396 11.014 2.12813 11.1213V11.1213Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M0.645463 12.7363C0.529632 12.8436 0.522721 13.0245 0.630026 13.1403L34.2671 49.4498C34.3744 49.5656 34.5553 49.5725 34.6711 49.4652V49.4652C34.7869 49.3579 34.7939 49.177 34.6866 49.0612L1.04949 12.7517C0.942181 12.6359 0.761294 12.629 0.645463 12.7363V12.7363Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M9.8764 4.9226C9.76037 5.02969 9.75311 5.21056 9.86019 5.3266L43.041 41.2826C43.1481 41.3986 43.3289 41.4059 43.445 41.2988V41.2988C43.561 41.1917 43.5683 41.0109 43.4612 40.8948L10.2804 4.93882C10.1733 4.82278 9.99244 4.81552 9.8764 4.9226V4.9226Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M11.9501 3.37304C11.8341 3.48013 11.8268 3.661 11.9339 3.77704L45.1147 39.733C45.2218 39.8491 45.4027 39.8563 45.5187 39.7492V39.7492C45.6347 39.6422 45.642 39.4613 45.5349 39.3453L12.3541 3.38926C12.247 3.27322 12.0662 3.26596 11.9501 3.37304V3.37304Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M24.2005 56.5157C23.6408 57.1577 23.7041 58.1309 24.3421 58.695L71.3329 100.239C71.9772 100.808 72.9622 100.744 73.5273 100.096V100.096C74.087 99.4542 74.0237 98.4809 73.3857 97.9169L26.3949 56.3731C25.7506 55.8034 24.7656 55.8675 24.2005 56.5157V56.5157Z" fill="currentColor"/>
      <path d="M48.6395 69.4683C50.5437 71.2822 50.2412 75.5063 49.7341 77.53C49.6022 77.9168 49.1167 78.041 48.8153 77.7651L43.0424 72.4821C42.8593 72.3145 42.745 72.0848 42.7219 71.8376L42.1264 65.474C42.042 64.5714 43.1014 64.0373 43.7648 64.6552C46.091 66.8218 47.1864 68.084 48.6395 69.4683Z" fill="currentColor"/>
      <path d="M39.5529 61.3185C41.4571 63.1324 41.2604 66.9513 41.6252 69.6385C41.7137 70.2899 40.9399 70.696 40.4541 70.2533L33.9572 64.3326C33.7731 64.1649 33.6583 63.9346 33.6351 63.6866L33.0398 57.3243C32.9553 56.4217 34.0148 55.8875 34.6781 56.5054C37.0043 58.6721 38.0997 59.9343 39.5529 61.3185Z" fill="currentColor"/>
      <path d="M30.456 71.0495C32.4537 72.7598 36.2329 72.1767 38.9433 72.267C39.6003 72.2889 39.9258 71.478 39.436 71.0396L32.8868 65.1769C32.7013 65.0108 32.4605 64.9199 32.2115 64.922L25.8216 64.9752C24.9151 64.9827 24.4912 66.0909 25.1732 66.6882C27.5647 68.7826 28.9315 69.7442 30.456 71.0495Z" fill="currentColor"/>
      <path d="M40.0428 79.2317C42.0372 80.946 46.2103 80.2247 48.1735 79.5187C48.5452 79.3489 48.6205 78.8536 48.316 78.5811L42.4848 73.3625C42.2998 73.1969 42.0598 73.1061 41.8116 73.1077L35.4204 73.1484C34.5138 73.1542 34.0877 74.2615 34.7686 74.8601C37.156 76.9592 38.5209 77.9235 40.0428 79.2317Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M3.95522 38.207C3.84899 38.3238 3.85757 38.5046 3.97439 38.6109L26.7453 59.3174C26.8622 59.4236 27.043 59.415 27.1492 59.2982V59.2982C27.2554 59.1814 27.2469 59.0006 27.13 58.8943L4.35908 38.1878C4.24226 38.0816 4.06145 38.0902 3.95522 38.207V38.207Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M2.39784 39.9824C2.29162 40.0992 2.3002 40.28 2.41702 40.3862L25.188 61.0928C25.3048 61.199 25.4856 61.1904 25.5918 61.0736V61.0736C25.6981 60.9568 25.6895 60.7759 25.5727 60.6697L2.80171 39.9632C2.68489 39.857 2.50407 39.8656 2.39784 39.9824V39.9824Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M6.05019 36.3588C5.94396 36.4757 5.95255 36.6565 6.06936 36.7627L28.8403 57.4692C28.9571 57.5755 29.138 57.5669 29.2442 57.45V57.45C29.3504 57.3332 29.3418 57.1524 29.225 57.0462L6.45405 36.3397C6.33723 36.2334 6.15642 36.242 6.05019 36.3588V36.3588Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M0.686906 41.7788C0.580678 41.8956 0.589264 42.0764 0.706083 42.1826L23.477 62.8891C23.5939 62.9954 23.7747 62.9868 23.8809 62.87V62.87C23.9871 62.7531 23.9785 62.5723 23.8617 62.4661L1.09077 41.7596C0.97395 41.6534 0.793135 41.662 0.686906 41.7788V41.7788Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M7.37734 34.6147C7.27111 34.7315 7.27969 34.9123 7.39651 35.0186L30.1675 55.7251C30.2843 55.8313 30.4651 55.8227 30.5713 55.7059V55.7059C30.6776 55.5891 30.669 55.4083 30.5522 55.302L7.7812 34.5955C7.66438 34.4893 7.48356 34.4979 7.37734 34.6147V34.6147Z" fill="currentColor"/>
      <path d="M30.4733 53.1679C32.3775 54.9818 32.1808 58.8006 32.5456 61.4879C32.6341 62.1393 31.8604 62.5454 31.3745 62.1026L24.8776 56.182C24.6936 56.0143 24.5787 55.7839 24.5555 55.536L23.9602 49.1737C23.8757 48.2711 24.9352 47.7369 25.5985 48.3548C27.9247 50.5215 29.0201 51.7837 30.4733 53.1679Z" fill="currentColor"/>
      <path d="M21.3764 62.8991C23.3741 64.6094 27.1533 64.0263 29.8637 64.1166C30.5207 64.1385 30.8462 63.3276 30.3565 62.8892L23.8072 57.0265C23.6217 56.8604 23.3809 56.7695 23.1319 56.7716L16.742 56.8248C15.8355 56.8323 15.4116 57.9405 16.0936 58.5378C18.4851 60.6322 19.8519 61.5938 21.3764 62.8991Z" fill="currentColor"/>
      <path d="M41.588 59.1708C44.0624 61.6531 49.1446 61.2756 52.7361 61.6804C53.6177 61.7798 54.1474 60.7289 53.5431 60.0793L46.9236 52.9634C46.7511 52.7779 46.5146 52.6648 46.2619 52.647L36.8062 51.9782C35.9019 51.9143 35.3901 52.9905 36.014 53.6481C38.9453 56.7378 39.5961 57.1726 41.588 59.1708Z" fill="currentColor"/>
      <path d="M31.6539 48.4489C34.1283 50.9312 39.2105 50.5536 42.802 50.9585C43.6836 51.0578 44.2133 50.007 43.609 49.3574L36.9895 42.2415C36.817 42.056 36.5805 41.9429 36.3278 41.9251L26.8721 41.2563C25.9678 41.1924 25.456 42.2685 26.08 42.9262C29.0112 46.0158 29.662 46.4507 31.6539 48.4489Z" fill="currentColor"/>
      <path d="M44.2547 36.306C46.559 38.9469 45.8292 43.9906 45.9835 47.6016C46.0213 48.488 44.9363 48.9434 44.3302 48.2954L37.6915 41.1973C37.5185 41.0124 37.4221 40.7686 37.4218 40.5153L37.4118 31.036C37.4108 30.1294 38.52 29.6936 39.1327 30.3618C42.0112 33.5006 42.3997 34.18 44.2547 36.306Z" fill="currentColor"/>
      <path d="M54.325 47.1537C56.6294 49.7946 55.8995 54.8383 56.0538 58.4492C56.0917 59.3356 55.0066 59.791 54.4005 59.143L47.7618 52.045C47.5888 51.86 47.4924 51.6163 47.4921 51.363L47.4821 41.8836C47.4812 40.9771 48.5903 40.5413 49.203 41.2094C52.0815 44.3483 52.47 45.0277 54.325 47.1537Z" fill="currentColor"/>
      <path d="M93.4299 185.444C95.031 187.732 94.1923 196.023 93.4299 199.167C93.4299 199.167 108.582 199.739 110.584 212.605C114.014 214.034 122.134 216.722 130.596 219.466C130.596 209.631 135.743 204.504 138.316 203.17L99.7197 189.733V182.014L132.026 156.283L150.609 164.86C154.231 159.523 173.023 145.819 211.219 145.133C259.707 143.989 279.072 186.207 282.693 207.458C284.885 207.649 290.927 208.602 297.56 210.889C304.193 213.176 310.235 218.704 312.427 221.182V192.878C312.427 191.448 313.284 190.019 315.857 189.161C313.341 189.161 311.95 187.065 311.569 186.016C309.758 177.344 306.022 160.8 305.565 159.428C304.993 157.713 305.565 157.141 307.566 155.711C305.279 157.084 303.564 156.283 302.992 155.711C298.322 149.517 288.697 136.899 287.554 135.984C286.124 134.841 286.41 133.411 286.982 131.41C285.838 132.554 284.028 132.458 283.265 132.268C277.928 129.123 266.855 122.719 265.254 122.261C263.252 121.69 263.252 119.688 263.252 117.687C262.795 118.831 260.393 119.498 259.25 119.688C252.388 117.878 238.265 114.199 236.664 113.97C234.663 113.684 234.663 111.969 234.663 109.968C233.977 111.798 231.708 112.636 230.66 112.827C216.937 113.017 188.691 113.399 185.489 113.399C182.287 113.399 179.961 109.968 179.199 108.252C172.814 109.873 159.758 113.17 158.614 113.399C157.185 113.684 156.041 112.541 154.898 111.397C155.469 112.541 153.468 114.256 152.61 114.828C151.753 115.4 133.455 125.12 131.454 126.836C129.453 128.551 127.737 127.693 126.308 127.407C127.452 129.237 126.785 130.838 126.308 131.41C122.305 136.27 113.671 146.734 111.156 149.707C108.011 153.424 106.009 154.282 103.722 154.282C104.637 155.654 104.103 157.522 103.722 158.284C100.959 166.289 95.374 182.528 95.1453 183.443C94.9166 184.358 93.9064 185.159 93.4299 185.444Z" fill="currentColor"/>
      <path d="M31.9622 221.753C22.5848 225.641 21.1934 239.574 21.6699 246.054L41.1109 254.631C62.3625 244.911 105.952 224.955 110.298 222.897C110.584 218.608 108.011 207.744 100.006 203.456C92.0004 199.167 79.7069 206.315 74.5608 213.748C82.1084 218.322 82.0894 225.184 81.1364 228.043C71.13 202.312 47.9724 212.319 44.2558 219.752C53.6332 222.954 56.7399 229.854 57.1211 232.903C52.642 227.566 41.3396 217.865 31.9622 221.753Z" fill="currentColor"/>
      <path d="M9.09058 245.197L18.5252 241.766C18.0677 243.367 18.3346 245.864 18.5252 246.912L40.8251 257.49C64.078 246.912 111.213 225.356 113.729 223.755C114.415 221.696 113.443 218.132 112.871 216.607L126.308 221.467V230.044C123.449 230.902 117.159 234.047 117.445 238.335C117.674 241.766 123.068 242.814 125.736 242.91V248.342L110.584 256.061C110.393 254.25 109.097 249.886 105.438 246.912C100.863 243.196 96.0031 248.342 93.7159 251.772C91.8862 254.517 92.9535 260.54 93.7159 263.208L45.1135 285.508L14.5226 266.925L9.09058 245.197Z" fill="currentColor"/>
      <path d="M162.903 52.2168L136.886 60.5078C133.913 62.1088 134.313 64.9869 134.885 66.2258C138.411 73.945 145.806 90.1839 147.179 93.3859C148.551 96.588 151.372 97.1979 152.611 97.1026C158.805 95.2919 171.651 91.3846 173.481 90.2411C175.311 89.0975 175.006 86.9056 174.625 85.9526C173.1 77.7569 169.936 60.3935 169.478 56.5053C169.021 52.6171 164.904 52.0262 162.903 52.2168Z" fill="currentColor"/>
      <path d="M177.483 97.9602C177.026 96.3591 174.815 96.3401 173.767 96.5307L154.326 101.963C152.725 102.878 152.896 104.44 153.182 105.108C153.945 106.537 155.641 109.568 156.327 110.254C157.013 110.94 158.71 110.73 159.472 110.54C164.142 109.396 174.053 106.994 176.34 106.537C178.627 106.08 178.818 104.631 178.627 103.964C178.436 102.63 177.941 99.5612 177.483 97.9602Z" fill="currentColor"/>
      <path d="M124.307 66.2257L95.4311 82.2359C93.8301 84.7518 94.764 87.668 95.4311 88.8116L116.016 111.969C117.845 114.028 120.018 113.208 120.876 112.541C127.356 108.729 140.774 100.762 142.604 99.3897C144.434 98.0174 144.129 95.959 143.748 95.1013C140.507 88.8116 133.455 74.917 131.168 69.6565C128.881 64.396 125.641 65.1775 124.307 66.2257Z" fill="currentColor"/>
      <path d="M146.035 104.25L124.307 117.401C123.392 118.087 123.544 119.403 123.735 119.974C124.307 120.927 125.736 123.119 126.88 124.263C128.023 125.406 129.834 124.739 130.596 124.263C136.886 120.737 149.809 113.513 151.181 112.827C152.553 112.141 152.515 110.826 152.325 110.254C151.467 109.11 149.58 106.48 148.894 105.108C148.208 103.735 146.702 103.964 146.035 104.25Z" fill="currentColor"/>
      <path d="M82.5658 92.5281C79.3638 94.8152 66.7462 112.922 60.8377 121.689C59.4654 123.714 60.4565 125.582 61.1236 126.264C69.4146 131.41 86.6256 142.102 89.1414 143.704C91.6573 145.305 93.8111 143.036 94.5735 141.702C99.6243 135.222 110.183 121.804 112.013 119.974C113.843 118.144 113.157 115.59 112.585 114.542C105.723 106.918 91.543 91.3273 89.7132 89.955C87.4261 88.2396 86.5684 89.6691 82.5658 92.5281Z" fill="currentColor"/>
      <path d="M115.158 121.975C112.414 123.576 102.579 137.509 98.0043 144.275C97.3182 145.876 97.5278 147.23 97.7184 147.706C98.9573 148.373 101.893 149.936 103.722 150.851C105.552 151.766 106.962 150.47 107.439 149.707C112.109 143.418 121.734 130.495 122.877 129.123C124.021 127.75 123.735 126.454 123.449 125.978C121.829 123.977 117.903 120.374 115.158 121.975Z" fill="currentColor"/>
      <path d="M53.6902 133.411C47.0574 139.815 42.5403 156.283 41.1108 163.716C40.0673 168.291 41.0572 170.578 41.6826 171.15C50.8313 173.913 69.9291 179.727 73.1312 180.87C76.3332 182.014 78.6585 180.775 79.4209 180.012C82.1846 171.912 87.9406 154.911 88.8555 151.709C89.7704 148.507 87.3307 146.181 85.9965 145.419C79.135 141.988 64.9545 134.784 63.1248 133.411C60.8376 131.696 57.9787 130.552 53.6902 133.411Z" fill="currentColor"/>
      <path d="M85.9967 167.433L82.5659 179.155C82.3372 180.756 83.0424 181.537 83.4236 181.728C85.2343 182.204 89.1987 183.157 90.571 183.157C91.9433 183.157 92.6676 181.061 92.8582 180.012C95.05 173.056 99.6625 158.685 100.577 156.855C101.492 155.025 100.768 153.805 100.291 153.424C99.1479 152.757 96.3461 151.308 94.2877 150.851C92.2292 150.394 90.7616 152.948 90.2851 154.282L85.9967 167.433Z" fill="currentColor"/>
      <path d="M275.949 64.3281L251.934 59.7538C248.274 59.0676 244.288 60.4125 244.383 62.2232C243.716 68.5129 241.756 83.9978 241.069 89.487C240.383 93.6039 242.88 95.3955 244.214 95.7767C249.36 97.0156 260.339 99.6077 263.083 100.065C265.371 100.523 268.23 98.3498 269.373 97.2062C272.137 90.7259 278.122 76.5073 279.951 71.4755C281.781 66.4438 278.045 64.614 275.949 64.3281Z" fill="currentColor"/>
      <path d="M83.9954 186.588C81.4795 186.359 80.6599 189.352 80.5646 190.877C80.1834 194.117 79.421 200.769 79.421 201.455C79.421 202.312 78.8492 205.743 79.9928 204.885C82.28 202.827 88.3791 200.597 91.1428 199.739C91.524 197.643 92.2864 192.821 92.2864 190.305C92.2864 187.789 90.571 186.969 89.7133 186.874C88.8556 186.874 86.5113 186.817 83.9954 186.588Z" fill="currentColor"/>
      <path d="M75.7044 208.03C73.6459 208.03 71.4159 209.555 70.5583 210.318C68.6523 209.555 62.839 208.259 54.8339 209.174C46.8288 210.089 43.1122 215.654 42.2545 218.323C41.3015 218.513 38.7666 218.78 36.2507 218.323C33.7348 217.865 33.2964 214.892 33.3917 213.462C33.9635 205.171 35.3358 187.103 36.2507 181.156C37.1655 175.209 43.1122 175.248 45.9712 176.01C54.5481 178.869 72.388 184.758 75.1326 185.445C77.8772 186.131 77.9916 188.78 77.7057 190.019C76.9433 196.023 75.4757 208.03 75.7044 208.03Z" fill="currentColor"/>
      <path d="M320.432 190.019C317.23 190.248 316.62 192.592 316.715 193.736L317.001 226.9L331.01 217.85V194.307C331.01 190.648 328.723 189.733 327.579 189.733C326.531 189.733 323.634 189.79 320.432 190.019Z" fill="currentColor"/>
      <path d="M351.308 222.897C345.362 218.323 337.967 217.627 335.012 217.85V194.307C335.012 191.334 337.49 190.019 338.729 189.733C346.353 187.636 362.63 183.386 366.747 183.157C370.864 182.929 371.893 185.54 371.893 186.874L376.181 228.043C374.847 228.043 373.608 229.816 371.893 228.043C365.031 220.953 355.311 221.658 351.308 222.897Z" fill="currentColor"/>
      <path d="M311.283 154.854C308.996 155.997 309.377 157.999 309.853 158.856C313.57 164.86 315.571 181.442 315.857 184.587C316.086 187.103 318.24 187.541 319.288 187.446C320.146 187.541 322.604 187.675 325.578 187.446C328.551 187.217 329.104 185.445 329.008 184.587V178.583C329.008 176.01 323.291 157.999 321.861 154.854C320.717 152.338 317.954 152.471 316.715 152.852C315.857 153.043 313.57 153.71 311.283 154.854Z" fill="currentColor"/>
      <path d="M350.451 138.272L326.435 149.422C323.48 150.794 324.251 154.568 325.006 156.283C326.626 163.526 330.266 179.04 331.867 183.157C333.469 187.274 338.634 186.207 341.016 185.159C347.878 182.871 362.516 177.897 366.175 176.296C369.835 174.695 369.606 171.054 369.034 169.434C366.747 161.906 361.715 145.648 359.885 140.845C358.056 136.042 352.833 137.128 350.451 138.272Z" fill="currentColor"/>
      <path d="M328.723 145.705C323.92 148.678 320.622 146.181 319.574 144.561C317.859 140.559 305.851 126.264 303.278 124.263C301.219 122.662 302.42 120.546 303.278 119.688C308.424 113.685 319.574 100.819 323.005 97.3884C326.436 93.9577 329.58 95.959 330.724 97.3884C336.251 104.726 347.992 120.375 350.737 124.263C354.167 129.123 350.165 132.554 347.306 134.841C344.447 137.128 334.727 141.988 328.723 145.705Z" fill="currentColor"/>
      <path d="M294.415 124.834L291.27 128.551C290.222 129.218 288.754 131.124 291.27 133.411C294.415 136.27 301.277 145.991 303.564 149.707C305.394 152.681 307.948 152.852 308.996 152.566C310.139 152.09 312.884 150.851 314.714 149.707C316.543 148.564 316.239 145.61 315.857 144.275C311.569 138.748 302.477 127.122 300.419 124.834C298.36 122.547 295.559 123.881 294.415 124.834Z" fill="currentColor"/>
      <path d="M300.991 115.4C298.475 118.602 295.368 117.496 294.129 116.543C288.602 113.303 276.861 106.423 274.116 104.822C271.372 103.221 271.829 100.343 272.401 99.1037C275.546 92.3374 282.407 77.6043 284.695 72.8012C286.982 67.9981 291.937 69.8469 294.129 71.3717C300.324 75.3743 313.742 83.9512 317.859 86.2383C321.975 88.5255 319.574 92.3374 317.859 93.9575C313.284 99.7708 303.507 112.198 300.991 115.4Z" fill="currentColor"/>
      <path d="M272.687 108.538C269.485 106.709 268.113 108.157 267.827 109.11C267.35 109.968 266.169 112.198 265.254 114.256C264.339 116.315 265.825 117.592 266.683 117.973C271.639 120.832 282.122 126.836 284.409 127.979C286.696 129.123 287.84 128.075 288.125 127.408C288.602 127.026 290.012 125.692 291.842 123.405C293.672 121.118 292.033 119.402 290.984 118.831C286.219 116.162 275.889 110.368 272.687 108.538Z" fill="currentColor"/>
      <path d="M244.669 99.9613C240.552 99.0464 238.761 101.296 238.379 102.534C237.998 103.201 237.179 104.993 236.95 106.823C236.721 108.653 238.189 109.491 238.951 109.682C243.716 111.207 254.275 114.542 258.392 115.686C262.509 116.829 263.538 115.019 263.538 113.97C263.634 112.922 264.053 110.196 264.968 107.681C265.883 105.165 261.918 103.773 259.822 103.392C256.486 102.63 248.786 100.876 244.669 99.9613Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M178.055 51.0732H237.236C239.047 51.7403 242.496 53.7035 241.81 56.2194C241.124 58.7352 237.331 87.5727 235.521 101.677C234.853 103.869 233.005 108.31 230.946 108.538C228.888 108.767 201.88 109.777 188.633 110.254C186.537 110.54 182.229 110.025 181.772 105.679C181.315 101.334 176.816 70.5142 174.625 55.6476C174.339 54.0275 174.625 50.8445 178.055 51.0732ZM196.661 72.6068C196.219 71.8708 195.999 71.0612 195.999 70.178C195.999 67.7859 197.177 66.5898 199.533 66.5898C200.564 66.5898 201.08 68.2459 201.08 71.558C201.08 73.3981 200.914 76.011 200.583 79.3967C199.625 79.3967 198.815 79.8567 198.153 80.7767C197.49 81.66 197.158 82.7456 197.158 84.0336C197.158 85.8001 197.987 87.0329 199.644 87.7322C199.202 91.3387 198.981 93.878 198.981 95.35C198.981 96.7853 199.404 97.5029 200.251 97.5029C201.65 97.5029 202.534 96.8221 202.902 95.4604C203.123 94.7244 203.271 94.0804 203.344 93.5284C203.418 92.9395 203.473 92.0563 203.51 90.8787C203.547 89.6642 203.583 88.7994 203.62 88.2842C206.566 88.1738 209.677 86.7201 212.954 83.9232C212.844 85.8737 212.788 87.6954 212.788 89.3882C212.788 91.0443 212.917 92.8291 213.175 94.7428C213.433 96.6565 213.764 97.7789 214.169 98.1101C214.979 98.7725 216.029 99.1038 217.317 99.1038C217.796 99.1038 218.238 99.0117 218.643 98.8277C219.048 98.6805 219.25 98.4597 219.25 98.1653C219.25 97.9077 218.882 96.6381 218.146 94.3564C217.446 92.0379 217.096 89.6642 217.096 87.2353C217.096 84.7697 217.207 82.0832 217.428 79.1759C221.294 74.1341 223.227 69.4419 223.227 65.0994C223.227 63.9217 222.914 62.9097 222.288 62.0633C221.699 61.2168 220.926 60.7936 219.968 60.7936C219.048 60.7936 218.183 61.4009 217.373 62.6153C216.563 63.8297 215.752 65.9458 214.942 68.9635C214.169 71.9444 213.562 76.0846 213.12 81.3839C209.88 84.3648 206.787 85.8553 203.841 85.8553C203.915 85.1929 204.062 84.0152 204.283 82.3224C204.504 80.5927 204.651 79.3415 204.725 78.5686C204.799 77.759 204.872 76.6366 204.946 75.2013C205.056 73.7293 205.112 72.1652 205.112 70.5092C205.112 68.8531 204.762 67.3811 204.062 66.093C203.399 64.7682 202.387 64.1057 201.024 64.1057C198.999 64.1057 197.324 64.805 195.999 66.2034C194.71 67.6019 194.066 69.1843 194.066 70.9508C194.066 72.1284 194.268 73.2509 194.673 74.3181C195.078 75.3853 195.594 75.919 196.219 75.919C196.551 75.919 196.809 75.7533 196.993 75.4221C197.214 75.0909 197.324 74.7229 197.324 74.3181C197.324 73.8765 197.103 73.3061 196.661 72.6068ZM221.183 64.5474C221.368 64.989 221.46 65.4858 221.46 66.0378C221.46 68.7979 220.226 72.0548 217.759 75.8086C218.606 67.8227 219.545 63.8297 220.576 63.8297C220.834 63.8297 221.036 64.0689 221.183 64.5474ZM199.644 82.6536C199.644 82.028 199.901 81.5311 200.417 81.1631L200.086 84.1992C199.791 83.7944 199.644 83.2792 199.644 82.6536Z" fill="currentColor"/>
      <path d="M316.715 232.045C311.912 218.551 297.369 212.509 290.698 211.175C294.987 216.226 303.642 228.783 298.989 235.762C297.274 238.335 294.701 242.052 288.983 244.625C289.841 247.691 290.698 250.629 291.27 253.774C295.559 253.774 303.527 252.057 309.567 249.771C318.03 246.569 325.673 248.437 328.437 249.771L392.192 280.648L393.621 277.217L330.438 245.769C326.817 244.148 319.002 239.136 316.715 232.045Z" fill="currentColor"/>
      <path d="M277.261 207.744C267.884 204.085 254.485 209.269 248.957 212.319L256.105 206.029L265.539 200.025C240.952 177.725 207.217 196.88 201.785 207.744C204.358 188.017 226.372 183.443 242.954 184.015C220.997 169.606 191.492 173.818 179.485 177.725C182.915 172.236 195.781 168.576 201.785 167.433C169.478 156.855 144.891 163.43 141.46 180.87C140.204 187.255 145.982 192.765 149.18 197.166C156.899 193.449 166.048 194.879 169.764 198.596C172.762 201.593 175.768 206.029 175.196 211.747C182.058 210.317 194.351 208.316 198.963 224.612C206.073 227.551 213.383 230.566 220.462 233.475C228.087 230.044 234.55 226.245 241.81 229.186C247.467 231.478 248.182 233.088 252.102 232.903C262.325 232.42 272.785 226.839 288.697 242.338C293.957 238.803 296.328 234.728 296.988 231.76C298.703 224.04 288.983 212.319 277.261 207.744Z" fill="currentColor"/>
      <path d="M102.865 188.303L140.317 201.169L144.605 198.596C132.312 184.015 140.698 170.959 146.321 166.575L131.74 160.572L102.865 183.443V188.303Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M170.622 216.035C174.243 214.034 182.858 210.832 188.348 214.034C195.209 218.037 196.924 224.898 195.495 228.615C194.065 232.332 190.063 242.624 180.342 246.34C170.622 250.057 165.19 248.342 161.759 243.482C164.332 238.907 163.76 234.333 159.472 232.903C159.186 230.426 161.016 223.583 170.622 216.035ZM167.477 236.048C167.763 235.476 168.335 234.161 168.335 233.475C168.335 233.126 169.138 232.447 170.265 231.494C171.909 230.103 174.241 228.131 175.768 225.756C177.141 223.62 177.827 222.129 178.132 221.231C178.301 220.733 178.749 220.297 179.273 220.245C180.226 220.149 181.431 219.985 182.443 219.747C182.93 219.633 184.324 219.944 184.79 220.128C185.281 220.321 185.755 221.254 185.285 221.494C183.575 222.366 181.712 223.554 181.283 224.619C181.149 224.951 181.405 225.266 181.738 225.397C184.447 226.465 187.329 227.453 189.205 227.185C191.207 226.899 188.633 228.901 185.775 228.901C184.915 228.901 184.081 228.72 183.273 228.544C181.394 228.137 179.655 227.759 178.055 229.758C177.444 230.522 176.874 231.102 176.366 231.619C174.974 233.035 174.053 233.973 174.053 236.906C174.053 238.635 173.83 240.387 173.566 241.828C173.394 242.76 172.28 242.803 172.044 241.885C171.564 240.018 171.194 237.765 171.48 236.048C171.982 233.035 170.058 235.314 169.389 236.108C169.296 236.218 169.227 236.299 169.193 236.334C169.104 236.422 168.816 236.626 168.45 236.871C167.895 237.243 167.214 236.662 167.477 236.048Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M101.149 249.771C98.6334 250 98.0044 254.441 98.0044 256.633C98.5762 266.353 105.724 274.644 119.733 274.358C132.218 274.103 138.572 267.036 143.044 262.061L143.044 262.061C143.59 261.454 144.108 260.878 144.606 260.349C141.403 253.488 144.606 246.054 146.607 243.195C145.654 240.336 141.804 234.333 134.027 233.189C124.307 231.76 120.876 235.762 121.162 237.763C121.391 239.364 123.544 239.955 124.593 240.051C126.118 239.86 129.739 240.222 132.026 243.195C136.029 248.913 128.309 259.206 121.734 260.921C115.158 262.636 109.44 258.92 105.724 256.061C104.612 255.073 104.194 253.711 103.824 252.506C103.338 250.922 102.935 249.609 101.149 249.771ZM114.872 268.068C116.473 267.382 117.826 264.733 118.303 263.494C119.123 262.879 119.355 263.293 119.632 263.788C119.741 263.983 119.857 264.19 120.018 264.352C120.525 264.859 119.46 266.937 118.813 268.2C118.73 268.362 118.654 268.51 118.589 268.64C118.017 269.784 116.588 270.927 115.444 271.499C114.503 271.97 113.949 271.666 113.145 271.225C112.972 271.13 112.788 271.029 112.585 270.927C111.441 270.356 112.871 268.926 114.872 268.068ZM127.166 259.778C128.786 261.302 131.912 265.038 131.454 267.783C131.088 269.982 130.134 268.069 129.195 266.187C128.669 265.133 128.148 264.088 127.738 263.78C126.594 262.922 124.879 260.063 127.166 259.778ZM129.167 238.335C129.167 236.963 130.882 235.286 131.74 234.619C133.17 233.475 133.17 234.904 132.884 235.19C132.598 235.476 131.454 236.62 131.454 237.763C131.454 238.907 130.597 240.051 130.311 240.051C130.025 240.051 129.167 240.051 129.167 238.335ZM140.603 238.049C139.459 238.145 137.001 238.678 136.314 240.051C136.003 240.672 135.655 241.219 135.337 241.718C134.778 242.595 134.313 243.324 134.313 244.053C134.313 245.197 134.599 245.768 135.171 245.768C135.743 245.768 136.029 244.911 136.314 243.767C136.381 243.502 136.416 243.251 136.45 243.017C136.56 242.241 136.646 241.633 137.744 241.194C138.201 241.011 138.57 240.916 138.889 240.834C139.568 240.659 140.019 240.543 140.603 239.765C141.289 238.85 140.889 238.24 140.603 238.049ZM138.03 247.77C136.2 247.312 134.79 249.104 134.313 250.057C134.156 250.343 134.885 251.487 136.029 250.343C137.172 249.199 138.316 249.199 139.173 250.057C140.031 250.915 142.032 250.915 142.032 249.485C142.032 248.455 141.141 248.316 139.787 248.104C139.263 248.022 138.668 247.93 138.03 247.77ZM132.598 254.631C131.931 254.727 130.825 255.146 131.74 256.061C132.16 256.48 132.733 256.861 133.291 257.232L133.291 257.232C134.254 257.872 135.171 258.482 135.171 259.206C135.171 260.349 138.316 262.351 138.888 261.779C139.459 261.207 140.317 259.206 138.888 258.348C138.341 258.02 138.046 258.026 137.793 258.032C137.384 258.04 137.089 258.046 136.029 256.633C134.656 254.803 133.17 254.536 132.598 254.631ZM100.863 259.778C99.0336 259.32 100.292 258.062 101.149 257.49C104.123 256.575 105.247 257.681 105.438 258.348C105.438 259.206 103.15 260.349 100.863 259.778ZM104.866 264.352C104.389 264.542 103.608 265.095 104.294 265.781C105.152 266.639 107.153 266.353 107.725 265.781C107.92 265.586 108.149 265.424 108.411 265.238C108.916 264.881 109.545 264.435 110.298 263.494C111.441 262.065 111.441 260.921 110.012 261.207C108.868 261.436 106.105 263.399 104.866 264.352Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M152.896 238.907C156.767 235.762 164.447 233.075 160.33 241.766C155.184 252.63 167.184 256.347 172.623 256.347C178.913 256.347 187.49 255.775 191.778 247.77C196.067 239.765 196.924 239.479 198.64 240.051C200.355 240.622 201.126 246.554 198.068 252.058C197.867 252.419 197.658 252.811 197.436 253.228L197.436 253.229L197.436 253.229C194.49 258.753 189.229 268.62 170.622 268.354C150.609 268.068 146.607 258.098 146.607 253.488C146.607 248.342 148.322 242.624 152.896 238.907ZM151.467 247.484C150.419 247.293 148.665 247.255 150.037 248.627C151.753 250.343 154.898 251.2 156.041 250.629C157.185 250.057 157.757 248.913 156.041 248.627C154.669 248.399 152.42 247.77 151.467 247.484ZM160.616 254.631C160.616 252.115 159.091 252.821 158.328 253.488C158.112 258.892 156.425 259.72 154.997 260.42C154.536 260.646 154.103 260.858 153.754 261.207C152.325 262.636 154.04 262.636 156.327 262.35C158.614 262.065 160.616 257.776 160.616 254.631ZM166.619 258.634C167.286 257.776 168.735 256.632 169.192 258.92C169.764 261.779 170.05 264.638 168.907 265.495C167.763 266.353 166.619 266.067 166.619 264.923C166.619 264.613 166.704 264.239 166.804 263.795L166.804 263.795C167.072 262.608 167.452 260.924 166.619 258.634ZM189.491 258.634C189.262 257.261 186.918 256.156 185.774 255.775C184.631 255.307 183.487 256.918 185.203 257.204C187.244 257.658 187.666 258.831 188.039 259.868L188.039 259.868L188.039 259.868C188.136 260.138 188.229 260.399 188.348 260.635C188.919 261.779 189.777 260.349 189.491 258.634ZM194.065 246.912C193.494 247.293 192.579 248.113 193.494 248.342C194.25 248.531 195.382 248.219 196.227 247.987C196.659 247.868 197.017 247.77 197.21 247.77C197.782 247.77 198.068 246.054 196.353 246.34C194.98 246.569 194.256 246.817 194.065 246.912ZM194.351 252.916C193.437 253.145 192.255 252.249 191.778 251.772C190.921 251.092 190.063 251.772 190.635 252.916C191.207 254.059 193.494 254.059 194.923 254.059C196.353 254.059 195.495 252.63 194.351 252.916ZM177.769 258.348C178.913 259.777 181.086 263.037 180.628 264.638C180.057 266.639 178.341 266.353 178.055 265.209C177.996 264.973 177.937 264.638 177.867 264.245C177.602 262.743 177.187 260.398 176.054 259.491C174.625 258.348 176.34 256.918 177.769 258.348Z" fill="currentColor"/>
      <path d="M273.831 241.194C272.916 240.737 271.544 243.1 271.544 244.053C270.114 248.056 267.255 250.915 264.968 253.773C262.681 256.632 257.249 260.635 251.245 258.634C245.241 256.632 245.813 248.627 256.105 242.909C257.96 241.879 259.777 241.202 261.537 240.808C262.115 240.679 261.823 238.477 262.967 238.335C264.396 238.157 264.597 240.382 265.254 240.375C267.607 240.348 269.818 240.789 271.829 241.505C272.419 241.715 272.687 239.941 274.117 240.375C275.546 240.808 274.711 242.762 275.26 243.07C277.19 244.15 278.836 245.422 280.12 246.626C284.695 250.915 287.554 257.49 282.122 260.349C277.776 262.636 273.164 257.109 271.829 253.773C271.162 254.536 270.343 255.946 268.97 257.776C274.117 266.353 281.836 265.781 285.552 262.35C289.269 258.92 292.128 249.199 283.265 240.908C274.403 232.617 261.823 230.616 251.245 236.906C240.667 243.195 241.524 252.058 242.382 256.918C243.24 261.779 252.96 266.353 260.965 261.779C268.97 257.204 272.973 248.627 273.545 246.626C274.117 244.625 274.974 241.766 273.831 241.194Z" fill="currentColor"/>
      <path d="M262.395 240.622C261.709 243.596 264.206 248.723 265.54 250.915L267.827 248.342L264.396 240.908C264.015 239.574 263.081 237.649 262.395 240.622Z" fill="currentColor"/>
      <path fillRule="evenodd" clipPath="evenodd" d="M353.596 226.899C350.546 227.662 344.104 230.502 342.732 235.762C341.016 242.338 347.592 246.912 352.738 248.627C357.634 250.259 364.601 251.374 369.206 250.001C369.62 249.877 370.071 250.001 370.367 250.316C373.204 253.341 381.285 258.63 389.619 254.059C398.481 249.199 400.483 241.194 394.193 234.619C389.143 229.339 381.514 228.483 375.151 230.422C374.617 230.584 374.352 231.167 374.49 231.708C375.814 236.886 372.952 243.023 372.179 244.053C371.321 245.197 371.035 245.197 371.893 242.909C373.393 239.159 371.985 234.895 370.851 232.326C370.841 232.303 370.813 232.294 370.792 232.307V232.307C370.769 232.32 370.741 232.31 370.731 232.287C368.967 228.021 359.294 224.905 353.596 226.899Z" fill="currentColor"/>
  </svg>
  )
}

export default Wappen----------------------------------------

FILE: ./src/components/icons/products/Broetchen.tsx
----------------------------------------
import React from 'react'

const Broetchen = () => {
  return (
    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M14.9036 1.09656C10.0137 -2.89988 1.57942 4.94853 0.346466 9.87035C-1.08089 14.2955 2.10869 16.9978 6.12978 15.6536C11.0496 14.4227 18.9001 5.98576 14.9036 1.09656ZM6.67569 12.6531C6.49912 12.6531 6.32979 12.583 6.20494 12.4582C6.08009 12.3333 6.00995 12.164 6.00995 11.9874C6.03179 11.7196 5.99511 11.4502 5.90247 11.198C5.80982 10.9458 5.66342 10.7167 5.47341 10.5267C5.28341 10.3367 5.05435 10.1903 4.80212 10.0977C4.54989 10.005 4.28053 9.96834 4.01272 9.99018C3.83615 9.99018 3.66681 9.92004 3.54196 9.79519C3.41711 9.67034 3.34697 9.50101 3.34697 9.32444C3.34697 9.14788 3.41711 8.97855 3.54196 8.85369C3.66681 8.72884 3.83615 8.6587 4.01272 8.6587C4.45529 8.63823 4.89726 8.71031 5.31039 8.87035C5.72352 9.03039 6.09872 9.27486 6.412 9.58814C6.72528 9.90141 6.96975 10.2766 7.12979 10.6897C7.28983 11.1029 7.36191 11.5448 7.34143 11.9874C7.34143 12.164 7.27129 12.3333 7.14644 12.4582C7.02159 12.583 6.85226 12.6531 6.67569 12.6531ZM9.33866 9.99018C9.1621 9.99018 8.99276 9.92004 8.86791 9.79519C8.74306 9.67034 8.67292 9.50101 8.67292 9.32444C8.69476 9.05663 8.65809 8.78727 8.56544 8.53504C8.47279 8.28281 8.32639 8.05375 8.13639 7.86375C7.94638 7.67375 7.71733 7.52735 7.4651 7.4347C7.21287 7.34206 6.94351 7.30538 6.67569 7.32722C6.49912 7.32722 6.32979 7.25708 6.20494 7.13223C6.08009 7.00738 6.00995 6.83805 6.00995 6.66148C6.00995 6.48492 6.08009 6.31558 6.20494 6.19073C6.32979 6.06588 6.49912 5.99574 6.67569 5.99574C7.11826 5.97527 7.56024 6.04735 7.97336 6.20739C8.38649 6.36743 8.76169 6.6119 9.07497 6.92518C9.38825 7.23845 9.63272 7.61365 9.79276 8.02678C9.9528 8.4399 10.0249 8.88188 10.0044 9.32444C10.0044 9.50101 9.93427 9.67034 9.80941 9.79519C9.68456 9.92004 9.51523 9.99018 9.33866 9.99018ZM12.0016 7.32722C11.8251 7.32722 11.6557 7.25708 11.5309 7.13223C11.406 7.00738 11.3359 6.83805 11.3359 6.66148C11.3577 6.39367 11.3211 6.12431 11.2284 5.87208C11.1358 5.61985 10.9894 5.39079 10.7994 5.20079C10.6094 5.01079 10.3803 4.86439 10.1281 4.77174C9.87584 4.67909 9.60648 4.64242 9.33866 4.66426C9.1621 4.66426 8.99276 4.59412 8.86791 4.46927C8.74306 4.34442 8.67292 4.17509 8.67292 3.99852C8.67292 3.82196 8.74306 3.65262 8.86791 3.52777C8.99276 3.40292 9.1621 3.33278 9.33866 3.33278C9.78123 3.3123 10.2232 3.38439 10.6363 3.54443C11.0495 3.70446 11.4247 3.94894 11.7379 4.26221C12.0512 4.57549 12.2957 4.95069 12.4557 5.36381C12.6158 5.77694 12.6879 6.21891 12.6674 6.66148C12.6674 6.83805 12.5972 7.00738 12.4724 7.13223C12.3475 7.25708 12.1782 7.32722 12.0016 7.32722Z" fill="currentColor"/>
    </svg>

  )
}

export default Broetchen----------------------------------------

FILE: ./src/components/icons/products/Brot.tsx
----------------------------------------
import React from 'react'

const Brot = () => {
  return (
    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M15.9563 3.6595C15.8086 2.90658 15.3878 2.22737 14.7678 1.74107C14.1477 1.25478 13.368 0.992462 12.5655 1.00016H4.16119C1.89976 1.00016 0.321025 2.01833 0.0436806 3.6595C-0.0452942 4.17835 0.00212321 4.71017 0.181675 5.20721C0.361227 5.70425 0.667293 6.15095 1.07239 6.50719C1.14939 6.56992 1.21222 6.64695 1.25703 6.7336C1.30185 6.82025 1.32772 6.91469 1.33307 7.01119V11.8182C1.33413 12.6618 1.68567 13.4705 2.31059 14.067C2.93551 14.6634 3.78277 14.999 4.66654 15H11.3335C12.2173 14.999 13.0645 14.6634 13.6894 14.067C14.3144 13.4705 14.6659 12.6618 14.667 11.8182V7.01119C14.6722 6.91513 14.6978 6.82109 14.7423 6.73478C14.7867 6.64847 14.8491 6.57168 14.9256 6.5091C15.3314 6.15282 15.6379 5.70589 15.8179 5.20849C15.9978 4.71109 16.0454 4.1788 15.9563 3.6595ZM5.33323 11.8182C5.15642 11.8182 4.98684 11.7512 4.86181 11.6318C4.73678 11.5125 4.66654 11.3506 4.66654 11.1819C4.66654 11.0131 4.73678 10.8512 4.86181 10.7319C4.98684 10.6126 5.15642 10.5455 5.33323 10.5455C5.51005 10.5455 5.67963 10.6126 5.80466 10.7319C5.92969 10.8512 5.99993 11.0131 5.99993 11.1819C5.99993 11.3506 5.92969 11.5125 5.80466 11.6318C5.67963 11.7512 5.51005 11.8182 5.33323 11.8182ZM5.33323 9.27279C5.15642 9.27279 4.98684 9.20575 4.86181 9.08641C4.73678 8.96707 4.66654 8.80521 4.66654 8.63644C4.66654 8.46767 4.73678 8.30581 4.86181 8.18647C4.98684 8.06713 5.15642 8.00008 5.33323 8.00008C5.51005 8.00008 5.67963 8.06713 5.80466 8.18647C5.92969 8.30581 5.99993 8.46767 5.99993 8.63644C5.99993 8.80521 5.92969 8.96707 5.80466 9.08641C5.67963 9.20575 5.51005 9.27279 5.33323 9.27279ZM8.00001 11.8182C7.82319 11.8182 7.65362 11.7512 7.52859 11.6318C7.40356 11.5125 7.33332 11.3506 7.33332 11.1819C7.33332 11.0131 7.40356 10.8512 7.52859 10.7319C7.65362 10.6126 7.82319 10.5455 8.00001 10.5455C8.17683 10.5455 8.34641 10.6126 8.47144 10.7319C8.59647 10.8512 8.66671 11.0131 8.66671 11.1819C8.66671 11.3506 8.59647 11.5125 8.47144 11.6318C8.34641 11.7512 8.17683 11.8182 8.00001 11.8182Z" fill="currentColor"/>
    </svg>
  )
}

export default Brot----------------------------------------

FILE: ./src/components/icons/products/Getranke.tsx
----------------------------------------
import React from 'react'

const Getranke = () => {
  return (
    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M10.0217 2.66667H8.68832V0H10.0217V2.66667ZM7.35493 0H6.02153V2.66667H7.35493V0ZM4.68813 0H3.35474V2.66667H4.68813V0ZM0.00391173 16H13.3379V14.6667H0.00391173V16ZM16 8.762C15.9783 9.4536 15.6874 10.1094 15.1893 10.5897C14.6911 11.07 14.0252 11.3368 13.3332 11.3333H11.2338C10.753 12.046 10.2106 12.7153 9.61303 13.3333H3.73275C1.8661 11.3668 0.582739 8.92021 0.0259128 6.26667C-0.0196471 5.99413 -0.00499937 5.71493 0.0688276 5.44866C0.142655 5.18239 0.273871 4.9355 0.453266 4.72533C0.644018 4.49824 0.882154 4.31564 1.15097 4.19034C1.41978 4.06503 1.71276 4.00007 2.00934 4H11.3331C11.6298 4.00028 11.9228 4.06547 12.1916 4.191C12.4604 4.31653 12.6985 4.49937 12.8892 4.72667C13.0685 4.93662 13.1997 5.18326 13.2737 5.44929C13.3476 5.71531 13.3625 5.99429 13.3172 6.26667C13.2939 6.4 13.2632 6.53333 13.2352 6.66667H13.3332C14.9793 6.66667 16 7.47 16 8.762ZM14.6666 8.762C14.6666 8.25667 14.2192 8 13.3332 8H12.8752C12.6454 8.68847 12.3604 9.3573 12.0231 10H13.3332C13.6717 10.0036 13.9987 9.87719 14.2468 9.64686C14.4948 9.41653 14.6451 9.09982 14.6666 8.762Z" fill="currentColor"/>
    </svg>
  )
}

export default Getranke----------------------------------------

FILE: ./src/components/icons/products/Kuchen.tsx
----------------------------------------
import React from 'react'

const Kuchen = () => {
  return (
    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M14.1997 13C14.1138 13.6871 13.7623 14.3209 13.2118 14.7816C12.6612 15.2422 11.9498 15.4978 11.2118 15.5H4.7855C4.04804 15.4972 3.3372 15.2414 2.78721 14.7808C2.23722 14.3202 1.88616 13.6867 1.80031 13C2.41968 13.3826 3.14001 13.5968 3.88137 13.6189C4.62272 13.641 5.3561 13.47 6.0001 13.125C6.6115 13.4447 7.29994 13.6125 8 13.6125C8.70006 13.6125 9.3885 13.4447 9.9999 13.125C10.6438 13.4702 11.3772 13.6413 12.1186 13.6192C12.86 13.5972 13.5804 13.3828 14.1997 13ZM8.66663 2.375V1.125C8.66663 0.95924 8.5964 0.800269 8.47138 0.683058C8.34636 0.565848 8.1768 0.5 8 0.5C7.8232 0.5 7.65364 0.565848 7.52862 0.683058C7.4036 0.800269 7.33337 0.95924 7.33337 1.125V2.375C7.33337 2.54076 7.4036 2.69973 7.52862 2.81694C7.65364 2.93415 7.8232 3 8 3C8.1768 3 8.34636 2.93415 8.47138 2.81694C8.5964 2.69973 8.66663 2.54076 8.66663 2.375ZM11.3332 2.375V1.125C11.3332 0.95924 11.2629 0.800269 11.1379 0.683058C11.0129 0.565848 10.8433 0.5 10.6665 0.5C10.4897 0.5 10.3202 0.565848 10.1952 0.683058C10.0701 0.800269 9.9999 0.95924 9.9999 1.125V2.375C9.9999 2.54076 10.0701 2.69973 10.1952 2.81694C10.3202 2.93415 10.4897 3 10.6665 3C10.8433 3 11.0129 2.93415 11.1379 2.81694C11.2629 2.69973 11.3332 2.54076 11.3332 2.375ZM6.0001 2.375V1.125C6.0001 0.95924 5.92987 0.800269 5.80485 0.683058C5.67983 0.565848 5.51027 0.5 5.33347 0.5C5.15667 0.5 4.98711 0.565848 4.86209 0.683058C4.73707 0.800269 4.66683 0.95924 4.66683 1.125V2.375C4.66683 2.54076 4.73707 2.69973 4.86209 2.81694C4.98711 2.93415 5.15667 3 5.33347 3C5.51027 3 5.67983 2.93415 5.80485 2.81694C5.92987 2.69973 6.0001 2.54076 6.0001 2.375ZM15.9996 9.25C16.0092 9.69618 15.8441 10.1302 15.5353 10.4699C15.2266 10.8095 14.7958 11.0313 14.3244 11.0931C14.1138 11.4387 13.8189 11.7326 13.4637 11.9506C13.1086 12.1685 12.7033 12.3045 12.2813 12.3472C11.8592 12.3899 11.4324 12.3381 11.0358 12.1962C10.6393 12.0542 10.2842 11.8261 9.9999 11.5306C9.74749 11.7933 9.43903 12.0033 9.09451 12.1471C8.74999 12.2908 8.3771 12.3651 8 12.3651C7.6229 12.3651 7.25001 12.2908 6.90549 12.1471C6.56097 12.0033 6.25251 11.7933 6.0001 11.5306C5.71571 11.8261 5.36063 12.0542 4.964 12.1962C4.56737 12.3381 4.1405 12.3899 3.7184 12.3472C3.29631 12.3045 2.89104 12.1685 2.53583 11.9506C2.18062 11.7326 1.8856 11.4387 1.67498 11.0931C1.2037 11.0311 0.773007 10.8093 0.464411 10.4697C0.155815 10.13 -0.00926889 9.69608 0.000402057 9.25C0.000402057 6.985 3.56889 4.25 8 4.25C12.4311 4.25 15.9996 6.985 15.9996 9.25ZM7.32337 6.53125C7.33751 6.47648 7.3364 6.41921 7.32014 6.36496C7.30388 6.31071 7.27301 6.26128 7.23051 6.22143C7.18801 6.18158 7.13529 6.15265 7.07742 6.1374C7.01955 6.12216 6.95848 6.12111 6.90006 6.13438C6.4343 6.20885 5.98874 6.36855 5.58879 6.60437C5.42525 6.7577 5.33337 6.96566 5.33337 7.1825C5.33337 7.39934 5.42525 7.6073 5.58879 7.76062C5.75233 7.91395 5.97414 8.00009 6.20542 8.00009C6.43671 8.00009 6.65852 7.91395 6.82206 7.76062C7.0736 7.38565 7.24394 6.96791 7.32337 6.53125ZM10.4112 6.60437C10.0113 6.36855 9.5657 6.20885 9.09995 6.13438C9.04152 6.12111 8.98045 6.12216 8.92258 6.1374C8.86471 6.15265 8.81199 6.18158 8.76949 6.22143C8.72699 6.26128 8.69612 6.31071 8.67986 6.36496C8.6636 6.41921 8.66249 6.47648 8.67663 6.53125C8.75607 6.96791 8.92641 7.38565 9.17794 7.76062C9.34148 7.91395 9.56329 8.00009 9.79458 8.00009C10.0259 8.00009 10.2477 7.91395 10.4112 7.76062C10.5748 7.6073 10.6666 7.39934 10.6666 7.1825C10.6666 6.96566 10.5748 6.7577 10.4112 6.60437Z" fill="currentColor"/>
    </svg>
  )
}

export default Kuchen----------------------------------------

FILE: ./src/components/icons/products/Teilchen.tsx
----------------------------------------
import React from 'react'

const Teilchen = () => {
  return (
    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M8.829 10.0264L1.67539 6.76897C1.44521 6.65129 1.24224 6.48669 1.07958 6.28577C0.916908 6.08485 0.798148 5.85208 0.73095 5.60245C0.663753 5.35283 0.64961 5.09189 0.689434 4.83647C0.729258 4.58105 0.822164 4.3368 0.962163 4.11948C1.79194 2.86647 2.8653 1.79316 4.11836 0.963417C4.33671 0.822733 4.58223 0.729592 4.83895 0.690054C5.09567 0.650517 5.35784 0.665469 5.6084 0.733938C5.85896 0.802407 6.0923 0.922858 6.29323 1.08745C6.49416 1.25205 6.65819 1.45711 6.77464 1.68928L9.99883 8.85591L8.829 10.0264ZM11.3093 0.493507C11.0879 0.302969 10.8282 0.162224 10.5477 0.0808047C10.2672 -0.000614396 9.97252 -0.0208061 9.68354 0.0215971C9.07297 0.110913 8.28375 0.252886 7.5192 0.441517C7.69528 0.638903 7.84578 0.857697 7.96713 1.09273L11.2653 8.26202C11.358 8.22603 11.9985 8.00007 11.9985 8.00007V2.00122C11.9986 1.71517 11.9371 1.43246 11.8181 1.1723C11.6992 0.912144 11.5257 0.680635 11.3093 0.493507ZM14.9148 2.52445C14.4115 2.23915 13.8812 2.00428 13.3317 1.82325V6.66366C13.5356 6.62167 14.0356 6.55102 14.0356 6.55102C14.4995 6.50511 14.9363 6.3112 15.2816 5.99792C15.6268 5.68464 15.862 5.26863 15.9526 4.81135C16.048 4.36926 15.9986 3.90822 15.8117 3.49638C15.6248 3.08454 15.3103 2.74377 14.9148 2.52445ZM2.00001 11.9993H7.99913C7.99913 11.9993 8.22509 11.3588 8.26109 11.2661L1.09281 7.96741C0.857931 7.84607 0.639153 7.69582 0.441573 7.52016C0.252934 8.28402 0.108289 9.0732 0.0216352 9.68375C-0.0208141 9.97272 -0.000642826 10.2674 0.0807818 10.5479C0.162206 10.8284 0.302981 11.0881 0.493566 11.3094C0.680493 11.5257 0.91177 11.6993 1.1717 11.8183C1.43163 11.9374 1.71412 11.9991 2.00001 11.9993ZM4.81026 15.9532C5.26756 15.8626 5.6836 15.6274 5.99689 15.2822C6.31018 14.937 6.5041 14.5001 6.55001 14.0363C6.55001 14.0363 6.62199 13.5357 6.66599 13.3324H1.82337C2.0044 13.8819 2.23929 14.4121 2.5246 14.9154C2.74403 15.3108 3.08486 15.6251 3.4967 15.8119C3.90855 15.9987 4.36956 16.048 4.8116 15.9525L4.81026 15.9532Z" fill="currentColor"/>
    </svg>

  )
}

export default Teilchen----------------------------------------

FILE: ./src/components/icons/products/Torten.tsx
----------------------------------------
import React from 'react'

const Torten = () => {
  return (
    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M12.6667 7.33333H3.33333V6.66667C3.33477 6.16581 3.52452 5.68382 3.8649 5.31639C4.20527 4.94897 4.67138 4.72299 5.17067 4.68333L4.66667 2.66667C4.66667 2.48986 4.7369 2.32029 4.86193 2.19526C4.98695 2.07024 5.15652 2 5.33333 2H6.66667C6.84348 2 7.01305 2.07024 7.13807 2.19526C7.2631 2.32029 7.33333 2.48986 7.33333 2.66667L6.83333 4.66667H8.8L9.226 2.53333C9.25676 2.38264 9.33868 2.24722 9.45787 2.15002C9.57706 2.05281 9.7262 1.99982 9.88 2H10.12C10.2738 1.99982 10.4229 2.05281 10.5421 2.15002C10.6613 2.24722 10.7432 2.38264 10.774 2.53333L11.2173 4.75067C11.6338 4.86996 12.0004 5.12127 12.2617 5.46681C12.5231 5.81234 12.6652 6.23341 12.6667 6.66667V7.33333ZM6 1.33333C6.13185 1.33333 6.26075 1.29423 6.37038 1.22098C6.48001 1.14773 6.56546 1.04361 6.61592 0.921789C6.66638 0.799972 6.67958 0.665927 6.65386 0.536607C6.62813 0.407286 6.56464 0.288497 6.4714 0.195262C6.37817 0.102027 6.25938 0.0385336 6.13006 0.0128101C6.00074 -0.0129134 5.86669 0.000288854 5.74488 0.0507473C5.62306 0.101206 5.51894 0.186654 5.44569 0.296287C5.37243 0.40592 5.33333 0.534813 5.33333 0.666667C5.33333 0.843478 5.40357 1.01305 5.5286 1.13807C5.65362 1.2631 5.82319 1.33333 6 1.33333ZM10 1.33333C10.1319 1.33333 10.2607 1.29423 10.3704 1.22098C10.48 1.14773 10.5655 1.04361 10.6159 0.921789C10.6664 0.799972 10.6796 0.665927 10.6539 0.536607C10.6281 0.407286 10.5646 0.288497 10.4714 0.195262C10.3782 0.102027 10.2594 0.0385336 10.1301 0.0128101C10.0007 -0.0129134 9.8667 0.000288854 9.74488 0.0507473C9.62306 0.101206 9.51894 0.186654 9.44569 0.296287C9.37243 0.40592 9.33333 0.534813 9.33333 0.666667C9.33333 0.843478 9.40357 1.01305 9.5286 1.13807C9.65362 1.2631 9.82319 1.33333 10 1.33333ZM2.5 12C3.212 12 3.66667 11.562 3.66667 11.3333H5C5 11.5373 5.44067 12 6.16667 12C6.87867 12 7.33333 11.562 7.33333 11.3333H8.66667C8.66667 11.5373 9.10733 12 9.83333 12C10.5453 12 11 11.562 11 11.3333H12.3333C12.3333 11.5373 12.774 12 13.5 12C14.212 12 14.6667 11.562 14.6667 11.3333V10.6667C14.6667 10.1362 14.456 9.62753 14.0809 9.25245C13.7058 8.87738 13.1971 8.66667 12.6667 8.66667H3.33333C2.8029 8.66667 2.29419 8.87738 1.91912 9.25245C1.54405 9.62753 1.33333 10.1362 1.33333 10.6667V11.3333C1.33333 11.5373 1.774 12 2.5 12ZM14.6667 14.6667V13.0833C14.2993 13.2465 13.902 13.3316 13.5 13.3333C12.8287 13.3384 12.1779 13.1018 11.6667 12.6667C11.1524 13.0953 10.5046 13.3309 9.83514 13.3328C9.16566 13.3346 8.51657 13.1025 8 12.6767C7.48343 13.1025 6.83434 13.3346 6.16486 13.3328C5.49539 13.3309 4.84758 13.0953 4.33333 12.6667C3.82208 13.1018 3.17133 13.3384 2.5 13.3333C2.09801 13.3316 1.70074 13.2465 1.33333 13.0833V14.6667H0V16H16V14.6667H14.6667Z" fill="currentColor"/>
    </svg>
  )
}

export default Torten----------------------------------------

FILE: ./src/components/icons/socials/Facebook.tsx
----------------------------------------
import React from 'react'

const Facebook: React.FC = () => {
  return (
    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M16 8C16 11.9927 13.0707 15.3027 9.24667 15.9033V10.328H11.106L11.46 8.02133H9.24667V6.52467C9.24667 5.89333 9.556 5.27867 10.5467 5.27867H11.5527V3.31467C11.5527 3.31467 10.6393 3.15867 9.76667 3.15867C7.944 3.15867 6.75333 4.26333 6.75333 6.26267V8.02067H4.72733V10.3273H6.75333V15.9027C2.93 15.3013 0 11.992 0 8C0 3.582 3.582 0 8 0C12.418 0 16 3.58133 16 8Z" fill="currentColor"/>
    </svg>

  )
}

export default Facebook----------------------------------------

FILE: ./src/components/icons/socials/Instagram.tsx
----------------------------------------
import React from 'react'

const Instagram = () => {
  return (
    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M8 1.44133C10.136 1.44133 10.3893 1.44933 11.2327 1.488C12.1047 1.528 13.0027 1.72667 13.638 2.362C14.2793 3.00333 14.472 3.89267 14.512 4.76733C14.5507 5.61067 14.5587 5.864 14.5587 8C14.5587 10.136 14.5507 10.3893 14.512 11.2327C14.4727 12.1 14.2693 13.0067 13.638 13.638C12.9967 14.2793 12.108 14.472 11.2327 14.512C10.3893 14.5507 10.136 14.5587 8 14.5587C5.864 14.5587 5.61067 14.5507 4.76733 14.512C3.90667 14.4727 2.988 14.2647 2.362 13.638C1.724 13 1.528 12.102 1.488 11.2327C1.44933 10.3893 1.44133 10.136 1.44133 8C1.44133 5.864 1.44933 5.61067 1.488 4.76733C1.52733 3.90333 1.73267 2.99133 2.362 2.362C3.002 1.722 3.89467 1.528 4.76733 1.488C5.61067 1.44933 5.864 1.44133 8 1.44133ZM8 0C5.82733 0 5.55467 0.00933333 4.70133 0.048C3.46467 0.104667 2.23667 0.448667 1.34267 1.34267C0.445333 2.24 0.104667 3.46533 0.048 4.70133C0.00933333 5.55467 0 5.82733 0 8C0 10.1727 0.00933333 10.4453 0.048 11.2987C0.104667 12.534 0.45 13.7653 1.34267 14.6573C2.23933 15.554 3.46667 15.8953 4.70133 15.952C5.55467 15.9907 5.82733 16 8 16C10.1727 16 10.4453 15.9907 11.2987 15.952C12.5347 15.8953 13.764 15.5507 14.6573 14.6573C15.5553 13.7593 15.8953 12.5347 15.952 11.2987C15.9907 10.4453 16 10.1727 16 8C16 5.82733 15.9907 5.55467 15.952 4.70133C15.8953 3.46467 15.5507 2.236 14.6573 1.34267C13.762 0.447333 12.5313 0.104 11.2987 0.048C10.4453 0.00933333 10.1727 0 8 0Z" fill="currentColor"/>
      <path d="M8.00009 3.89201C5.73142 3.89201 3.89209 5.73134 3.89209 8.00001C3.89209 10.2687 5.73142 12.108 8.00009 12.108C10.2688 12.108 12.1081 10.2687 12.1081 8.00001C12.1081 5.73134 10.2688 3.89201 8.00009 3.89201ZM8.00009 10.6667C6.52742 10.6667 5.33342 9.47267 5.33342 8.00001C5.33342 6.52734 6.52742 5.33334 8.00009 5.33334C9.47276 5.33334 10.6668 6.52734 10.6668 8.00001C10.6668 9.47267 9.47276 10.6667 8.00009 10.6667Z" fill="currentColor"/>
      <path d="M12.2705 4.68933C12.8007 4.68933 13.2305 4.25952 13.2305 3.72933C13.2305 3.19913 12.8007 2.76933 12.2705 2.76933C11.7404 2.76933 11.3105 3.19913 11.3105 3.72933C11.3105 4.25952 11.7404 4.68933 12.2705 4.68933Z" fill="currentColor"/>
    </svg>

  )
}

export default Instagram----------------------------------------

FILE: ./src/components/icons/socials/Whatsapp.tsx
----------------------------------------
import React from 'react'

const Whatsapp = () => {
  return (
    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
      <g clipPath="url(#clip0_12_469)">
        <path fillRule="evenodd" clipRule="evenodd" d="M13.604 2.32537C12.1066 0.826703 10.116 0.000704812 7.99532 3.8147e-05C3.62533 3.8147e-05 0.0686665 3.55603 0.0666665 7.92802C0.0659999 9.32535 0.431332 10.6893 1.12533 11.892L0 16L4.20266 14.8973C5.36065 15.5293 6.66465 15.862 7.99131 15.8627H7.99465C12.364 15.8627 15.9213 12.306 15.9233 7.93402C15.9246 5.81603 15.1006 3.82336 13.604 2.32537ZM7.99532 14.5233H7.99265C6.80998 14.5233 5.65065 14.2053 4.63866 13.6047L4.39799 13.462L1.904 14.116L2.56999 11.684L2.41333 11.4347C1.75333 10.3853 1.40533 9.17268 1.406 7.92802C1.40733 4.2947 4.36399 1.3387 7.99865 1.3387C9.75864 1.3387 11.4133 2.02537 12.6573 3.2707C13.9013 4.5167 14.586 6.17202 14.5853 7.93269C14.5833 11.5673 11.6273 14.5233 7.99532 14.5233ZM11.61 9.58802C11.412 9.48868 10.438 9.00935 10.256 8.94335C10.0746 8.87735 9.94264 8.84402 9.80998 9.04202C9.67731 9.24002 9.29865 9.68668 9.18265 9.81935C9.06731 9.95135 8.95131 9.96802 8.75331 9.86868C8.55531 9.76935 7.91665 9.56068 7.15998 8.88535C6.57132 8.36002 6.17332 7.71135 6.05799 7.51269C5.94265 7.31402 6.04599 7.20736 6.14465 7.10869C6.23399 7.02002 6.34265 6.87736 6.44199 6.76136C6.54199 6.64669 6.57465 6.56402 6.64132 6.43136C6.70732 6.29936 6.67465 6.18336 6.62465 6.08402C6.57465 5.98536 6.17865 5.01003 6.01399 4.61336C5.85332 4.2267 5.68999 4.27936 5.56799 4.27336C5.45265 4.26736 5.32065 4.2667 5.18799 4.2667C5.05599 4.2667 4.84132 4.31603 4.65999 4.51469C4.47866 4.71336 3.96666 5.19269 3.96666 6.16736C3.96666 7.14269 4.67666 8.08469 4.77532 8.21669C4.87399 8.34869 6.17199 10.35 8.15931 11.208C8.63198 11.412 9.00131 11.534 9.28864 11.6253C9.76331 11.776 10.1953 11.7547 10.5366 11.704C10.9173 11.6473 11.7086 11.2247 11.874 10.762C12.0393 10.2993 12.0393 9.90202 11.9893 9.82002C11.94 9.73668 11.808 9.68735 11.61 9.58802Z" fill="currentColor"/>
      </g>
      <defs>
        <clipPath id="clip0_12_469">
          <rect width="16" height="16" fill="white"/>
        </clipPath>
      </defs>
    </svg>

  )
}

export default Whatsapp----------------------------------------

FILE: ./src/components/info/Calendar.tsx
----------------------------------------
'use client'
import React from 'react'
import FullCalendar from '@fullcalendar/react'
import dayGridPlugin from '@fullcalendar/daygrid'
import { EventInput } from '@fullcalendar/core' // Make sure to import this

export default function Calendar() {
  // Properly type the events array as EventInput[]
  const events: EventInput[] = [
    {
      title: 'event 2',
      start: '2022-08-29',
      end: '2022-09-03',
      allDay: true,
      extendedProps: {
        HostName: 'Some host name',
      },
    },
    // Add more events as needed
  ]

  return (
    <FullCalendar
      plugins={[dayGridPlugin]}
      initialView="dayGridMonth"
      events={events}
      height="auto"
    />
  )
}
----------------------------------------

FILE: ./src/components/info/News.tsx
----------------------------------------
import React from 'react'
import { Box, BoxProps, Container, Grid, Typography } from '@mui/material'

import Card from '../home/news/Card'
import { NEWS } from '../../mocks/news'
import { Fade } from 'react-slideshow-image'

interface Props extends BoxProps {
  header?: React.ReactNode
}

const News: React.FC<Props> = (props) => {
  const { header, sx } = props

  return (
    <Box
      sx={{
        ...sx,
        '& .news-card': {
          p: 2,
          '& .MuiTypography-root': {
            fontSize: 24,
          },
          '& .MuiChip-root': {
            p: 1,
            height: 'auto',
            borderRadius: '50px',
          },
          '& .MuiChip-label': {
            fontSize: 20,
          },
        },
      }}
    >
      <Typography sx={{ mb: 1 }} variant="h4">
        {header}
      </Typography>
      <Fade arrows={false}>
        {NEWS.map((item) => (
          <Card {...item} key={item.id} />
        ))}
      </Fade>
    </Box>
  )
}

export default News
----------------------------------------

FILE: ./src/components/info/Products.tsx
----------------------------------------
import React from 'react'
import {
  Box,
  BoxProps,
  Button,
  Container,
  Grid,
  Typography,
} from '@mui/material'
import ProductCard from '../home/products/ProductCard'
import { Product } from '../products/types'
import { Fade } from 'react-slideshow-image'

interface Props extends BoxProps {
  header?: React.ReactNode
  items: Product[]
}

const Products: React.FC<Props> = (props) => {
  const { items, header, sx } = props

  return (
    <Box
      sx={{
        ...sx,
        '& .product-card': {
          p: 2,
          '& .MuiTypography-root': {
            fontSize: 24,
          },
          '& .MuiChip-root': {
            p: 1,
            height: 'auto',
            borderRadius: '50px',
          },
          '& .MuiChip-label': {
            fontSize: 20,
          },
        },
      }}
    >
      <Typography sx={{ mb: 1 }} variant="h4">
        {header}
      </Typography>
      <Fade arrows={false}>
        {items.map((item, index) => (
          <ProductCard {...item} key={item.id} />
        ))}
      </Fade>
    </Box>
  )
}

export default Products
----------------------------------------

FILE: ./src/components/info/RSSFeed.tsx
----------------------------------------
import React from 'react'
import axios from 'axios'
import { Fade } from 'react-slideshow-image'
import '../../../node_modules/react-slideshow-image/dist/styles.css'
import { Box, Typography } from '@mui/material'

const RSSFeed: React.FC = () => {
  const KEY = 'qazc8r9hi6tso17ml77ug9u21i4ydytiaslmbbeh'
  const URL =
    'https://www.homburg.de/index.php/aktuelles/nachrichten?format=feed&type=rss'

  const [feed, setFeed] = React.useState<any>([])

  React.useEffect(() => {
    const RSS_TO_JSON = `https://api.rss2json.com/v1/api.json?api_key=${KEY}&rss_url=${URL}`

    axios
      .get(RSS_TO_JSON, {})
      .then((res) => {
        console.log(res)
        let items = res.data.items
        console.log(items)
        setFeed(items.slice(Math.max(items.length - 5, 0)))
      })
      .catch((error) => console.error(error))
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])

  return (
    <Fade arrows={false}>
      {feed.map((item: any, index: any) => (
        <div style={{ ...styles.fade }} className="each-fade" key={index}>
          <Box
            sx={{
              ...styles.fade,
              position: 'relative',
              backgroundImage: `url(${item.thumbnail})`,
              backgroundPosition: 'center',
              backgroundSize: 'cover',
              borderRadius: '12px',
              overflow: 'hidden',
              padding: 2,
              height: '100%',
              textShadow: '0 0 0 rgba(0,0,0,0.25)',
            }}
          >
            <Box
              sx={{
                position: 'absolute',
                top: 0,
                left: 0,
                width: '100%',
                height: '100%',
                bgcolor: 'rgba(0,0,0,0.66)',
              }}
            />
            <Typography
              fontSize={24}
              sx={{ position: 'relative' }}
              color="common.white"
            >
              {item.title}
            </Typography>
          </Box>
        </div>
      ))}
    </Fade>
  )
}

const styles = {
  fade: {
    height: '300px',
  },
}

export default RSSFeed
----------------------------------------

FILE: ./src/components/info/Slideshow.tsx
----------------------------------------
import React from 'react'
import { Fade } from 'react-slideshow-image'
import '../../../node_modules/react-slideshow-image/dist/styles.css'

const Slideshow: React.FC = () => {
  const slideImages = [
    {
      url: '/assets/images/bakery/neu_theke.jpeg',
      caption: 'Slide 1',
    },
    {
      url: '/assets/images/bakery/neu_theke2.jpeg',
      caption: 'Slide 2',
    },
    {
      url: '/assets/images/bakery/neu_theke3.jpeg',
      caption: 'Slide 3',
    },
  ]
  return (
    <div style={styles.fade} className="slide-container">
      <Fade arrows={false}>
        {slideImages.map((slideImage, index) => (
          <div style={styles.fade} className="each-fade" key={index}>
            <div
              style={{
                ...styles.fade,
                backgroundImage: `url(${slideImage.url})`,
              }}
            >
              <span>{slideImage.caption}</span>
            </div>
          </div>
        ))}
      </Fade>
    </div>
  )
}

const styles = {
  fade: {
    height: '300px',
  },
}

export default Slideshow
----------------------------------------

FILE: ./src/components/info/Weather.tsx
----------------------------------------
import { Box, Container, Typography } from '@mui/material'
import React from 'react'
// @ts-ignore
import ReactWeather, { useVisualCrossing } from 'react-open-weather'

const Weather: React.FC = () => {
  const { data, isLoading, errorMessage } = useVisualCrossing({
    key: 'GKURCMTJ2FMZRGF7DHG7JFWEA',
    lat: '49.30107377123533',
    lon: '7.369370264295438',
    lang: 'de',
    unit: 'metric', // values are (metric,us,uk)
  })

  return (
    <Box
      sx={{
        '& .rw-container': {
          fontFamily: 'Ubuntu',
        },
        '& .rw-container-header': {
          fontWeight: 'bold !important',
          mb: '0px !important',
        },
        '& .rw-today-date': {
          fontWeight: 'bold !important',
        },
      }}
    >
      <ReactWeather
        isLoading={isLoading}
        errorMessage={errorMessage}
        data={data}
        lang="de"
        locationLabel="Kirrberg"
        unitsLabels={{ temperature: 'C', windSpeed: 'Km/h' }}
        showForecast
      />
    </Box>
  )
}

export default Weather
----------------------------------------

FILE: ./src/components/info/useDate.tsx
----------------------------------------
import React from 'react'

const useDate = () => {
  const locale = 'en'
  const [today, setDate] = React.useState(new Date()) // Save the current date to be able to trigger an update

  React.useEffect(() => {
    const timer = setInterval(() => {
      // Creates an interval which will update the current data every minute
      // This will trigger a rerender every component that uses the useDate hook.
      setDate(new Date())
    }, 60 * 1000)
    return () => {
      clearInterval(timer) // Return a funtion to clear the timer so that it will stop being called on unmount
    }
  }, [])

  const day = today.toLocaleDateString(locale, { weekday: 'long' })
  const date = `${day}, ${today.getDate()} ${today.toLocaleDateString(locale, {
    month: 'long',
  })}\n\n`

  const hour = today.getHours()
  const wish = `Guten ${
    (hour < 12 && 'Morgen') || (hour < 17 && 'Tag') || 'Abend'
  }, `

  const time = today.toLocaleTimeString(locale, {
    hour: 'numeric',
    hour12: false,
    minute: 'numeric',
  })

  return {
    date,
    time,
    wish,
  }
}

export default useDate
----------------------------------------

FILE: ./src/components/orders/Form.tsx
----------------------------------------
import React from 'react'
import emailjs from '@emailjs/browser'

import { Box, Grid, Typography } from '@mui/material'
import PersonRoundedIcon from '@mui/icons-material/PersonRounded'
import EmailRoundedIcon from '@mui/icons-material/EmailRounded'
import ChatRoundedIcon from '@mui/icons-material/ChatRounded'
import { CartContext } from '../../context/CartContext'
import { formatter } from '../../utils/formatPrice'

import Input from '../Input'
import Button from '../button/Index'
import Card from '../cart/Card'

const INPUTS = [
  {
    label: 'Name',
    placeholder: 'Name',
    name: 'user_name',
    type: 'text',
    icon: <PersonRoundedIcon />,
  },
  {
    label: 'Email',
    placeholder: 'Email',
    name: 'user_email',
    type: 'email',
    icon: <EmailRoundedIcon />,
  },
  {
    label: 'Bestellung',
    placeholder: 'Zum Beispiel: 1 Weisbrot, 3 Doppelweck',
    name: 'message',
    type: 'text',
    icon: <ChatRoundedIcon />,
    multiline: true,
  },
]

const OrderForm: React.FC = () => {
  const form = React.useRef<HTMLFormElement | string>('null')
  const [loading, setLoading] = React.useState(false)
  const [showSuccess, setShowSuccess] = React.useState(false)
  const { items, totalPrice } = React.useContext(CartContext)

  const sendEmail = (e: any) => {
    e.preventDefault()
    setLoading(true)
    emailjs
      .sendForm(
        'service_fqlqhhr',
        'template_bcbu0nt',
        form.current,
        'Tko9wdH-vfOzIrqHI'
      )
      .then(
        (result) => {
          setShowSuccess(true)
          console.log(result.text)
          setLoading(false)
          /* @ts-ignore */
          form.current.reset()
        },
        (error) => {
          console.log(error.text)
          setLoading(false)
        }
      )
  }

  return (
    <Box sx={styles.container}>
      <Typography variant="h5">Online bestellen</Typography>

      {showSuccess && (
        <Box sx={styles.success}>
          <Typography variant="body1" mb={2}>
            Vielen Dank für deine Bestellung!
          </Typography>
          <Button onClick={() => setShowSuccess(false)} color="inherit">
            Noch etwas bestellen
          </Button>
        </Box>
      )}

      {!showSuccess && (
        <Box sx={{ mb: 6 }}>
          <Typography variant="body2" color="text.secondary" mb={2}>
            Du kannst auch gerne online bestellen und deine Bestellung einfach
            bei uns abholen. Fülle einfach das Bestellformular aus und wir
            senden dir umgehend eine Nachricht sobald die Bestellung bereit
            steht.
          </Typography>
          {/* @ts-ignore */}
          <form ref={form} onSubmit={sendEmail}>
            {INPUTS.map((item) => (
              <Input
                key={item.name}
                label={item.label}
                placeholder={item.placeholder}
                type={item.type}
                name={item.name}
                fullWidth
                InputProps={{
                  startAdornment: item.icon,
                }}
                multiline={!!item.multiline}
                minRows={3}
              />
            ))}
            {/* <Grid container spacing={2}>
              {items.map((item) => (
                <Card key={item.id} {...item} />
              ))}
            </Grid> */}
            {/* <Typography variant='h2'>Summe: {formatter.format(totalPrice)}</Typography> */}
            <Button disabled={loading} type="submit" size="large">
              Bestellen
            </Button>
          </form>
        </Box>
      )}
    </Box>
  )
}

const styles = {
  container: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'flex-start',
    width: '100%',
  },
  success: {
    mt: 2,
    p: 2,
    boxShadow: 1,
    width: '100%',
    bgcolor: 'background.paper',
    borderRadius: '8px',
  },
}

export default OrderForm
----------------------------------------

FILE: ./src/components/orders/OrderForm.tsx
----------------------------------------
import React, { useState, useEffect } from 'react'
import {
  Paper,
  Typography,
  Box,
  Grid,
  TextField,
  MenuItem,
  IconButton,
  Button as MuiButton,
  Divider,
  List,
  ListItem,
  ListItemText,
  FormControl,
  InputLabel,
  Select,
  SelectChangeEvent,
} from '@mui/material'
import DeleteIcon from '@mui/icons-material/Delete'
import AddCircleIcon from '@mui/icons-material/AddCircle'
import Button from '../button/Index'

// Type definitions
interface Product {
  id: string | number
  name: string
  price: number
}

interface OrderItem {
  productId: string | number
  productName: string
  quantity: number
  unitPrice: number
}

interface OrderData {
  customerName: string
  customerPhone: string
  customerEmail: string
  pickupDate: string
  status: 'Pending' | 'Confirmed' | 'Completed' | 'Cancelled'
  notes: string
  items: OrderItem[]
  totalPrice: number
}

interface OrderFormProps {
  products: Product[]
  order?: {
    customerName?: string
    customerPhone?: string
    customerEmail?: string
    pickupDate?: string | Date
    status?: 'Pending' | 'Confirmed' | 'Completed' | 'Cancelled'
    notes?: string
    items?: OrderItem[]
    totalPrice?: number
  }
  onSave: (orderData: OrderData) => void
  onCancel: () => void
}

const OrderForm: React.FC<OrderFormProps> = ({
  products,
  order,
  onSave,
  onCancel,
}) => {
  // Format the date properly
  const formatPickupDate = (date?: string | Date): string => {
    if (!date) {
      // Default to tomorrow
      return new Date(Date.now() + 24 * 60 * 60 * 1000)
        .toISOString()
        .slice(0, 16)
    }

    const dateObj = date instanceof Date ? date : new Date(date)
    return dateObj.toISOString().slice(0, 16)
  }

  const [orderData, setOrderData] = useState<OrderData>({
    customerName: order?.customerName || '',
    customerPhone: order?.customerPhone || '',
    customerEmail: order?.customerEmail || '',
    pickupDate: formatPickupDate(order?.pickupDate),
    status: order?.status || 'Pending',
    notes: order?.notes || '',
    items: Array.isArray(order?.items) ? [...order.items] : [], // Ensure items is always an array
    totalPrice: order?.totalPrice || 0,
  })

  const [currentItem, setCurrentItem] = useState<OrderItem>({
    productId: '',
    productName: '',
    quantity: 1,
    unitPrice: 0,
  })

  // Calculate total price whenever items change
  useEffect(() => {
    // Make sure items is an array before calling reduce
    const items = Array.isArray(orderData.items) ? orderData.items : []
    const total = items.reduce(
      (sum, item) => sum + item.quantity * item.unitPrice,
      0
    )

    setOrderData((prev) => ({
      ...prev,
      totalPrice: parseFloat(total.toFixed(2)),
    }))
  }, [orderData.items])

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement> | SelectChangeEvent
  ) => {
    const { name, value } = e.target
    setOrderData({
      ...orderData,
      [name as string]: value,
    })
  }

  // Handle numeric input specifically
  const handleNumberInput = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target
    const numericValue = parseInt(value, 10)
    if (!isNaN(numericValue)) {
      setCurrentItem({
        ...currentItem,
        [name]: numericValue,
      })
    }
  }

  // Fixed: Separate handlers for select and regular inputs
  const handleProductSelect = (e: SelectChangeEvent) => {
    const selectedProductId = e.target.value
    const selectedProduct = products.find(
      (p) => p.id.toString() === selectedProductId.toString()
    )

    if (selectedProduct) {
      setCurrentItem({
        ...currentItem,
        productId: selectedProductId,
        productName: selectedProduct.name,
        unitPrice: selectedProduct.price,
      })
    }
  }

  const handleAddItem = () => {
    if (!currentItem.productId) return

    setOrderData({
      ...orderData,
      items: [...orderData.items, { ...currentItem }],
    })

    // Reset current item
    setCurrentItem({
      productId: '',
      productName: '',
      quantity: 1,
      unitPrice: 0,
    })
  }

  const handleRemoveItem = (index: number) => {
    const updatedItems = [...orderData.items]
    updatedItems.splice(index, 1)

    setOrderData({
      ...orderData,
      items: updatedItems,
    })
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    onSave(orderData)
  }

  return (
    <Paper sx={{ p: 3, mb: 4 }}>
      <Typography variant="h5" gutterBottom>
        {order ? 'Edit Order' : 'New Order'}
      </Typography>

      <form onSubmit={handleSubmit}>
        <Grid container spacing={3}>
          {/* Customer Details */}
          <Grid item xs={12}>
            <Typography variant="h6" sx={{ mb: 2 }}>
              Customer Information
            </Typography>
          </Grid>

          <Grid item xs={12} md={4}>
            <TextField
              required
              fullWidth
              label="Customer Name"
              name="customerName"
              value={orderData.customerName}
              onChange={handleChange}
            />
          </Grid>

          <Grid item xs={12} md={4}>
            <TextField
              fullWidth
              label="Phone Number"
              name="customerPhone"
              value={orderData.customerPhone}
              onChange={handleChange}
            />
          </Grid>

          <Grid item xs={12} md={4}>
            <TextField
              fullWidth
              label="Email"
              name="customerEmail"
              type="email"
              value={orderData.customerEmail}
              onChange={handleChange}
            />
          </Grid>

          <Grid item xs={12} md={6}>
            <TextField
              fullWidth
              label="Pickup Date"
              name="pickupDate"
              type="datetime-local"
              value={orderData.pickupDate}
              onChange={handleChange}
              InputLabelProps={{
                shrink: true,
              }}
              required
            />
          </Grid>
          <Grid item xs={12} md={6}>
            <FormControl fullWidth required>
              <InputLabel>Order Status</InputLabel>
              <Select
                name="status"
                value={orderData.status}
                onChange={handleChange}
                label="Order Status"
              >
                <MenuItem value="Pending">Pending</MenuItem>
                <MenuItem value="Confirmed">Confirmed</MenuItem>
                <MenuItem value="Completed">Completed</MenuItem>
                <MenuItem value="Cancelled">Cancelled</MenuItem>
              </Select>
            </FormControl>
          </Grid>

          <Grid item xs={12}>
            <TextField
              fullWidth
              multiline
              rows={2}
              label="Order Notes"
              name="notes"
              value={orderData.notes}
              onChange={handleChange}
            />
          </Grid>

          {/* Order Items */}
          <Grid item xs={12}>
            <Divider sx={{ my: 2 }} />
            <Typography variant="h6" sx={{ mb: 2 }}>
              Order Items
            </Typography>

            <Grid container spacing={2} sx={{ mb: 2 }}>
              <Grid item xs={12} md={5}>
                <FormControl fullWidth>
                  <InputLabel>Product</InputLabel>
                  {/* Fixed: Using dedicated handler */}
                  <Select
                    value={currentItem.productId.toString()}
                    onChange={handleProductSelect}
                    label="Product"
                  >
                    {products.map((product) => (
                      <MenuItem key={product.id} value={product.id.toString()}>
                        {product.name} - ${product.price.toFixed(2)}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>

              <Grid item xs={12} md={3}>
                <TextField
                  fullWidth
                  type="number"
                  label="Quantity"
                  name="quantity"
                  value={currentItem.quantity}
                  onChange={handleNumberInput}
                  inputProps={{ min: 1 }}
                />
              </Grid>

              <Grid item xs={12} md={4}>
                <MuiButton
                  variant="contained"
                  startIcon={<AddCircleIcon />}
                  onClick={handleAddItem}
                  disabled={!currentItem.productId}
                  fullWidth
                  sx={{ height: '100%' }}
                >
                  Add Item
                </MuiButton>
              </Grid>
            </Grid>

            <Paper
              variant="outlined"
              sx={{ maxHeight: '300px', overflow: 'auto' }}
            >
              <List>
                {orderData.items.length > 0 ? (
                  orderData.items.map((item, index) => (
                    <ListItem
                      key={index}
                      secondaryAction={
                        <IconButton
                          edge="end"
                          onClick={() => handleRemoveItem(index)}
                        >
                          <DeleteIcon color="error" />
                        </IconButton>
                      }
                      divider={index < orderData.items.length - 1}
                    >
                      <ListItemText
                        primary={item.productName}
                        secondary={`${
                          item.quantity
                        } × $${item.unitPrice.toFixed(2)} = $${(
                          item.quantity * item.unitPrice
                        ).toFixed(2)}`}
                      />
                    </ListItem>
                  ))
                ) : (
                  <ListItem>
                    <ListItemText primary="No items added to this order yet." />
                  </ListItem>
                )}
              </List>
            </Paper>

            <Box sx={{ mt: 2, textAlign: 'right' }}>
              <Typography variant="h6">
                Total: ${orderData.totalPrice.toFixed(2)}
              </Typography>
            </Box>
          </Grid>

          <Grid item xs={12}>
            <Divider sx={{ my: 2 }} />
            <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 2 }}>
              <Button onClick={onCancel} type="button" color="secondary">
                Cancel
              </Button>
              <Button type="submit">Save Order</Button>
            </Box>
          </Grid>
        </Grid>
      </form>
    </Paper>
  )
}

export default OrderForm
----------------------------------------

FILE: ./src/components/products/Filter.tsx
----------------------------------------
import React from 'react'
import { Box, Grid, Typography } from '@mui/material'
import { PRODUCTS } from '../../mocks/products'
import Brot from '../icons/products/Brot'
import Broetchen from '../icons/products/Broetchen'
import Teilchen from '../icons/products/Teilchen'
import Kuchen from '../icons/products/Kuchen'
import Torten from '../icons/products/Torten'
import Getranke from '../icons/products/Getranke'
import { Product } from './types'

interface Props {
  setProducts: (items: Product[]) => void
}

const FILTERS = [
  { label: 'Brot', icon: <Brot /> },
  { label: 'Brötchen', icon: <Broetchen /> },
  { label: 'Teilchen', icon: <Teilchen /> },
  { label: 'Kuchen', icon: <Kuchen /> },
  { label: 'Torten', icon: <Torten /> },
  { label: 'Getränke', icon: <Getranke /> },
]

const Filter: React.FC<Props> = (props) => {
  const { setProducts } = props
  const [selected, setSelected] = React.useState('')

  React.useEffect(() => {
    filter('Brot')
  }, [])

  const filter = (input: String) => {
    const newArray = PRODUCTS.filter((product) =>
      product.category.includes(input)
    ).map((filteredName) => filteredName)

    setProducts(newArray)
    setSelected(input as string)
  }

  return (
    <Box sx={styles.root}>
      <Grid container spacing={2}>
        {FILTERS.map((item) => (
          <Grid key={item.label} item xs={4} sm={2} md={2}>
            <Box
              sx={styles.item}
              onClick={() => filter(item.label)}
              className={`${item.label === selected ? 'active' : ''}`}
            >
              {item.icon}
              <Typography mt={1}>{item.label}</Typography>
            </Box>
          </Grid>
        ))}
      </Grid>
    </Box>
  )
}

const styles = {
  root: {
    display: 'flex',
    justifyContent: 'space-between',
    mb: 4,
  },
  item: {
    borderRadius: '8px',
    boxShadow: 1,
    p: 2,
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
    alignItems: 'center',
    bgcolor: 'background.default',
    transition: 'all ease-in-out 200ms',
    cursor: 'pointer',

    '& *': {
      transition: 'all ease-in-out 200ms',
      color: 'text.primary',
    },

    '&:hover': {
      bgcolor: 'grey.300',
      transform: 'translateY(-2px)',

      '& *': {
        fontWeight: 'bold',
      },
    },

    '&.active': {
      bgcolor: 'primary.main',

      '& *': {
        color: 'background.paper',
        fontWeight: 'bold',
      },
    },
  },
}

export default Filter
----------------------------------------

FILE: ./src/components/products/ProductDetail.tsx
----------------------------------------
'use client'

import React from 'react'
import { Box, Chip, Container, Grid, Typography } from '@mui/material'
import Hero from '../../components/Hero'
import { Product } from '../../components/products/types'
import { formatter } from '../../utils/formatPrice'
import Button from '../../components/button/Index'
import { CartContext } from '../../context/CartContext'

interface ProductDetailProps {
  product: Product
}

export default function ProductDetail({ product }: ProductDetailProps) {
  const { add } = React.useContext(CartContext)

  return (
    <Container maxWidth="sm">
      <Hero title={product?.name} />
      <Grid container spacing={2}>
        <Grid item xs={6}>
          <Box sx={styles.image}>
            <img src={product?.image} alt={product?.name} />
          </Box>
        </Grid>
        <Grid item xs={6}>
          <Typography>{product?.name} Beschreibung</Typography>
          <Box sx={styles.footer}>
            <Chip size="small" label={product?.category} />
            <Typography variant="button" fontSize="16px">
              {formatter.format(product?.price)}
            </Typography>
          </Box>
          {/* <Button sx={{ mt: 2 }} onClick={() => add(product?.id)}>
            Zum Warenkorb
          </Button> */}
        </Grid>
      </Grid>
    </Container>
  )
}

const styles = {
  image: {
    backgroundSize: 'cover',
    backgroundPosition: 'center',
    height: { xs: '45vw', sm: '260px' },
    width: '100%',
    borderRadius: '8px',
    boxShadow: 1,
    mb: 2,
    bgcolor: 'background.paper',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',

    '& img': {
      maxWidth: '80%',
    },
  },
  footer: {
    mt: 2,
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
}
----------------------------------------

FILE: ./src/components/products/types.ts
----------------------------------------
export interface Product {
	id: number
	name: string
	category: string
	image: string
	price: number
}----------------------------------------

FILE: ./src/context/CartContext.tsx
----------------------------------------
import React from 'react'
import { Product } from '../components/products/types'
import { PRODUCTS } from '../mocks/products'

export interface CartItem extends Product {
  count: number
}

interface CartContextProps {
  items: CartItem[]
  totalPrice: number
  totalCount: number
  setItems: (items: CartItem[]) => void
  add: (id: number) => void
  remove: (id: number) => void
  changeCount: (id: number, diff: number) => void
}

export const CartContext = React.createContext({} as CartContextProps)

interface Props {
  children: React.ReactNode
}

const CartProvider: React.FC<Props> = ({ children }) => {
  const [items, setItems] = React.useState<CartItem[]>([])
  const [totalCount, setTotalCount] = React.useState(0)
  const [totalPrice, setTotalPrice] = React.useState(0)

  const alreadyExists = (id: number): boolean => {
    let item = items.find((product) => product.id === id)
    if (item) return true
    return false
  }

  const getCartItem = (id: number): CartItem => {
    return items.find((product) => product.id === id) as CartItem
  }

  const getProduct = (id: number): CartItem => {
    return PRODUCTS.find((product) => product.id === id)
  }

  const add = (id: number) => {
    let product = getProduct(id)
    if (!alreadyExists(id)) {
      setItems([
        ...items,
        {
          ...product,
          count: 1,
        },
      ])
    } else {
      changeCount(id, 1)
    }
    setTotalCount(totalCount + 1)
    setTotalPrice(totalPrice + product.price)
  }

  const remove = (id: number) => {
    setItems(items.filter((item) => item.id !== id))
  }

  const changeCount = (id: number, diff: number) => {
    let newArray: CartItem[] = []
    let newTotalCount = 0
    let newTotalPrice = 0
    items.forEach((item) => {
      if (item.id === id) {
        item.count = item.count + diff
      }
      if (item.count > 0) {
        newArray.push(item)
        newTotalPrice = newTotalPrice + item.count * item.price
      }
      newTotalCount = newTotalCount + item.count
    })
    setItems(newArray)
    setTotalCount(newTotalCount)
    setTotalPrice(newTotalPrice)
  }

  const value = {
    totalPrice,
    items,
    totalCount,
    setItems,
    add,
    remove,
    changeCount,
  }

  return <CartContext.Provider value={value}>{children}</CartContext.Provider>
}

export default CartProvider
----------------------------------------

FILE: ./src/layouts/Base.tsx
----------------------------------------
// website/src/layouts/Base.tsx
'use client'
import { Box } from '@mui/material'
import { Header } from '../components/header' // Import Header
import Footer from '../components/footer/Index' // Import Footer

interface Props {
  children: React.ReactNode
}

const Base: React.FC<Props> = ({ children }) => (
  <Box
    sx={{
      background:
        'radial-gradient(143.25% 143.25% at 50% 100%, #FFFFFF 0%, rgba(255, 255, 255, 0) 100%), #D8E1F4',
    }}
  >
    <Header />
    <Box sx={{ minHeight: 'calc(100vh - 332px)' }}>{children}</Box>
    {/* <Cart /> */}
  </Box>
)

export default Base
----------------------------------------

FILE: ./src/layouts/BasePagesRouter.tsx
----------------------------------------
'use client'
import { Box } from '@mui/material'
import { NextSeo } from 'next-seo'

import { AppConfig } from '../utils/AppConfig'
import { Header } from '../components/header'
import Footer from '../components/footer/Index'
import Head from 'next/head'
import { useRouter } from 'next/router'

interface Props {
  children: React.ReactNode
}

const Base: React.FC<Props> = ({ children }) => (
  <Box
    sx={{
      background:
        'radial-gradient(143.25% 143.25% at 50% 100%, #FFFFFF 0%, rgba(255, 255, 255, 0) 100%), #D8E1F4',
    }}
  >
    <Meta title={AppConfig.title} description={AppConfig.description} />
    <Header />
    <Box sx={{ minHeight: 'calc(100vh - 332px)' }}>{children}</Box>
    {/* <Cart /> */}
    <Footer />
  </Box>
)

type IMetaProps = {
  title: string
  description: string
  canonical?: string
}

const Meta = (props: IMetaProps) => {
  const router = useRouter()

  return (
    <>
      <Head>
        <meta charSet="UTF-8" key="charset" />
        <meta
          name="viewport"
          content="width=device-width,initial-scale=1"
          key="viewport"
        />
        <link
          rel="apple-touch-icon"
          href={`${process.env.basePath}/apple-touch-icon.png`}
          key="apple"
        />
        <link
          rel="icon"
          type="image/png"
          sizes="32x32"
          href={`${process.env.basePath}/favicon-32x32.png`}
          key="icon32"
        />
        <link
          rel="icon"
          type="image/png"
          sizes="16x16"
          href={`${process.env.basePath}/favicon-16x16.png`}
          key="icon16"
        />
        <link
          rel="icon"
          href={`${process.env.basePath}/favicon.ico`}
          key="favicon"
        />
      </Head>
      <NextSeo
        title={props.title}
        description={props.description}
        canonical={props.canonical}
        openGraph={{
          title: props.title,
          description: props.description,
          url: props.canonical,
          locale: AppConfig.locale,
          site_name: AppConfig.site_name,
        }}
      />
    </>
  )
}

export default Base
----------------------------------------

FILE: ./src/mocks/news/index.ts
----------------------------------------
export const NEWS = [
  {
    id: 1,
    slug: 'verkaufspartner-gesucht',
    name: 'Verkaufspartner gesucht!',
    published: '25.07.2022',
    category: 'Internes',
    image: 'https://images.pexels.com/photos/2079438/pexels-photo-2079438.jpeg',
    shortDescription: 'Wir suchen in der Vorstadt Homburg, Bereich ...',
    text: `Wir suchen in der Vorstadt Homburg, Bereich Birkensiedlung-Realschule-Saarpfalz-Gymnasium- Waldstadion Jemanden, der in Eigenverantwortung und mit eigenem Verkaufsplatz bereit wäre, unsere Backwaren an unseren Öffnungstagen Mo, Di, Do, Fr und Sa zu verkaufen. Bitte kontaktieren Sie uns hierzu über die angegebenen Kontaktmöglichkeiten. Alles Weitere können wir in einen persönlichen Gespräch besprechen.`,
  },
  {
    id: 2,
    slug: 'geaenderte-oeffnungszeiten',
    name: 'Geänderte Öffnungszeiten in den Sommerferien!',
    published: '25.07.2022',
    category: 'Internes',
    image:
      'https://images.pexels.com/photos/5414061/pexels-photo-5414061.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2',
    shortDescription:
      'Sehr geehrte Kunden, bitte beachten Sie unsere geänderten Öffnungszeiten ...',
    text: `Sehr geehrte Kunden, bitte beachten Sie unsere geänderten Öffnungszeiten in den Ferien: Montag, Dienstag, Donnerstag und Freitag von 5 bis 11 Uhr und von 15:30 bis 18 Uhr. Samstag von 6 bis 13 Uhr und Mittwoch und Sonntags sind wie gehabt Ruhetage.`,
  },
  {
    id: 3,
    slug: 'neue-abholstation',
    name: 'Neue Abholstation!',
    published: '24.07.2022',
    category: 'Internes',
    image: 'https://images.pexels.com/photos/7020283/pexels-photo-7020283.jpeg',
    shortDescription:
      'Unsere Abholstation zum Abholen von vorbestellten Backwaren ...',
    text: `Unsere Abholstation zum Abholen von vorbestellten Backwaren in der Mittagspause oder nach Feierabend.`,
  },
  {
    id: 4,
    slug: 'aushilfe-gesucht',
    name: 'Aushilfe gesucht!',
    published: '15.06.2022',
    category: 'Internes',
    image:
      'https://images.pexels.com/photos/8902060/pexels-photo-8902060.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    shortDescription: 'Wir suchen eine Aushilfe im Backbetrieb, möglichst ...',
    text: `Wir suchen eine Aushilfe im Backbetrieb, möglichst dauerhaft bei einer 5-Tage-Woche.
    Arbeitszeiten der 5-Tage Woche (35 Stunden Höchstwert) sind:
    Mo, Di, Do, Fr: 3:00 - 8:00 Uhr (ca.)
    Sa: 0:00 - 5:00 Uhr (ca.)
    Mittwoch und Sonn- und Feiertage frei
    Abweichende Feiertagsregelung
    Vergütung: 60€/Schicht VB`,
  },
]
----------------------------------------

FILE: ./src/mocks/products/baguettes.json
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./src/mocks/products/breads.json
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./src/mocks/products/buns.json
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./src/mocks/products/cakes.json
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./src/mocks/products/featured.ts
----------------------------------------
import buns from './buns.json'
import cakes from './cakes.json'
import breads from './breads.json'

export const featuredProducts = [
  buns[0],
  buns[1],
  cakes[2],
  cakes[4],
  cakes[3],
  breads[1],
  breads[3],
  breads[5],
]
----------------------------------------

FILE: ./src/mocks/products/index.ts
----------------------------------------
const BREADS = require('./breads.json')
const BAGUETTES = require('./baguettes.json')
const BUNS = require('./buns.json')
const SWEETS = require('./sweets.json')
const CAKES = require('./cakes.json')
const SPECIAL_CAKES = require('./special-cakes.json')
const SNACKS = require('./snacks.json')

export const PRODUCTS = [
  ...BREADS,
  ...BAGUETTES,
  ...BUNS,
  ...SNACKS,
  ...SWEETS,
  ...CAKES,
  ...SPECIAL_CAKES,
]
----------------------------------------

FILE: ./src/mocks/products/snacks.json
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./src/mocks/products/special-cakes.json
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./src/mocks/products/sweets.json
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

FILE: ./src/mocks/testimonials/index.ts
----------------------------------------
export const TESTIMONIALS = [
  {
    stars: 5,
    name: 'Freyja7',
    text: 'das ist noch eine 3 Generationen - Bäckerei da wird noch alles, Brot Brötchen, Kuchen, Torten selber gebacken nix vom Band. Echte Handwerkskunst vom Feinsten 👌🏻😍',
  },
  {
    stars: 3,
    name: 'Sarah K',
    text: 'Lieblings Bäckerei! Seit der Kindheit!!! Hier wird noch selbst gebacken und es schmeckt ausgezeichnet! Preis Leistung top👌 Dazu ein außergewöhnlich freundliches Personal!!',
  },
  {
    stars: 5,
    name: 'Niko H',
    text: 'Super leckere Brötchen. Schön groß, einfach toll',
  },
]
----------------------------------------

FILE: ./src/services/bakeryAPI.ts
----------------------------------------
'use client'
import {
  Product,
  SalesData,
  ProductionData,
  FinancialData,
  StaffData,
  CustomerData,
  InventoryItem,
  TimeSeriesData,
  TimeRange,
  Order,
  BakingListResponse,
} from './types'

const API_BASE_URL = 'http://localhost:5000'

// Mock data generator functions
const generateMockData = () => {
  // Generate product data
  const products: Product[] = [
    {
      id: 1,
      name: 'Sourdough Bread',
      category: 'Bread',
      price: 4.99,
      cost: 1.25,
      stock: 45,
    },
    {
      id: 2,
      name: 'Baguette',
      category: 'Bread',
      price: 3.49,
      cost: 0.85,
      stock: 32,
    },
    {
      id: 3,
      name: 'Croissant',
      category: 'Pastry',
      price: 2.99,
      cost: 0.95,
      stock: 60,
    },
    {
      id: 4,
      name: 'Chocolate Cake',
      category: 'Cake',
      price: 24.99,
      cost: 8.75,
      stock: 12,
    },
    {
      id: 5,
      name: 'Apple Pie',
      category: 'Pie',
      price: 18.99,
      cost: 6.5,
      stock: 8,
    },
    {
      id: 6,
      name: 'Cinnamon Roll',
      category: 'Pastry',
      price: 3.49,
      cost: 1.1,
      stock: 40,
    },
    {
      id: 7,
      name: 'Rye Bread',
      category: 'Bread',
      price: 5.49,
      cost: 1.45,
      stock: 28,
    },
    {
      id: 8,
      name: 'Cupcake',
      category: 'Cake',
      price: 2.49,
      cost: 0.85,
      stock: 75,
    },
  ]

  // Keep all other mock data generator functions...

  return {
    products,
    // Return all other mock data generator functions...
  }
}

// Initialize the mock data
const mockData = generateMockData()

// Helper function to filter data by date range
const filterByDateRange = (data: any[], range: TimeRange): any[] => {
  const today = new Date()
  let startDate = new Date(today)

  switch (range) {
    case 'day':
      startDate = new Date(today)
      break
    case 'week':
      startDate.setDate(today.getDate() - 7)
      break
    case 'month':
      startDate.setMonth(today.getMonth() - 1)
      break
    case 'year':
      startDate.setFullYear(today.getFullYear() - 1)
      break
  }

  const startDateStr = startDate.toISOString().split('T')[0]

  return data.filter((item) => item.date >= startDateStr)
}

// API Service
const bakeryAPI = {
  // Get products - THIS WAS MISSING
  getProducts: async (): Promise<Product[]> => {
    try {
      const response = await fetch(`${API_BASE_URL}/products`)
      if (!response.ok) {
        throw new Error('Failed to fetch products')
      }
      return await response.json()
    } catch (error) {
      console.error('Error fetching products, using mock data:', error)
      // Fall back to mock data if API fails
      return mockData.products
    }
  },

  // Add other mock data methods if needed...

  // Orders
  getOrders: async (): Promise<Order[]> => {
    try {
      const response = await fetch(`${API_BASE_URL}/orders`)
      if (!response.ok) {
        throw new Error('Failed to fetch orders')
      }
      return await response.json()
    } catch (error) {
      console.error('Error fetching orders:', error)
      throw error
    }
  },

  getOrder: async (orderId: string | number): Promise<Order> => {
    try {
      const response = await fetch(`${API_BASE_URL}/orders/${orderId}`)
      if (!response.ok) {
        throw new Error(`Failed to fetch order ${orderId}`)
      }
      return await response.json()
    } catch (error) {
      console.error(`Error fetching order ${orderId}:`, error)
      throw error
    }
  },

  createOrder: async (orderData: Partial<Order>): Promise<Order> => {
    try {
      const response = await fetch(`${API_BASE_URL}/orders`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(orderData),
      })

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}))
        throw new Error(
          `Failed to create order: ${errorData.details || response.statusText}`
        )
      }
      return await response.json()
    } catch (error) {
      console.error('Error creating order:', error)
      throw error
    }
  },

  updateOrder: async (
    orderId: string | number,
    orderData: Partial<Order>
  ): Promise<Order> => {
    try {
      const response = await fetch(`${API_BASE_URL}/orders/${orderId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(orderData),
      })

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}))
        throw new Error(
          `Failed to update order ${orderId}: ${
            errorData.details || response.statusText
          }`
        )
      }
      return await response.json()
    } catch (error) {
      console.error(`Error updating order ${orderId}:`, error)
      throw error
    }
  },

  deleteOrder: async (
    orderId: string | number
  ): Promise<{ message: string }> => {
    try {
      const response = await fetch(`${API_BASE_URL}/orders/${orderId}`, {
        method: 'DELETE',
      })

      if (!response.ok) {
        throw new Error(`Failed to delete order ${orderId}`)
      }
      return await response.json()
    } catch (error) {
      console.error(`Error deleting order ${orderId}:`, error)
      throw error
    }
  },

  // Baking List
  getBakingList: async (date: Date): Promise<BakingListResponse> => {
    try {
      // Format date as YYYY-MM-DD
      const formattedDate =
        date instanceof Date
          ? date.toISOString().split('T')[0]
          : new Date().toISOString().split('T')[0]

      const response = await fetch(
        `${API_BASE_URL}/baking-list?date=${formattedDate}`
      )

      if (!response.ok) {
        throw new Error(`Failed to fetch baking list: ${response.statusText}`)
      }
      return await response.json()
    } catch (error) {
      console.error('Error fetching baking list:', error)
      throw error
    }
  },
}

export default bakeryAPI
----------------------------------------

FILE: ./src/services/types.ts
----------------------------------------
export interface Product {
  id: string | number
  name: string
  category?: string
  price: number
  cost?: number
  stock: number
  dailyTarget?: number
  description?: string
  isActive?: boolean
}

export interface InventoryItem {
  id: string | number
  name: string
  category: string
  quantity: number
  unit: string
  cost_per_unit: number
  last_restocked: string
  min_stock_level: number
}

// Order Types
export interface OrderItem {
  productId: string | number
  productName: string
  quantity: number
  unitPrice: number
}

export interface Order {
  id?: string | number
  customerName: string
  customerPhone?: string
  customerEmail?: string
  pickupDate: string
  status: 'Pending' | 'Confirmed' | 'Completed' | 'Cancelled'
  notes?: string
  items: OrderItem[]
  totalPrice: number
  createdAt?: string
  updatedAt?: string
}

// Baking List Types
export interface BakingItem {
  productId: string | number
  name: string
  shopQuantity: number
  orderQuantity: number
  totalQuantity: number
}

export interface ShopItem {
  productId: string | number
  name: string
  dailyTarget: number
  currentStock: number
  shopQuantity: number
}

export interface OrderItemForBakingList {
  productId: string | number
  productName: string
  quantity: number
}

export interface OrderForBakingList {
  orderId: string | number
  customerName: string
  pickupDate: string
  status: string
  notes?: string
  items: OrderItemForBakingList[]
}

export interface BakingListResponse {
  date: string
  allItems: BakingItem[]
  shopItems: ShopItem[]
  orderItems: OrderForBakingList[]
}

// Analytics Types
export interface SalesData {
  id: number
  date: string
  product_id: number
  product_name: string
  quantity: number
  total: number
  payment_method: string
}

export interface ProductionData {
  id: number
  date: string
  product_id: number
  product_name: string
  quantity_produced: number
  waste: number
  staff_id: number
  staff_name: string
}

export interface FinancialData {
  id: number
  date: string
  category: string
  amount: number
  description: string
}

export interface StaffData {
  id: number
  name: string
  role: string
  productivity: number
  hours: number
}

export interface CustomerData {
  id: number
  name: string
  email: string
  visits: number
  total_spent: number
  last_visit: string
}

export interface TimeSeriesData {
  date: string
  value: number
  [key: string]: any
}

export type TimeRange = 'day' | 'week' | 'month' | 'year'
----------------------------------------

FILE: ./src/services/workflowService.ts
----------------------------------------
import { Workflow } from '../types/workflow'

export const getWorkflows = async (): Promise<Workflow[]> => {
  // In a real app, this would be a fetch call to your API
  // return fetch('/api/workflows').then(res => res.json());

  // Mock data for demonstration
  return [
    {
      id: 'wf-001',
      name: 'croissant_production',
      version: '1.2',
      product: 'Butter Croissants',
      startTime: new Date(new Date().getTime() - 3600000), // 1 hour ago
      estimatedEndTime: new Date(new Date().getTime() + 7200000), // 2 hours from now
      status: 'in-progress',
      batchSize: 48,
      assignedTo: 'Franz Müller',
      steps: [
        {
          id: 'step-001',
          name: 'teig_vorbereiten',
          type: 'manual',
          status: 'completed',
          progress: 100,
          activities: [
            { name: 'mixen', completed: true },
            { name: 'kneten', completed: true },
            { name: 'buttereinschlagen', completed: true },
          ],
          notes: 'Kühlen Sie die Butter auf 8°C herunter',
          startTime: new Date(new Date().getTime() - 3600000),
          endTime: new Date(new Date().getTime() - 3000000),
        },
        {
          id: 'step-002',
          name: 'erste_gehzeit',
          type: 'sleep',
          duration: '2h',
          status: 'completed',
          progress: 100,
          location: 'Kühlraum',
          conditions: { 'temp > 22°C': '1.5h', 'temp < 18°C': '2.5h' },
          startTime: new Date(new Date().getTime() - 3000000),
          endTime: new Date(new Date().getTime() - 1800000),
        },
        {
          id: 'step-003',
          name: 'laminieren',
          type: 'manual',
          status: 'in-progress',
          progress: 65,
          activities: [
            { name: 'ausrollen', completed: true },
            { name: 'falten', completed: true },
            { name: 'kühlen', completed: false },
          ],
          notes: 'Nach jedem Durchgang 20 Minuten kühlen',
          startTime: new Date(new Date().getTime() - 1800000),
        },
        {
          id: 'step-004',
          name: 'zweite_gehzeit',
          type: 'sleep',
          duration: '1h',
          status: 'pending',
          progress: 0,
          location: 'Kühlraum',
        },
        {
          id: 'step-005',
          name: 'formen',
          type: 'manual',
          status: 'pending',
          progress: 0,
          activities: [
            { name: 'ausrollen', completed: false },
            { name: 'schneiden', completed: false },
            { name: 'rollen', completed: false },
          ],
        },
        {
          id: 'step-006',
          name: 'final_proofing',
          type: 'sleep',
          duration: '1.5h',
          status: 'pending',
          progress: 0,
          conditions: { 'temp > 25°C': '1h' },
        },
        {
          id: 'step-007',
          name: 'backen',
          type: 'manual',
          status: 'pending',
          progress: 0,
          notes: 'Vorher mit Ei bestreichen',
          params: { temp: '190°C' },
        },
      ],
    },
    {
      id: 'wf-002',
      name: 'sourdough_bread',
      version: '1.0',
      product: 'Sauerteigbrot',
      startTime: new Date(new Date().getTime() - 28800000), // 8 hours ago
      estimatedEndTime: new Date(new Date().getTime() + 21600000), // 6 hours from now
      status: 'in-progress',
      batchSize: 12,
      assignedTo: 'Maria Schmidt',
      steps: [
        {
          id: 'step-101',
          name: 'starter_füttern',
          type: 'manual',
          status: 'completed',
          progress: 100,
          activities: [{ name: 'mischen', completed: true }],
          notes: 'Sauerteig im Verhältnis 1:1:1 (Starter:Mehl:Wasser) füttern',
          startTime: new Date(new Date().getTime() - 28800000),
          endTime: new Date(new Date().getTime() - 28200000),
        },
        {
          id: 'step-102',
          name: 'starter_reifen',
          type: 'sleep',
          duration: '8h',
          status: 'completed',
          progress: 100,
          conditions: { 'temp < 20°C': '10h' },
          notes: 'Starter sollte sich verdoppeln',
          startTime: new Date(new Date().getTime() - 28200000),
          endTime: new Date(new Date().getTime() - 10800000),
        },
        {
          id: 'step-103',
          name: 'teig_mischen',
          type: 'manual',
          status: 'completed',
          progress: 100,
          activities: [
            { name: 'mehl_wiegen', completed: true },
            { name: 'wasser_zugeben', completed: true },
            { name: 'salz_zugeben', completed: true },
            { name: 'mischen', completed: true },
          ],
          startTime: new Date(new Date().getTime() - 10800000),
          endTime: new Date(new Date().getTime() - 10500000),
        },
        {
          id: 'step-104',
          name: 'autolyse',
          type: 'sleep',
          duration: '1h',
          status: 'completed',
          progress: 100,
          startTime: new Date(new Date().getTime() - 10500000),
          endTime: new Date(new Date().getTime() - 6900000),
        },
        {
          id: 'step-105',
          name: 'kneten_und_falten',
          type: 'manual',
          status: 'completed',
          progress: 100,
          activities: [
            { name: 'kneten', completed: true },
            { name: 'stretch_and_fold', completed: true },
          ],
          startTime: new Date(new Date().getTime() - 6900000),
          endTime: new Date(new Date().getTime() - 6600000),
        },
        {
          id: 'step-106',
          name: 'erste_gehzeit',
          type: 'sleep',
          duration: '4h',
          status: 'in-progress',
          progress: 40,
          conditions: { 'temp > 26°C': '3h' },
          startTime: new Date(new Date().getTime() - 6600000),
        },
      ],
    },
    {
      id: 'wf-003',
      name: 'croissant_production',
      version: '1.2',
      product: 'Schokoladen Croissants',
      startTime: new Date(new Date().getTime() + 3600000), // 1 hour in future
      estimatedEndTime: new Date(new Date().getTime() + 14400000), // 4 hours in future
      status: 'planned',
      batchSize: 36,
      assignedTo: 'Lisa Wagner',
      steps: [
        {
          id: 'step-001',
          name: 'teig_vorbereiten',
          type: 'manual',
          status: 'pending',
          progress: 0,
          activities: [
            { name: 'mixen', completed: false },
            { name: 'kneten', completed: false },
            { name: 'buttereinschlagen', completed: false },
          ],
          notes: 'Kühlen Sie die Butter auf 8°C herunter',
        },
        // Same steps as croissant but status "pending"
        {
          id: 'step-002',
          name: 'erste_gehzeit',
          type: 'sleep',
          duration: '2h',
          status: 'pending',
          progress: 0,
          location: 'Kühlraum',
          conditions: { 'temp > 22°C': '1.5h', 'temp < 18°C': '2.5h' },
        },
        // More pending steps...
      ],
    },
  ]
}

export const updateWorkflowStep = async (
  workflowId: string,
  stepId: string,
  updates: Partial<WorkflowStep>
): Promise<Workflow> => {
  // In a real app, this would be a PUT request
  // return fetch(`/api/workflows/${workflowId}/steps/${stepId}`, {
  //   method: 'PUT',
  //   headers: { 'Content-Type': 'application/json' },
  //   body: JSON.stringify(updates)
  // }).then(res => res.json());

  // For this demo, we'll simulate the API call
  const workflows = await getWorkflows()
  const workflow = workflows.find((w) => w.id === workflowId)

  if (!workflow) {
    throw new Error('Workflow not found')
  }

  const updatedWorkflow = {
    ...workflow,
    steps: workflow.steps.map((step) =>
      step.id === stepId ? { ...step, ...updates } : step
    ),
  }

  // Update the workflow status based on steps
  const allStepsCompleted = updatedWorkflow.steps.every(
    (step) => step.status === 'completed'
  )
  const anyStepInProgress = updatedWorkflow.steps.some(
    (step) => step.status === 'in-progress'
  )

  if (allStepsCompleted) {
    updatedWorkflow.status = 'completed'
  } else if (anyStepInProgress) {
    updatedWorkflow.status = 'in-progress'
  }

  return updatedWorkflow
}

export const startWorkflow = async (workflowId: string): Promise<Workflow> => {
  // Similar implementation to updateWorkflowStep
  const workflows = await getWorkflows()
  const workflow = workflows.find((w) => w.id === workflowId)

  if (!workflow) {
    throw new Error('Workflow not found')
  }

  const updatedWorkflow = {
    ...workflow,
    status: 'in-progress',
    startTime: new Date(),
    steps: workflow.steps.map((step, index) =>
      index === 0
        ? { ...step, status: 'in-progress', progress: 0, startTime: new Date() }
        : step
    ),
  }

  return updatedWorkflow
}

export const pauseWorkflow = async (workflowId: string): Promise<Workflow> => {
  // Implementation similar to above
  const workflows = await getWorkflows()
  const workflow = workflows.find((w) => w.id === workflowId)

  if (!workflow) {
    throw new Error('Workflow not found')
  }

  return {
    ...workflow,
    status: 'paused',
  }
}
----------------------------------------

FILE: ./src/theme.ts
----------------------------------------
'use client'
import { ThemeOptions, createTheme } from '@mui/material'

const headlines = {
  fontFamily: 'Averia Serif Libre',
}

const buttons = {
  fontFamily: 'Averia Serif Libre',
}

const themeOptions: ThemeOptions = {
  palette: {
    mode: 'light',
    primary: {
      main: '#D038BA',
    },
    success: {
      main: '#1ADA67',
    },
    grey: {
      50: '#F6F8FC',
      100: '#F2F5FB',
      200: '#E8EEFB',
      300: '#D8E1F4',
      400: '#B0BFD9',
      500: '#909FBE',
      600: '#677695',
      700: '#485776',
      800: '#293858',
      900: '#131F37',
    },
    background: {
      paper: '#FFFFFF',
      default: '#F6F8FC',
    },
    text: {
      primary: '#131F37',
      secondary: '#485776',
      disabled: '#909FBE',
    },
  },
  typography: {
    fontFamily: "'Ubuntu', sans-serif",
    h1: { ...headlines },
    h2: { ...headlines },
    h3: { ...headlines },
    h4: { ...headlines },
    h5: { ...headlines },
    h6: { ...headlines },
    button: { ...buttons },
  },
}

// Create the theme directly in the theme file
const theme = createTheme(themeOptions)

export default theme
----------------------------------------

FILE: ./src/types/workflow.ts
----------------------------------------
export interface WorkflowActivity {
  name: string
  completed: boolean
}

export interface WorkflowStep {
  id: string
  name: string
  type: string
  duration?: string
  startTime?: Date
  endTime?: Date
  status: 'pending' | 'in-progress' | 'completed' | 'paused' | 'error'
  progress: number
  activities?: WorkflowActivity[]
  notes?: string
  location?: string
  conditions?: Record<string, string>
  params?: Record<string, string | number | boolean>
}

export interface Workflow {
  id: string
  name: string
  version: string
  product: string
  startTime: Date
  estimatedEndTime: Date
  status: 'in-progress' | 'completed' | 'paused' | 'planned'
  steps: WorkflowStep[]
  batchSize: number
  assignedTo: string
}
----------------------------------------

FILE: ./src/utils/AppConfig.ts
----------------------------------------
export const AppConfig = {
  site_name: 'Bäckerei Heusser',
  title: 'Bäckerei Heusser',
  description: '[Site description]',
  locale: 'en',
}
----------------------------------------

FILE: ./src/utils/createEmotionCache.ts
----------------------------------------
import createCache from '@emotion/cache'

const createEmotionCache = () => {
  return createCache({ key: 'css', prepend: true })
}

export default createEmotionCache
----------------------------------------

FILE: ./src/utils/formatPrice.ts
----------------------------------------
export const formatter = new Intl.NumberFormat('de-DE', {
  style: 'currency',
  currency: 'EUR',
  minimumFractionDigits: 2,
})
----------------------------------------

FILE: ./src/utils/workflowUtils.ts
----------------------------------------
import { Workflow } from '../types/workflow'

export const calculateProgress = (workflow: Workflow): number => {
  const totalSteps = workflow.steps.length
  const completedSteps = workflow.steps.filter(
    (step) => step.status === 'completed'
  ).length
  const inProgressStep = workflow.steps.find(
    (step) => step.status === 'in-progress'
  )

  let progress = (completedSteps / totalSteps) * 100
  if (inProgressStep) {
    progress += (inProgressStep.progress / 100) * (1 / totalSteps) * 100
  }

  return Math.round(progress)
}

export const getTimeRemaining = (workflow: Workflow): string => {
  const now = new Date()
  const diff = workflow.estimatedEndTime.getTime() - now.getTime()

  if (diff <= 0) {
    return 'Fällig'
  }

  const hours = Math.floor(diff / (1000 * 60 * 60))
  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60))

  if (hours > 0) {
    return `${hours}h ${minutes}m`
  }
  return `${minutes}m`
}

export const getStatusColor = (
  status: string
): 'success' | 'primary' | 'warning' | 'info' | 'default' => {
  switch (status) {
    case 'completed':
      return 'success'
    case 'in-progress':
      return 'primary'
    case 'paused':
      return 'warning'
    case 'planned':
      return 'info'
    default:
      return 'default'
  }
}

// Parse workflow definition language from YAML
export const parseWorkflowDefinition = (yaml: string): any => {
  // In a real app, you would use a library like js-yaml
  // This is a simple placeholder
  return { parsed: true, yaml }
}

// Generate workflow execution plan from workflow definition
export const generateWorkflowPlan = (
  definition: any,
  startTime: Date = new Date()
): Workflow => {
  // This would generate a new workflow from a definition
  // Simplified placeholder implementation
  return {
    id: `wf-${Date.now()}`,
    name: definition.name || 'new_workflow',
    version: definition.version || '1.0',
    product: 'New Product',
    startTime,
    estimatedEndTime: new Date(startTime.getTime() + 3600000), // +1 hour placeholder
    status: 'planned',
    batchSize: 0,
    assignedTo: '',
    steps: [],
  }
}

export const formatDate = (
  date: Date | string | undefined,
  formatStr: string = 'dd MMM yyyy HH:mm'
): string => {
  if (!date) return 'n/a'
  try {
    const dateObj = typeof date === 'string' ? new Date(date) : date
    return format(dateObj, formatStr)
  } catch (error) {
    console.error('Error formatting date:', error)
    return String(date)
  }
}
----------------------------------------

FILE: ./tsconfig.json
----------------------------------------
[Binary file - content not displayed]
----------------------------------------

